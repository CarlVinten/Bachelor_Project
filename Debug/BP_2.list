
BP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f80  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072ac  080072ac  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072ac  080072ac  000082ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072b4  080072b4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b4  080072b4  000082b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072b8  080072b8  000082b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080072bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080072c8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080072c8  0000911c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011811  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc5  00000000  00000000  0001a853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0001c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fb  00000000  00000000  0001d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afb6  00000000  00000000  0001dcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa2b  00000000  00000000  00048c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dfe8  00000000  00000000  0005869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  001666c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00169758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	080071bc 	.word	0x080071bc

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	080071bc 	.word	0x080071bc

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b9b0 	b.w	800061c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	4688      	mov	r8, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	468e      	mov	lr, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d95f      	bls.n	80003aa <__udivmoddi4+0xd6>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	40b4      	lsls	r4, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	ea43 0e0e 	orr.w	lr, r3, lr
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fbbe f1f8 	udiv	r1, lr, r8
 8000312:	fb08 ee11 	mls	lr, r8, r1, lr
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x5e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x5c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 8154 	bhi.w	80005d8 <__udivmoddi4+0x304>
 8000330:	4601      	mov	r1, r0
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b2a2      	uxth	r2, r4
 8000336:	fbb3 f0f8 	udiv	r0, r3, r8
 800033a:	fb08 3310 	mls	r3, r8, r0, r3
 800033e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000346:	4594      	cmp	ip, r2
 8000348:	d90b      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034a:	18ba      	adds	r2, r7, r2
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	bf2c      	ite	cs
 8000352:	2401      	movcs	r4, #1
 8000354:	2400      	movcc	r4, #0
 8000356:	4594      	cmp	ip, r2
 8000358:	d902      	bls.n	8000360 <__udivmoddi4+0x8c>
 800035a:	2c00      	cmp	r4, #0
 800035c:	f000 813f 	beq.w	80005de <__udivmoddi4+0x30a>
 8000360:	4618      	mov	r0, r3
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba2 020c 	sub.w	r2, r2, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f2      	lsrs	r2, r6
 8000370:	2300      	movs	r3, #0
 8000372:	e9c5 2300 	strd	r2, r3, [r5]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14e      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000392:	4543      	cmp	r3, r8
 8000394:	f0c0 8112 	bcc.w	80005bc <__udivmoddi4+0x2e8>
 8000398:	4282      	cmp	r2, r0
 800039a:	f240 810f 	bls.w	80005bc <__udivmoddi4+0x2e8>
 800039e:	4608      	mov	r0, r1
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d0e8      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a8:	e7e5      	b.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	f000 80ac 	beq.w	8000508 <__udivmoddi4+0x234>
 80003b0:	fab2 f682 	clz	r6, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	f040 80bb 	bne.w	8000530 <__udivmoddi4+0x25c>
 80003ba:	1a8b      	subs	r3, r1, r2
 80003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c0:	b2bc      	uxth	r4, r7
 80003c2:	2101      	movs	r1, #1
 80003c4:	0c02      	lsrs	r2, r0, #16
 80003c6:	b280      	uxth	r0, r0
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d4:	fb04 f20c 	mul.w	r2, r4, ip
 80003d8:	429a      	cmp	r2, r3
 80003da:	d90e      	bls.n	80003fa <__udivmoddi4+0x126>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80ec 	beq.w	80005d0 <__udivmoddi4+0x2fc>
 80003f8:	46c4      	mov	ip, r8
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000400:	fb0e 3318 	mls	r3, lr, r8, r3
 8000404:	fb04 f408 	mul.w	r4, r4, r8
 8000408:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800040c:	4294      	cmp	r4, r2
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x154>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295
 8000416:	bf2c      	ite	cs
 8000418:	2001      	movcs	r0, #1
 800041a:	2000      	movcc	r0, #0
 800041c:	4294      	cmp	r4, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x152>
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80d1 	beq.w	80005c8 <__udivmoddi4+0x2f4>
 8000426:	4698      	mov	r8, r3
 8000428:	1b12      	subs	r2, r2, r4
 800042a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa08 f401 	lsl.w	r4, r8, r1
 800043a:	fa00 f901 	lsl.w	r9, r0, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa28 f806 	lsr.w	r8, r8, r6
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f306 	lsr.w	r3, r0, r6
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fbb8 fef0 	udiv	lr, r8, r0
 800045c:	fb00 881e 	mls	r8, r0, lr, r8
 8000460:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000464:	fb0e f80c 	mul.w	r8, lr, ip
 8000468:	45a0      	cmp	r8, r4
 800046a:	d90e      	bls.n	800048a <__udivmoddi4+0x1b6>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000472:	bf2c      	ite	cs
 8000474:	f04f 0b01 	movcs.w	fp, #1
 8000478:	f04f 0b00 	movcc.w	fp, #0
 800047c:	45a0      	cmp	r8, r4
 800047e:	d903      	bls.n	8000488 <__udivmoddi4+0x1b4>
 8000480:	f1bb 0f00 	cmp.w	fp, #0
 8000484:	f000 80b8 	beq.w	80005f8 <__udivmoddi4+0x324>
 8000488:	46d6      	mov	lr, sl
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fa1f f883 	uxth.w	r8, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d90e      	bls.n	80004c4 <__udivmoddi4+0x1f0>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	bf2c      	ite	cs
 80004ae:	f04f 0801 	movcs.w	r8, #1
 80004b2:	f04f 0800 	movcc.w	r8, #0
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d903      	bls.n	80004c2 <__udivmoddi4+0x1ee>
 80004ba:	f1b8 0f00 	cmp.w	r8, #0
 80004be:	f000 809f 	beq.w	8000600 <__udivmoddi4+0x32c>
 80004c2:	4603      	mov	r3, r0
 80004c4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c8:	eba4 040c 	sub.w	r4, r4, ip
 80004cc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d0:	4564      	cmp	r4, ip
 80004d2:	4673      	mov	r3, lr
 80004d4:	46e0      	mov	r8, ip
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0x20a>
 80004d8:	d107      	bne.n	80004ea <__udivmoddi4+0x216>
 80004da:	45f1      	cmp	r9, lr
 80004dc:	d205      	bcs.n	80004ea <__udivmoddi4+0x216>
 80004de:	ebbe 0302 	subs.w	r3, lr, r2
 80004e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e6:	3801      	subs	r0, #1
 80004e8:	46e0      	mov	r8, ip
 80004ea:	b15d      	cbz	r5, 8000504 <__udivmoddi4+0x230>
 80004ec:	ebb9 0203 	subs.w	r2, r9, r3
 80004f0:	eb64 0408 	sbc.w	r4, r4, r8
 80004f4:	fa04 f606 	lsl.w	r6, r4, r6
 80004f8:	fa22 f301 	lsr.w	r3, r2, r1
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e736      	b.n	8000376 <__udivmoddi4+0xa2>
 8000508:	fbb1 fcf2 	udiv	ip, r1, r2
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4614      	mov	r4, r2
 8000510:	b280      	uxth	r0, r0
 8000512:	4696      	mov	lr, r2
 8000514:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000518:	2620      	movs	r6, #32
 800051a:	4690      	mov	r8, r2
 800051c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000520:	4610      	mov	r0, r2
 8000522:	fbb1 f1f2 	udiv	r1, r1, r2
 8000526:	eba3 0308 	sub.w	r3, r3, r8
 800052a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052e:	e74b      	b.n	80003c8 <__udivmoddi4+0xf4>
 8000530:	40b7      	lsls	r7, r6
 8000532:	f1c6 0320 	rsb	r3, r6, #32
 8000536:	fa01 f206 	lsl.w	r2, r1, r6
 800053a:	fa21 f803 	lsr.w	r8, r1, r3
 800053e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000542:	fa20 f303 	lsr.w	r3, r0, r3
 8000546:	b2bc      	uxth	r4, r7
 8000548:	40b0      	lsls	r0, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	0c02      	lsrs	r2, r0, #16
 800054e:	0c19      	lsrs	r1, r3, #16
 8000550:	b280      	uxth	r0, r0
 8000552:	fbb8 f9fe 	udiv	r9, r8, lr
 8000556:	fb0e 8819 	mls	r8, lr, r9, r8
 800055a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	4588      	cmp	r8, r1
 8000564:	d951      	bls.n	800060a <__udivmoddi4+0x336>
 8000566:	1879      	adds	r1, r7, r1
 8000568:	f109 3cff 	add.w	ip, r9, #4294967295
 800056c:	bf2c      	ite	cs
 800056e:	f04f 0a01 	movcs.w	sl, #1
 8000572:	f04f 0a00 	movcc.w	sl, #0
 8000576:	4588      	cmp	r8, r1
 8000578:	d902      	bls.n	8000580 <__udivmoddi4+0x2ac>
 800057a:	f1ba 0f00 	cmp.w	sl, #0
 800057e:	d031      	beq.n	80005e4 <__udivmoddi4+0x310>
 8000580:	eba1 0108 	sub.w	r1, r1, r8
 8000584:	fbb1 f9fe 	udiv	r9, r1, lr
 8000588:	fb09 f804 	mul.w	r8, r9, r4
 800058c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000590:	b29b      	uxth	r3, r3
 8000592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000596:	4543      	cmp	r3, r8
 8000598:	d235      	bcs.n	8000606 <__udivmoddi4+0x332>
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a0:	bf2c      	ite	cs
 80005a2:	f04f 0a01 	movcs.w	sl, #1
 80005a6:	f04f 0a00 	movcc.w	sl, #0
 80005aa:	4543      	cmp	r3, r8
 80005ac:	d2bb      	bcs.n	8000526 <__udivmoddi4+0x252>
 80005ae:	f1ba 0f00 	cmp.w	sl, #0
 80005b2:	d1b8      	bne.n	8000526 <__udivmoddi4+0x252>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e7b4      	b.n	8000526 <__udivmoddi4+0x252>
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb68 0203 	sbc.w	r2, r8, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	4696      	mov	lr, r2
 80005c6:	e6eb      	b.n	80003a0 <__udivmoddi4+0xcc>
 80005c8:	443a      	add	r2, r7
 80005ca:	f1a8 0802 	sub.w	r8, r8, #2
 80005ce:	e72b      	b.n	8000428 <__udivmoddi4+0x154>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	e710      	b.n	80003fa <__udivmoddi4+0x126>
 80005d8:	3902      	subs	r1, #2
 80005da:	443b      	add	r3, r7
 80005dc:	e6a9      	b.n	8000332 <__udivmoddi4+0x5e>
 80005de:	443a      	add	r2, r7
 80005e0:	3802      	subs	r0, #2
 80005e2:	e6be      	b.n	8000362 <__udivmoddi4+0x8e>
 80005e4:	eba7 0808 	sub.w	r8, r7, r8
 80005e8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005ec:	4441      	add	r1, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c9      	b.n	800058c <__udivmoddi4+0x2b8>
 80005f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005fc:	443c      	add	r4, r7
 80005fe:	e744      	b.n	800048a <__udivmoddi4+0x1b6>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e75e      	b.n	80004c4 <__udivmoddi4+0x1f0>
 8000606:	4649      	mov	r1, r9
 8000608:	e78d      	b.n	8000526 <__udivmoddi4+0x252>
 800060a:	eba1 0108 	sub.w	r1, r1, r8
 800060e:	46cc      	mov	ip, r9
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7b8      	b.n	800058c <__udivmoddi4+0x2b8>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 8000626:	af00      	add	r7, sp, #0
#ifdef READ_WRITE_SEQ_2
	char *spi_buf_2 = malloc(4 * sizeof(char));
#endif
	uint8_t uart_buf[257];
	uint8_t spi_buf[16];
	HAL_StatusTypeDef octo_spi_return = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 3326 	strb.w	r3, [r7, #806]	@ 0x326
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fdad 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f8af 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f997 	bl	8000968 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f949 	bl	80008d0 <MX_USART2_UART_Init>
  MX_OCTOSPI1_Init();
 800063e:	f000 f909 	bl	8000854 <MX_OCTOSPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_print(uart_buf, "Initializing\r\n", &huart2);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4a4a      	ldr	r2, [pc, #296]	@ (8000770 <main+0x150>)
 8000648:	494a      	ldr	r1, [pc, #296]	@ (8000774 <main+0x154>)
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f9e6 	bl	8000a1c <uart_print>

  if(hospi1.State == HAL_XSPI_STATE_READY){
 8000650:	4b49      	ldr	r3, [pc, #292]	@ (8000778 <main+0x158>)
 8000652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000654:	2b02      	cmp	r3, #2
 8000656:	d107      	bne.n	8000668 <main+0x48>
	  uart_print(uart_buf, "HAL OK\r\n", &huart2);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4a44      	ldr	r2, [pc, #272]	@ (8000770 <main+0x150>)
 800065e:	4947      	ldr	r1, [pc, #284]	@ (800077c <main+0x15c>)
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f9db 	bl	8000a1c <uart_print>
 8000666:	e006      	b.n	8000676 <main+0x56>
  }else{
	  uart_print(uart_buf, "HAL NOT OK\r\n", &huart2);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4a40      	ldr	r2, [pc, #256]	@ (8000770 <main+0x150>)
 800066e:	4944      	ldr	r1, [pc, #272]	@ (8000780 <main+0x160>)
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f9d3 	bl	8000a1c <uart_print>
  /*octo_spi_return = HAL_XSPI_Command(&hospi1, &spi_command, 60000);

  uart_print(uart_buf, "Cmd Init\r\n", &huart2);
  get_HAL_error(octo_spi_return, &huart2);*/

  strcpy((char *)spi_buf, "AAAAAAAAAAAAAAA");
 8000676:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800067a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800067e:	4a41      	ldr	r2, [pc, #260]	@ (8000784 <main+0x164>)
 8000680:	461c      	mov	r4, r3
 8000682:	4613      	mov	r3, r2
 8000684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  }*/
	  //dummy_buf = itoa(HAL_XSPI_GetState(&hospi1), (char *)dummy_buf, 1);
	  //uart_print(uart_buf, (char *)dummy_buf, &huart2);
	  //HAL_Delay(1000);
#ifdef WRITE_READ_SEQ_1
	  for(char write_character = 0x01; write_character < 256; write_character++){
 800068a:	2301      	movs	r3, #1
 800068c:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
	  fill_page_buffer_1(write_character, spi_write_buffer_1);
 8000690:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000694:	f897 3327 	ldrb.w	r3, [r7, #807]	@ 0x327
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fa1a 	bl	8000ad4 <fill_page_buffer_1>
	  uint32_t address = 0x001000;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
	  uart_print(uart_buf, "\r\nWrite\r\n", &huart2);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4a30      	ldr	r2, [pc, #192]	@ (8000770 <main+0x150>)
 80006ae:	4936      	ldr	r1, [pc, #216]	@ (8000788 <main+0x168>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f9b3 	bl	8000a1c <uart_print>
	  get_HAL_error(write_page(spi_write_buffer_1, &hospi1, address), &huart2);
 80006b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006ba:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 80006be:	492e      	ldr	r1, [pc, #184]	@ (8000778 <main+0x158>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 faaf 	bl	8000c24 <write_page>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4929      	ldr	r1, [pc, #164]	@ (8000770 <main+0x150>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f9c0 	bl	8000a50 <get_HAL_error>
	  HAL_Delay(2500);
 80006d0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80006d4:	f000 fe18 	bl	8001308 <HAL_Delay>
	  uart_print(uart_buf, "\r\nRead\r\n", &huart2);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <main+0x150>)
 80006de:	492b      	ldr	r1, [pc, #172]	@ (800078c <main+0x16c>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f99b 	bl	8000a1c <uart_print>
	  get_HAL_error(read_page(spi_read_buffer_1, &hospi1, address), &huart2);
 80006e6:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80006ea:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 80006ee:	4922      	ldr	r1, [pc, #136]	@ (8000778 <main+0x158>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fa59 	bl	8000ba8 <read_page>
 80006f6:	4603      	mov	r3, r0
 80006f8:	491d      	ldr	r1, [pc, #116]	@ (8000770 <main+0x150>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f9a8 	bl	8000a50 <get_HAL_error>
	  HAL_Delay(2500);
 8000700:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000704:	f000 fe00 	bl	8001308 <HAL_Delay>
	  uart_print(uart_buf, "\r\nErase\r\n", &huart2);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <main+0x150>)
 800070e:	4920      	ldr	r1, [pc, #128]	@ (8000790 <main+0x170>)
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f983 	bl	8000a1c <uart_print>
	  get_HAL_error(erase_sector(&hospi1, address), &huart2);
 8000716:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 800071a:	4817      	ldr	r0, [pc, #92]	@ (8000778 <main+0x158>)
 800071c:	f000 fae4 	bl	8000ce8 <erase_sector>
 8000720:	4603      	mov	r3, r0
 8000722:	4913      	ldr	r1, [pc, #76]	@ (8000770 <main+0x150>)
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f993 	bl	8000a50 <get_HAL_error>
	  HAL_Delay(2500);
 800072a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800072e:	f000 fdeb 	bl	8001308 <HAL_Delay>
	  uart_print(uart_buf, "\r\nRead\r\n", &huart2);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <main+0x150>)
 8000738:	4914      	ldr	r1, [pc, #80]	@ (800078c <main+0x16c>)
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f96e 	bl	8000a1c <uart_print>
	  get_HAL_error(read_page(spi_read_buffer_1, &hospi1, address), &huart2);
 8000740:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8000744:	f8d7 2320 	ldr.w	r2, [r7, #800]	@ 0x320
 8000748:	490b      	ldr	r1, [pc, #44]	@ (8000778 <main+0x158>)
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fa2c 	bl	8000ba8 <read_page>
 8000750:	4603      	mov	r3, r0
 8000752:	4907      	ldr	r1, [pc, #28]	@ (8000770 <main+0x150>)
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f97b 	bl	8000a50 <get_HAL_error>
	  HAL_Delay(2500);
 800075a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800075e:	f000 fdd3 	bl	8001308 <HAL_Delay>
	  for(char write_character = 0x01; write_character < 256; write_character++){
 8000762:	f897 3327 	ldrb.w	r3, [r7, #807]	@ 0x327
 8000766:	3301      	adds	r3, #1
 8000768:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
 800076c:	bf00      	nop
 800076e:	e78f      	b.n	8000690 <main+0x70>
 8000770:	20000084 	.word	0x20000084
 8000774:	080071d4 	.word	0x080071d4
 8000778:	20000028 	.word	0x20000028
 800077c:	080071e4 	.word	0x080071e4
 8000780:	080071f0 	.word	0x080071f0
 8000784:	08007200 	.word	0x08007200
 8000788:	08007210 	.word	0x08007210
 800078c:	0800721c 	.word	0x0800721c
 8000790:	08007228 	.word	0x08007228

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	@ 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2250      	movs	r2, #80	@ 0x50
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 fcd6 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ba:	4b24      	ldr	r3, [pc, #144]	@ (800084c <SystemClock_Config+0xb8>)
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	4a23      	ldr	r2, [pc, #140]	@ (800084c <SystemClock_Config+0xb8>)
 80007c0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007c4:	6113      	str	r3, [r2, #16]
 80007c6:	4b21      	ldr	r3, [pc, #132]	@ (800084c <SystemClock_Config+0xb8>)
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d2:	bf00      	nop
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <SystemClock_Config+0xb8>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f003 0308 	and.w	r3, r3, #8
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d1f9      	bne.n	80007d4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80007e8:	2308      	movs	r3, #8
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	2340      	movs	r3, #64	@ 0x40
 80007ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 f883 	bl	8001904 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000804:	f000 f904 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	231f      	movs	r3, #31
 800080a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2101      	movs	r1, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fca4 	bl	8002174 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000832:	f000 f8ed 	bl	8000a10 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <SystemClock_Config+0xbc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a05      	ldr	r2, [pc, #20]	@ (8000850 <SystemClock_Config+0xbc>)
 800083c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	3770      	adds	r7, #112	@ 0x70
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	44020800 	.word	0x44020800
 8000850:	40022000 	.word	0x40022000

08000854 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <MX_OCTOSPI1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 31;
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 8000860:	221f      	movs	r2, #31
 8000862:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 800086c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000870:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_64MB;
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 8000874:	2216      	movs	r2, #22
 8000876:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 800087a:	2201      	movs	r2, #1
 800087c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000884:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000890:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 8000892:	2202      	movs	r2, #2
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_128MB;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 80008a4:	2218      	movs	r2, #24
 80008a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_OCTOSPI1_Init+0x74>)
 80008b6:	f005 ffe1 	bl	800687c <HAL_XSPI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f8a6 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000028 	.word	0x20000028
 80008cc:	47001400 	.word	0x47001400

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 800091a:	f005 f9f1 	bl	8005d00 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f874 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 800092c:	f005 fedc 	bl	80066e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f86b 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 800093e:	f005 ff11 	bl	8006764 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f862 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART2_UART_Init+0x90>)
 800094e:	f005 fe92 	bl	8006676 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f85a 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000084 	.word	0x20000084
 8000964:	40004400 	.word	0x40004400

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000984:	4a20      	ldr	r2, [pc, #128]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a2:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c0:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0xa0>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <MX_GPIO_Init+0xa4>)
 80009de:	f000 ff79 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009e2:	2320      	movs	r3, #32
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_GPIO_Init+0xa4>)
 80009fa:	f000 fe0d 	bl	8001618 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	44020c00 	.word	0x44020c00
 8000a0c:	42020000 	.word	0x42020000

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <uart_print>:

#include "my_hal.h"



void uart_print(uint8_t *buf, char *text, UART_HandleTypeDef * husart){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	strcpy((char*)buf, text);
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f006 fbbe 	bl	80071ac <strcpy>
	HAL_UART_Transmit(husart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff fc2f 	bl	8000294 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	68f9      	ldr	r1, [r7, #12]
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f005 f9ad 	bl	8005da0 <HAL_UART_Transmit>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <get_HAL_error>:


void get_HAL_error(HAL_StatusTypeDef return_value, UART_HandleTypeDef * husart){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
#ifdef HUART_DEBUG
	uint8_t buf[16];
	 switch(return_value){
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d82b      	bhi.n	8000aba <get_HAL_error+0x6a>
 8000a62:	a201      	add	r2, pc, #4	@ (adr r2, 8000a68 <get_HAL_error+0x18>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000a89 	.word	0x08000a89
 8000a70:	08000aa9 	.word	0x08000aa9
 8000a74:	08000a99 	.word	0x08000a99
		  case HAL_OK:
			  uart_print(buf, "HAL_OK\r\n", husart);
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	4911      	ldr	r1, [pc, #68]	@ (8000ac4 <get_HAL_error+0x74>)
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ffcb 	bl	8000a1c <uart_print>
			  break;
 8000a86:	e017      	b.n	8000ab8 <get_HAL_error+0x68>
		  case HAL_ERROR:
			  uart_print(buf, "HAL ERROR\r\n", husart);
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	490e      	ldr	r1, [pc, #56]	@ (8000ac8 <get_HAL_error+0x78>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffc3 	bl	8000a1c <uart_print>
			  break;
 8000a96:	e00f      	b.n	8000ab8 <get_HAL_error+0x68>
		  case HAL_TIMEOUT:
			  uart_print(buf, "HAL TIMEOUT\r\n", husart);
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	490b      	ldr	r1, [pc, #44]	@ (8000acc <get_HAL_error+0x7c>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ffbb 	bl	8000a1c <uart_print>
			  break;
 8000aa6:	e007      	b.n	8000ab8 <get_HAL_error+0x68>
		  case HAL_BUSY:
			  uart_print(buf, "HAL BUSY\r\n", husart);
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	4908      	ldr	r1, [pc, #32]	@ (8000ad0 <get_HAL_error+0x80>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffb3 	bl	8000a1c <uart_print>
			  break;
 8000ab6:	bf00      	nop
	 			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 			HAL_Delay(500);
	 		}
	 	}
#endif
	 return;
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
}
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	08007234 	.word	0x08007234
 8000ac8:	08007240 	.word	0x08007240
 8000acc:	0800724c 	.word	0x0800724c
 8000ad0:	0800725c 	.word	0x0800725c

08000ad4 <fill_page_buffer_1>:

void fill_page_buffer_1(char character, char *buffer){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < PAGE_SIZE; i++){
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	e007      	b.n	8000af6 <fill_page_buffer_1+0x22>
		buffer[i] = character;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	79fa      	ldrb	r2, [r7, #7]
 8000aee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < PAGE_SIZE; i++){
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2bff      	cmp	r3, #255	@ 0xff
 8000afa:	ddf4      	ble.n	8000ae6 <fill_page_buffer_1+0x12>
	}
	buffer[256] = '\0';
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	return;
 8000b06:	bf00      	nop
}
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <set_spi_command>:
#include "my_spi.h"
#include "stm32h5xx_hal_xspi.h"

void set_spi_command(XSPI_RegularCmdTypeDef *command_struct, uint32_t instruction, uint32_t instruction_length, //
		uint32_t instruction_wires, uint32_t address, uint32_t address_wires, //
		uint32_t data_wires, uint32_t data_length, uint32_t dummy_cycles){
 8000b12:	b480      	push	{r7}
 8000b14:	b085      	sub	sp, #20
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	603b      	str	r3, [r7, #0]
	command_struct->OperationType         = HAL_XSPI_OPTYPE_COMMON_CFG; 		// Constant.
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
	command_struct->IOSelect 		      = HAL_XSPI_SELECT_IO_3_0;				// Constant. Always the same pins
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
	command_struct->Instruction	          = instruction;						// Not constant.
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	609a      	str	r2, [r3, #8]
	// Use defined instructions
	command_struct->InstructionMode	      = instruction_wires;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	60da      	str	r2, [r3, #12]
	// Not constant. Number of wires for transferring instructions.
	command_struct->InstructionWidth 	  = instruction_length;		// Constant - always 1 byte
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	611a      	str	r2, [r3, #16]
	command_struct->InstructionDTRMode    = HAL_XSPI_INSTRUCTION_DTR_DISABLE;	// Constant - DTR = Double transfer rate
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
	command_struct->Address 			  = address;							// Not constant
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	619a      	str	r2, [r3, #24]
	// Between 0x00 and 0xFFFFFFFF.
	command_struct->AddressMode           = address_wires;						// Not constant
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	69fa      	ldr	r2, [r7, #28]
 8000b4e:	61da      	str	r2, [r3, #28]
	// Number of wires for sending the address.
	command_struct->AddressWidth          = HAL_XSPI_ADDRESS_24_BITS;		// constant
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	621a      	str	r2, [r3, #32]
	command_struct->AddressDTRMode        = HAL_XSPI_ADDRESS_DTR_DISABLE;		// Constant - IDK
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	command_struct->AlternateBytes        = 0x00;							    // I don't what alternate bytes are but it isn't used in the flash
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
	command_struct->AlternateBytesMode    = HAL_XSPI_ALT_BYTES_NONE;			// ---
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
	command_struct->AlternateBytesWidth   = HAL_XSPI_ALT_BYTES_32_BITS;			// ---
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b70:	631a      	str	r2, [r3, #48]	@ 0x30
	command_struct->AlternateBytesDTRMode = HAL_XSPI_ALT_BYTES_DTR_DISABLE;		// ---
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2200      	movs	r2, #0
 8000b76:	635a      	str	r2, [r3, #52]	@ 0x34
	command_struct->DataMode 			  = data_wires;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6a3a      	ldr	r2, [r7, #32]
 8000b7c:	639a      	str	r2, [r3, #56]	@ 0x38
	// Number of wires for sending and receiving data.
	command_struct->DataLength 		      = data_length;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b82:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Length in bytes
	command_struct->DataDTRMode 		  = HAL_XSPI_DATA_DTR_DISABLE;			// Constant
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	641a      	str	r2, [r3, #64]	@ 0x40
	command_struct->DummyCycles 		  = dummy_cycles;						// Not constant
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b8e:	645a      	str	r2, [r3, #68]	@ 0x44
	// Enter number of dummy cycles.
	command_struct->DQSMode 			  = HAL_XSPI_DQS_DISABLE;				// Constant - IDK
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	649a      	str	r2, [r3, #72]	@ 0x48
	command_struct->SIOOMode 			  = HAL_XSPI_SIOO_INST_EVERY_CMD;		// Constant - IDK
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <read_page>:
	read_buffer[1] = '\0';
	return octo_spi_return;
}

// Read page
HAL_StatusTypeDef read_page(char *read_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0a0      	sub	sp, #128	@ 0x80
 8000bac:	af06      	add	r7, sp, #24
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	//Set spi command
	set_spi_command(&spi_command, MY_READ, INST_LEN_1_BYTE, INST_1_WIRE, address, ADDR_1_WIRE, DATA_1_WIRE, 31, DUMMY_0);
 8000bb4:	f107 0014 	add.w	r0, r7, #20
 8000bb8:	2300      	movs	r3, #0
 8000bba:	9304      	str	r3, [sp, #16]
 8000bbc:	231f      	movs	r3, #31
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	f7ff ff9c 	bl	8000b12 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000be2:	4619      	mov	r1, r3
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f005 ff21 	bl	8006a2c <HAL_XSPI_Command>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(octo_spi_return != HAL_OK){
 8000bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <read_page+0x56>
			return octo_spi_return;
 8000bf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bfc:	e00e      	b.n	8000c1c <read_page+0x74>
	}
	octo_spi_return = HAL_XSPI_Receive(octo_spi_handle, (uint8_t *) read_buffer, ONE_MINUTE);
 8000bfe:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000c02:	68f9      	ldr	r1, [r7, #12]
 8000c04:	68b8      	ldr	r0, [r7, #8]
 8000c06:	f006 f814 	bl	8006c32 <HAL_XSPI_Receive>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	read_buffer[31] = '\0';
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	331f      	adds	r3, #31
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	return octo_spi_return;
 8000c18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3768      	adds	r7, #104	@ 0x68
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <write_page>:

// Write page
HAL_StatusTypeDef write_page(char *write_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0a0      	sub	sp, #128	@ 0x80
 8000c28:	af06      	add	r7, sp, #24
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	//Set spi command - Write enable
	set_spi_command(&spi_command, MY_WREN, INST_LEN_1_BYTE, INST_1_WIRE, ADDR_NONE, 0, DATA_NONE, 0, DUMMY_0);
 8000c30:	f107 0014 	add.w	r0, r7, #20
 8000c34:	2300      	movs	r3, #0
 8000c36:	9304      	str	r3, [sp, #16]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	9303      	str	r3, [sp, #12]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9302      	str	r3, [sp, #8]
 8000c40:	2300      	movs	r3, #0
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	2300      	movs	r3, #0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2106      	movs	r1, #6
 8000c4e:	f7ff ff60 	bl	8000b12 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f005 fee5 	bl	8006a2c <HAL_XSPI_Command>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	//octo_spi_handle.Instance->CR |= XSPI_CR_START;
	if(octo_spi_return != HAL_OK){
 8000c68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <write_page+0x52>
			return octo_spi_return;
 8000c70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c74:	e034      	b.n	8000ce0 <write_page+0xbc>
	}
	HAL_Delay(2500);
 8000c76:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000c7a:	f000 fb45 	bl	8001308 <HAL_Delay>

	set_spi_command(&spi_command, MY_PP, INST_LEN_1_BYTE, INST_1_WIRE, address, ADDR_1_WIRE, DATA_1_WIRE, PAGE_SIZE, DUMMY_0);
 8000c7e:	f107 0014 	add.w	r0, r7, #20
 8000c82:	2300      	movs	r3, #0
 8000c84:	9304      	str	r3, [sp, #16]
 8000c86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8a:	9303      	str	r3, [sp, #12]
 8000c8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c90:	9302      	str	r3, [sp, #8]
 8000c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	f7ff ff36 	bl	8000b12 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68b8      	ldr	r0, [r7, #8]
 8000cb2:	f005 febb 	bl	8006a2c <HAL_XSPI_Command>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(octo_spi_return != HAL_OK){
 8000cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <write_page+0xa6>
			return octo_spi_return;
 8000cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cc8:	e00a      	b.n	8000ce0 <write_page+0xbc>
	}

	octo_spi_return = HAL_XSPI_Transmit(octo_spi_handle, (uint8_t *) write_buffer, ONE_MINUTE);
 8000cca:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	68b8      	ldr	r0, [r7, #8]
 8000cd2:	f005 ff3b 	bl	8006b4c <HAL_XSPI_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	return octo_spi_return;
 8000cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3768      	adds	r7, #104	@ 0x68
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <erase_sector>:


// Erase page
HAL_StatusTypeDef erase_sector(XSPI_HandleTypeDef *octo_spi_handle, uint32_t address){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09e      	sub	sp, #120	@ 0x78
 8000cec:	af06      	add	r7, sp, #24
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	char *empty_buffer = "";
 8000cf2:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <erase_sector+0xa4>)
 8000cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;

	set_spi_command(&spi_command, MY_WREN, INST_LEN_1_BYTE, INST_1_WIRE, ADDR_NONE, 0, DATA_NONE, 0, DUMMY_0);
 8000cf6:	f107 0008 	add.w	r0, r7, #8
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9304      	str	r3, [sp, #16]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9303      	str	r3, [sp, #12]
 8000d02:	2300      	movs	r3, #0
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	2300      	movs	r3, #0
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	2200      	movs	r2, #0
 8000d12:	2106      	movs	r1, #6
 8000d14:	f7ff fefd 	bl	8000b12 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d20:	4619      	mov	r1, r3
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f005 fe82 	bl	8006a2c <HAL_XSPI_Command>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	//octo_spi_handle.Instance->CR |= XSPI_CR_START;
	if(octo_spi_return != HAL_OK){
 8000d2e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <erase_sector+0x54>
			return octo_spi_return;
 8000d36:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d3a:	e022      	b.n	8000d82 <erase_sector+0x9a>
	}
	HAL_Delay(2500);
 8000d3c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000d40:	f000 fae2 	bl	8001308 <HAL_Delay>
	set_spi_command(&spi_command, MY_SE, INST_LEN_1_BYTE, INST_1_WIRE, address, ADDR_1_WIRE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000d44:	f107 0008 	add.w	r0, r7, #8
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9304      	str	r3, [sp, #16]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	9303      	str	r3, [sp, #12]
 8000d50:	2300      	movs	r3, #0
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	2200      	movs	r2, #0
 8000d62:	2120      	movs	r1, #32
 8000d64:	f7ff fed5 	bl	8000b12 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f005 fe5a 	bl	8006a2c <HAL_XSPI_Command>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		return octo_spi_return;
 8000d7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3760      	adds	r7, #96	@ 0x60
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08007268 	.word	0x08007268

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0c0      	sub	sp, #256	@ 0x100
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	22d0      	movs	r2, #208	@ 0xd0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 f9c7 	bl	8007154 <memset>
  if(hxspi->Instance==OCTOSPI1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a4c      	ldr	r2, [pc, #304]	@ (8000efc <HAL_XSPI_MspInit+0x15c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	f040 8090 	bne.w	8000ef2 <HAL_XSPI_MspInit+0x152>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	f04f 0302 	mov.w	r3, #2
 8000dda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_HCLK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fd05 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_XSPI_MspInit+0x58>
    {
      Error_Handler();
 8000df4:	f7ff fe0c 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000df8:	4b41      	ldr	r3, [pc, #260]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dfe:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000e08:	4b3d      	ldr	r3, [pc, #244]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e1c:	4a38      	ldr	r2, [pc, #224]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e26:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b32      	ldr	r3, [pc, #200]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e3a:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e44:	4b2e      	ldr	r3, [pc, #184]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e58:	4a29      	ldr	r2, [pc, #164]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <HAL_XSPI_MspInit+0x160>)
 8000e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> OCTOSPI1_IO3
    PB2     ------> OCTOSPI1_CLK
    PB10     ------> OCTOSPI1_NCS
    PC10     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8000e70:	f240 430c 	movw	r3, #1036	@ 0x40c
 8000e74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000e8a:	2309      	movs	r3, #9
 8000e8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e94:	4619      	mov	r1, r3
 8000e96:	481b      	ldr	r0, [pc, #108]	@ (8000f04 <HAL_XSPI_MspInit+0x164>)
 8000e98:	f000 fbbe 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000eb4:	2309      	movs	r3, #9
 8000eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <HAL_XSPI_MspInit+0x168>)
 8000ec2:	f000 fba9 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000ec6:	f240 4304 	movw	r3, #1028	@ 0x404
 8000eca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000ee0:	2309      	movs	r3, #9
 8000ee2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000eea:	4619      	mov	r1, r3
 8000eec:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <HAL_XSPI_MspInit+0x16c>)
 8000eee:	f000 fb93 	bl	8001618 <HAL_GPIO_Init>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8000ef2:	bf00      	nop
 8000ef4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	47001400 	.word	0x47001400
 8000f00:	44020c00 	.word	0x44020c00
 8000f04:	42020800 	.word	0x42020800
 8000f08:	42020000 	.word	0x42020000
 8000f0c:	42020400 	.word	0x42020400

08000f10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 f90f 	bl	8007154 <memset>
  if(huart->Instance==USART2)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <HAL_UART_MspInit+0xc4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d144      	bne.n	8000fca <HAL_UART_MspInit+0xba>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f40:	f04f 0202 	mov.w	r2, #2
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fc4f 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000f60:	f7ff fd56 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f64:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f88:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <HAL_UART_MspInit+0xcc>)
 8000fc6:	f000 fb27 	bl	8001618 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	37f8      	adds	r7, #248	@ 0xf8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	44020c00 	.word	0x44020c00
 8000fdc:	42020000 	.word	0x42020000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 f947 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001046:	4b35      	ldr	r3, [pc, #212]	@ (800111c <SystemInit+0xdc>)
 8001048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104c:	4a33      	ldr	r2, [pc, #204]	@ (800111c <SystemInit+0xdc>)
 800104e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001052:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001056:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <SystemInit+0xe0>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800105c:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <SystemInit+0xe0>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001062:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <SystemInit+0xe0>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <SystemInit+0xe0>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	492c      	ldr	r1, [pc, #176]	@ (8001120 <SystemInit+0xe0>)
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <SystemInit+0xe4>)
 8001070:	4013      	ands	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <SystemInit+0xe0>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800107a:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <SystemInit+0xe0>)
 800107c:	2200      	movs	r2, #0
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <SystemInit+0xe0>)
 8001082:	2200      	movs	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <SystemInit+0xe0>)
 8001088:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <SystemInit+0xe8>)
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800108c:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <SystemInit+0xe0>)
 800108e:	2200      	movs	r2, #0
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001092:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <SystemInit+0xe0>)
 8001094:	4a24      	ldr	r2, [pc, #144]	@ (8001128 <SystemInit+0xe8>)
 8001096:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <SystemInit+0xe0>)
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <SystemInit+0xe0>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <SystemInit+0xe8>)
 80010a2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <SystemInit+0xe0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <SystemInit+0xe0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <SystemInit+0xe0>)
 80010b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <SystemInit+0xe0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <SystemInit+0xdc>)
 80010be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <SystemInit+0xec>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80010cc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80010d4:	d003      	beq.n	80010de <SystemInit+0x9e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80010dc:	d117      	bne.n	800110e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <SystemInit+0xec>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <SystemInit+0xec>)
 80010ec:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <SystemInit+0xf0>)
 80010ee:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <SystemInit+0xec>)
 80010f2:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <SystemInit+0xf4>)
 80010f4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <SystemInit+0xec>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <SystemInit+0xec>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <SystemInit+0xec>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <SystemInit+0xec>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	61d3      	str	r3, [r2, #28]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	44020c00 	.word	0x44020c00
 8001124:	eae2eae3 	.word	0xeae2eae3
 8001128:	01010280 	.word	0x01010280
 800112c:	40022000 	.word	0x40022000
 8001130:	08192a3b 	.word	0x08192a3b
 8001134:	4c5d6e7f 	.word	0x4c5d6e7f

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f7ff ff80 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001166:	f005 fffd 	bl	8007164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff fa59 	bl	8000620 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800117c:	080072bc 	.word	0x080072bc
  ldr r2, =_sbss
 8001180:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001184:	2000011c 	.word	0x2000011c

08001188 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_IRQHandler>
	...

0800118c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f96c 	bl	800146e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001196:	f001 f9a5 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_Init+0x44>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	490b      	ldr	r1, [pc, #44]	@ (80011d4 <HAL_Init+0x48>)
 80011a6:	5ccb      	ldrb	r3, [r1, r3]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_Init+0x4c>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011b0:	2004      	movs	r0, #4
 80011b2:	f000 f9a3 	bl	80014fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f810 	bl	80011dc <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e002      	b.n	80011cc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fde3 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	44020c00 	.word	0x44020c00
 80011d4:	0800726c 	.word	0x0800726c
 80011d8:	20000000 	.word	0x20000000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011e8:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <HAL_InitTick+0xdc>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e05c      	b.n	80012ae <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011f4:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <HAL_InitTick+0xe0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d10c      	bne.n	800121a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001200:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <HAL_InitTick+0xe4>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e037      	b.n	800128a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800121a:	f000 f9c7 	bl	80015ac <HAL_SYSTICK_GetCLKSourceConfig>
 800121e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d023      	beq.n	800126e <HAL_InitTick+0x92>
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d82d      	bhi.n	8001288 <HAL_InitTick+0xac>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_InitTick+0x5e>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d00d      	beq.n	8001254 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001238:	e026      	b.n	8001288 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800123a:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <HAL_InitTick+0xe4>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001248:	fbb3 f3f1 	udiv	r3, r3, r1
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001250:	60fb      	str	r3, [r7, #12]
        break;
 8001252:	e01a      	b.n	800128a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001262:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	60fb      	str	r3, [r7, #12]
        break;
 800126c:	e00d      	b.n	800128a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0xdc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001278:	fbb3 f3f2 	udiv	r3, r3, r2
 800127c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	60fb      	str	r3, [r7, #12]
        break;
 8001286:	e000      	b.n	800128a <HAL_InitTick+0xae>
        break;
 8001288:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f914 	bl	80014b8 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e009      	b.n	80012ae <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129a:	2200      	movs	r2, #0
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f04f 30ff 	mov.w	r0, #4294967295
 80012a2:	f000 f8ef 	bl	8001484 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80012a6:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <HAL_InitTick+0xe8>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	e000e010 	.word	0xe000e010
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000118 	.word	0x20000118

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000118 	.word	0x20000118

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff6a 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001492:	f7ff ff81 	bl	8001398 <__NVIC_GetPriorityGrouping>
 8001496:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff ffb3 	bl	8001408 <NVIC_EncodePriority>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff82 	bl	80013b4 <__NVIC_SetPriority>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c8:	d301      	bcc.n	80014ce <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00d      	b.n	80014ea <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_SYSTICK_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_SYSTICK_Config+0x40>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_SYSTICK_Config+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <HAL_SYSTICK_Config+0x40>)
 80014e2:	f043 0303 	orr.w	r3, r3, #3
 80014e6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d844      	bhi.n	8001594 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800150a:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001533 	.word	0x08001533
 8001514:	08001551 	.word	0x08001551
 8001518:	08001573 	.word	0x08001573
 800151c:	08001595 	.word	0x08001595
 8001520:	08001525 	.word	0x08001525
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6013      	str	r3, [r2, #0]
      break;
 8001530:	e031      	b.n	8001596 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001544:	4a18      	ldr	r2, [pc, #96]	@ (80015a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001546:	f023 030c 	bic.w	r3, r3, #12
 800154a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800154e:	e022      	b.n	8001596 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800155e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001562:	f023 030c 	bic.w	r3, r3, #12
 8001566:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001570:	e011      	b.n	8001596 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001578:	f023 0304 	bic.w	r3, r3, #4
 800157c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001580:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001584:	f023 030c 	bic.w	r3, r3, #12
 8001588:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001592:	e000      	b.n	8001596 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001594:	bf00      	nop
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010
 80015a8:	44020c00 	.word	0x44020c00

080015ac <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80015be:	2304      	movs	r3, #4
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e01e      	b.n	8001602 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80015c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d00f      	beq.n	80015f6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d80f      	bhi.n	80015fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d003      	beq.n	80015f0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80015e8:	e008      	b.n	80015fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
        break;
 80015ee:	e008      	b.n	8001602 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80015f0:	2301      	movs	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
        break;
 80015f4:	e005      	b.n	8001602 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80015f6:	2302      	movs	r3, #2
 80015f8:	607b      	str	r3, [r7, #4]
        break;
 80015fa:	e002      	b.n	8001602 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
        break;
 8001600:	bf00      	nop
    }
  }
  return systick_source;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e010 	.word	0xe000e010
 8001614:	44020c00 	.word	0x44020c00

08001618 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001626:	e142      	b.n	80018ae <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8134 	beq.w	80018a8 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x38>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b12      	cmp	r3, #18
 800164e:	d125      	bne.n	800169c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f003 020f 	and.w	r2, r3, #15
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4313      	orrs	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	6979      	ldr	r1, [r7, #20]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4013      	ands	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00b      	beq.n	80016f0 <HAL_GPIO_Init+0xd8>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e4:	2b11      	cmp	r3, #17
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b12      	cmp	r3, #18
 80016ee:	d130      	bne.n	8001752 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4313      	orrs	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001726:	2201      	movs	r2, #1
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4013      	ands	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	f003 0201 	and.w	r2, r3, #1
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b03      	cmp	r3, #3
 800175c:	d109      	bne.n	8001772 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001766:	2b03      	cmp	r3, #3
 8001768:	d11b      	bne.n	80017a2 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d017      	beq.n	80017a2 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4013      	ands	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d07c      	beq.n	80018a8 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80017ae:	4a47      	ldr	r2, [pc, #284]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3318      	adds	r3, #24
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4013      	ands	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	0a9a      	lsrs	r2, r3, #10
 80017d6:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <HAL_GPIO_Init+0x2b8>)
 80017d8:	4013      	ands	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	4093      	lsls	r3, r2
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017ea:	4938      	ldr	r1, [pc, #224]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3318      	adds	r3, #24
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80017f8:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43db      	mvns	r3, r3
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800181c:	4a2b      	ldr	r2, [pc, #172]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001822:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4013      	ands	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001846:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800184c:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 800184e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001852:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	4013      	ands	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001872:	4a16      	ldr	r2, [pc, #88]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 800187c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001880:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4013      	ands	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_GPIO_Init+0x2b4>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	3301      	adds	r3, #1
 80018ac:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f aeb5 	bne.w	8001628 <HAL_GPIO_Init+0x10>
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	44022000 	.word	0x44022000
 80018d0:	002f7f7f 	.word	0x002f7f7f

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f000 bc28 	b.w	8002168 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001918:	4b94      	ldr	r3, [pc, #592]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	f003 0318 	and.w	r3, r3, #24
 8001920:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001922:	4b92      	ldr	r3, [pc, #584]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	d05b      	beq.n	80019f0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b08      	cmp	r3, #8
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x46>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b18      	cmp	r3, #24
 8001942:	d114      	bne.n	800196e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d111      	bne.n	800196e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f000 bc08 	b.w	8002168 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001958:	4b84      	ldr	r3, [pc, #528]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	4981      	ldr	r1, [pc, #516]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001968:	4313      	orrs	r3, r2
 800196a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800196c:	e040      	b.n	80019f0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d023      	beq.n	80019be <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001976:	4b7d      	ldr	r3, [pc, #500]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff fcb5 	bl	80012f0 <HAL_GetTick>
 8001986:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800198a:	f7ff fcb1 	bl	80012f0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e3e5      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800199c:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80019a8:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	496d      	ldr	r1, [pc, #436]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	618b      	str	r3, [r1, #24]
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019be:	4b6b      	ldr	r3, [pc, #428]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6a      	ldr	r2, [pc, #424]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 80019c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fc91 	bl	80012f0 <HAL_GetTick>
 80019ce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80019d2:	f7ff fc8d 	bl	80012f0 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e3c1      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019e4:	4b61      	ldr	r3, [pc, #388]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a0 	beq.w	8001b3e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b18      	cmp	r3, #24
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f040 8092 	bne.w	8001b3e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e3a4      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x132>
 8001a28:	4b50      	ldr	r3, [pc, #320]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e058      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x160>
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a4a      	ldr	r2, [pc, #296]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b48      	ldr	r3, [pc, #288]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a47      	ldr	r2, [pc, #284]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e041      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_OscConfig+0x190>
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3e      	ldr	r2, [pc, #248]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b39      	ldr	r3, [pc, #228]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a38      	ldr	r2, [pc, #224]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e029      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001a9c:	d112      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x1c0>
 8001a9e:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a32      	ldr	r2, [pc, #200]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b30      	ldr	r3, [pc, #192]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a2f      	ldr	r2, [pc, #188]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001ab0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2c      	ldr	r2, [pc, #176]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e011      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
 8001ac4:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a28      	ldr	r2, [pc, #160]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001ae2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fbfe 	bl	80012f0 <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fbfa 	bl	80012f0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	@ 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e32e      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1f4>
 8001b16:	e012      	b.n	8001b3e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fbea 	bl	80012f0 <HAL_GetTick>
 8001b1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fbe6 	bl	80012f0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	@ 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e31a      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_RCC_OscConfig+0x268>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 809a 	beq.w	8001c80 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x25a>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b18      	cmp	r3, #24
 8001b56:	d149      	bne.n	8001bec <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d146      	bne.n	8001bec <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d104      	bne.n	8001b70 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e2fe      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
 8001b6a:	bf00      	nop
 8001b6c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001b76:	4b9a      	ldr	r3, [pc, #616]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0218 	and.w	r2, r3, #24
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d014      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001b86:	4b96      	ldr	r3, [pc, #600]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0218 	bic.w	r2, r3, #24
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	4993      	ldr	r1, [pc, #588]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001b98:	f000 fdd0 	bl	800273c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b9c:	4b91      	ldr	r3, [pc, #580]	@ (8001de4 <HAL_RCC_OscConfig+0x4e0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fb1b 	bl	80011dc <HAL_InitTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e2db      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fb9e 	bl	80012f0 <HAL_GetTick>
 8001bb4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fb9a 	bl	80012f0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e2ce      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bca:	4b85      	ldr	r3, [pc, #532]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001bd6:	4b82      	ldr	r3, [pc, #520]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	497e      	ldr	r1, [pc, #504]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001bea:	e049      	b.n	8001c80 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d02c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001bf4:	4b7a      	ldr	r3, [pc, #488]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 0218 	bic.w	r2, r3, #24
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	4977      	ldr	r1, [pc, #476]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001c06:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb6d 	bl	80012f0 <HAL_GetTick>
 8001c16:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb69 	bl	80012f0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e29d      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001c38:	4b69      	ldr	r3, [pc, #420]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	4966      	ldr	r1, [pc, #408]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	610b      	str	r3, [r1, #16]
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b64      	ldr	r3, [pc, #400]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a63      	ldr	r2, [pc, #396]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb49 	bl	80012f0 <HAL_GetTick>
 8001c5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fb45 	bl	80012f0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e279      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c74:	4b5a      	ldr	r3, [pc, #360]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01c      	beq.n	8001cce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c94:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c9a:	4a51      	ldr	r2, [pc, #324]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001c9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ca0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fb24 	bl	80012f0 <HAL_GetTick>
 8001ca8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cac:	f7ff fb20 	bl	80012f0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e254      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001cbe:	4b48      	ldr	r3, [pc, #288]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ef      	beq.n	8001cac <HAL_RCC_OscConfig+0x3a8>
 8001ccc:	e01b      	b.n	8001d06 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cce:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd4:	4a42      	ldr	r2, [pc, #264]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001cd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001cda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff fb07 	bl	80012f0 <HAL_GetTick>
 8001ce2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fb03 	bl	80012f0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e237      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cf8:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ef      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80d2 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d14:	4b34      	ldr	r3, [pc, #208]	@ (8001de8 <HAL_RCC_OscConfig+0x4e4>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d118      	bne.n	8001d52 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001d20:	4b31      	ldr	r3, [pc, #196]	@ (8001de8 <HAL_RCC_OscConfig+0x4e4>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	4a30      	ldr	r2, [pc, #192]	@ (8001de8 <HAL_RCC_OscConfig+0x4e4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fae0 	bl	80012f0 <HAL_GetTick>
 8001d30:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d34:	f7ff fadc 	bl	80012f0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e210      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d46:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <HAL_RCC_OscConfig+0x4e4>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_OscConfig+0x468>
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d60:	4a1f      	ldr	r2, [pc, #124]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d6a:	e074      	b.n	8001e56 <HAL_RCC_OscConfig+0x552>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d118      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4a2>
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d7a:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d8a:	4a15      	ldr	r2, [pc, #84]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d9a:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001da4:	e057      	b.n	8001e56 <HAL_RCC_OscConfig+0x552>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d11e      	bne.n	8001dec <HAL_RCC_OscConfig+0x4e8>
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dce:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dd4:	4a02      	ldr	r2, [pc, #8]	@ (8001de0 <HAL_RCC_OscConfig+0x4dc>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dde:	e03a      	b.n	8001e56 <HAL_RCC_OscConfig+0x552>
 8001de0:	44020c00 	.word	0x44020c00
 8001de4:	20000004 	.word	0x20000004
 8001de8:	44020800 	.word	0x44020800
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b85      	cmp	r3, #133	@ 0x85
 8001df2:	d118      	bne.n	8001e26 <HAL_RCC_OscConfig+0x522>
 8001df4:	4ba2      	ldr	r3, [pc, #648]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dfa:	4aa1      	ldr	r2, [pc, #644]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e04:	4b9e      	ldr	r3, [pc, #632]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e0a:	4a9d      	ldr	r2, [pc, #628]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e14:	4b9a      	ldr	r3, [pc, #616]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e1a:	4a99      	ldr	r2, [pc, #612]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e24:	e017      	b.n	8001e56 <HAL_RCC_OscConfig+0x552>
 8001e26:	4b96      	ldr	r3, [pc, #600]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e2c:	4a94      	ldr	r2, [pc, #592]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e36:	4b92      	ldr	r3, [pc, #584]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e3c:	4a90      	ldr	r2, [pc, #576]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e46:	4b8e      	ldr	r3, [pc, #568]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e4c:	4a8c      	ldr	r2, [pc, #560]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fa47 	bl	80012f0 <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fa43 	bl	80012f0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e175      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7c:	4b80      	ldr	r3, [pc, #512]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ed      	beq.n	8001e66 <HAL_RCC_OscConfig+0x562>
 8001e8a:	e015      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fa30 	bl	80012f0 <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff fa2c 	bl	80012f0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e15e      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eaa:	4b75      	ldr	r3, [pc, #468]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ed      	bne.n	8001e94 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d036      	beq.n	8001f32 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d019      	beq.n	8001f00 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001ed2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fa0a 	bl	80012f0 <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ee0:	f7ff fa06 	bl	80012f0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e13a      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ef2:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x5dc>
 8001efe:	e018      	b.n	8001f32 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f00:	4b5f      	ldr	r3, [pc, #380]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5e      	ldr	r2, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f9f0 	bl	80012f0 <HAL_GetTick>
 8001f10:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001f14:	f7ff f9ec 	bl	80012f0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e120      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f26:	4b56      	ldr	r3, [pc, #344]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8115 	beq.w	8002166 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b18      	cmp	r3, #24
 8001f40:	f000 80af 	beq.w	80020a2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f040 8086 	bne.w	800205a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a4b      	ldr	r2, [pc, #300]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f9c9 	bl	80012f0 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f62:	f7ff f9c5 	bl	80012f0 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0f9      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f74:	4b42      	ldr	r3, [pc, #264]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001f80:	4b3f      	ldr	r3, [pc, #252]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001f88:	f023 0303 	bic.w	r3, r3, #3
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f94:	0212      	lsls	r2, r2, #8
 8001f96:	430a      	orrs	r2, r1
 8001f98:	4939      	ldr	r1, [pc, #228]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fac:	3b01      	subs	r3, #1
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001fce:	492c      	ldr	r1, [pc, #176]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001fda:	f023 0310 	bic.w	r3, r3, #16
 8001fde:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe4:	4a26      	ldr	r2, [pc, #152]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	4a24      	ldr	r2, [pc, #144]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001ff0:	f043 0310 	orr.w	r3, r3, #16
 8001ff4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001ff6:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f023 020c 	bic.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	491f      	ldr	r1, [pc, #124]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002008:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	f023 0220 	bic.w	r2, r3, #32
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002014:	491a      	ldr	r1, [pc, #104]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8002016:	4313      	orrs	r3, r2
 8002018:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 800202c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff f95d 	bl	80012f0 <HAL_GetTick>
 8002036:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800203a:	f7ff f959 	bl	80012f0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e08d      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x736>
 8002058:	e085      	b.n	8002166 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a08      	ldr	r2, [pc, #32]	@ (8002080 <HAL_RCC_OscConfig+0x77c>)
 8002060:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff f943 	bl	80012f0 <HAL_GetTick>
 800206a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800206e:	f7ff f93f 	bl	80012f0 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d903      	bls.n	8002084 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e073      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
 8002080:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002084:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002090:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	4a36      	ldr	r2, [pc, #216]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002096:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	6293      	str	r3, [r2, #40]	@ 0x28
 80020a0:	e061      	b.n	8002166 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80020a2:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020a8:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 80020aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ac:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d031      	beq.n	800211a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f003 0203 	and.w	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d12a      	bne.n	800211a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d122      	bne.n	800211a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020de:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d11a      	bne.n	800211a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	0a5b      	lsrs	r3, r3, #9
 80020e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d111      	bne.n	800211a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002102:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d108      	bne.n	800211a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	0e1b      	lsrs	r3, r3, #24
 800210c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e024      	b.n	8002168 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800211e:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800212c:	429a      	cmp	r2, r3
 800212e:	d01a      	beq.n	8002166 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002130:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	4a0e      	ldr	r2, [pc, #56]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002136:	f023 0310 	bic.w	r3, r3, #16
 800213a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f8d8 	bl	80012f0 <HAL_GetTick>
 8002140:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002142:	bf00      	nop
 8002144:	f7ff f8d4 	bl	80012f0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d0f9      	beq.n	8002144 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800215a:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <HAL_RCC_OscConfig+0x86c>)
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	44020c00 	.word	0x44020c00

08002174 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e19e      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b83      	ldr	r3, [pc, #524]	@ (8002398 <HAL_RCC_ClockConfig+0x224>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b80      	ldr	r3, [pc, #512]	@ (8002398 <HAL_RCC_ClockConfig+0x224>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 020f 	bic.w	r2, r3, #15
 800219e:	497e      	ldr	r1, [pc, #504]	@ (8002398 <HAL_RCC_ClockConfig+0x224>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002398 <HAL_RCC_ClockConfig+0x224>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e186      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d012      	beq.n	80021ea <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	4b74      	ldr	r3, [pc, #464]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d909      	bls.n	80021ea <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80021d6:	4b71      	ldr	r3, [pc, #452]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	496d      	ldr	r1, [pc, #436]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	4b68      	ldr	r3, [pc, #416]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002204:	429a      	cmp	r2, r3
 8002206:	d909      	bls.n	800221c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002208:	4b64      	ldr	r3, [pc, #400]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4961      	ldr	r1, [pc, #388]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002218:	4313      	orrs	r3, r2
 800221a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b5b      	ldr	r3, [pc, #364]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002234:	429a      	cmp	r2, r3
 8002236:	d908      	bls.n	800224a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002238:	4b58      	ldr	r3, [pc, #352]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4955      	ldr	r1, [pc, #340]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002246:	4313      	orrs	r3, r2
 8002248:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b50      	ldr	r3, [pc, #320]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	429a      	cmp	r2, r3
 8002264:	d908      	bls.n	8002278 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002266:	4b4d      	ldr	r3, [pc, #308]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f023 020f 	bic.w	r2, r3, #15
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	494a      	ldr	r1, [pc, #296]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002274:	4313      	orrs	r3, r2
 8002276:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8093 	beq.w	80023ac <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d121      	bne.n	80022de <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e113      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	4b3d      	ldr	r3, [pc, #244]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d115      	bne.n	80022de <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e107      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0fb      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ce:	4b33      	ldr	r3, [pc, #204]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0f3      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80022de:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	492c      	ldr	r1, [pc, #176]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7fe fffe 	bl	80012f0 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d112      	bne.n	8002324 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7fe fff6 	bl	80012f0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0d7      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0318 	and.w	r3, r3, #24
 800231e:	2b18      	cmp	r3, #24
 8002320:	d1ee      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18c>
 8002322:	e043      	b.n	80023ac <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d112      	bne.n	8002352 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800232e:	f7fe ffdf 	bl	80012f0 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0c0      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 0318 	and.w	r3, r3, #24
 800234c:	2b10      	cmp	r3, #16
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_ClockConfig+0x1ba>
 8002350:	e02c      	b.n	80023ac <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d122      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7fe ffc8 	bl	80012f0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0a9      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_RCC_ClockConfig+0x228>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 0318 	and.w	r3, r3, #24
 800237a:	2b08      	cmp	r3, #8
 800237c:	d1ee      	bne.n	800235c <HAL_RCC_ClockConfig+0x1e8>
 800237e:	e015      	b.n	80023ac <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7fe ffb6 	bl	80012f0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d906      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e097      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
 8002396:	bf00      	nop
 8002398:	40022000 	.word	0x40022000
 800239c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a0:	4b4b      	ldr	r3, [pc, #300]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f003 0318 	and.w	r3, r3, #24
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e9      	bne.n	8002380 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	4b44      	ldr	r3, [pc, #272]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d208      	bcs.n	80023da <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80023c8:	4b41      	ldr	r3, [pc, #260]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 020f 	bic.w	r2, r3, #15
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	493e      	ldr	r1, [pc, #248]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023da:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_RCC_ClockConfig+0x360>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d210      	bcs.n	800240a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e8:	4b3a      	ldr	r3, [pc, #232]	@ (80024d4 <HAL_RCC_ClockConfig+0x360>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 020f 	bic.w	r2, r3, #15
 80023f0:	4938      	ldr	r1, [pc, #224]	@ (80024d4 <HAL_RCC_ClockConfig+0x360>)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	4b36      	ldr	r3, [pc, #216]	@ (80024d4 <HAL_RCC_ClockConfig+0x360>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e05d      	b.n	80024c6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002422:	429a      	cmp	r2, r3
 8002424:	d208      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002426:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4927      	ldr	r1, [pc, #156]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d012      	beq.n	800246a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002452:	429a      	cmp	r2, r3
 8002454:	d209      	bcs.n	800246a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	491a      	ldr	r1, [pc, #104]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	d012      	beq.n	800249c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002484:	429a      	cmp	r2, r3
 8002486:	d209      	bcs.n	800249c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	490e      	ldr	r1, [pc, #56]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 8002498:	4313      	orrs	r3, r2
 800249a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800249c:	f000 f822 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_ClockConfig+0x35c>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490b      	ldr	r1, [pc, #44]	@ (80024d8 <HAL_RCC_ClockConfig+0x364>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_RCC_ClockConfig+0x368>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024b6:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <HAL_RCC_ClockConfig+0x36c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fe8e 	bl	80011dc <HAL_InitTick>
 80024c0:	4603      	mov	r3, r0
 80024c2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80024c4:	7afb      	ldrb	r3, [r7, #11]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	44020c00 	.word	0x44020c00
 80024d4:	40022000 	.word	0x40022000
 80024d8:	0800726c 	.word	0x0800726c
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	@ 0x24
 80024e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80024ea:	4b8c      	ldr	r3, [pc, #560]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 0318 	and.w	r3, r3, #24
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d102      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80024f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x23c>)
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e107      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fc:	4b87      	ldr	r3, [pc, #540]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 0318 	and.w	r3, r3, #24
 8002504:	2b00      	cmp	r3, #0
 8002506:	d112      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002508:	4b84      	ldr	r3, [pc, #528]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002514:	4b81      	ldr	r3, [pc, #516]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	4a81      	ldr	r2, [pc, #516]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x240>)
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e0f1      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002528:	4b7e      	ldr	r3, [pc, #504]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x240>)
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	e0ee      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800252e:	4b7b      	ldr	r3, [pc, #492]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0318 	and.w	r3, r3, #24
 8002536:	2b10      	cmp	r3, #16
 8002538:	d102      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800253a:	4b7b      	ldr	r3, [pc, #492]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x244>)
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e0e5      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b76      	ldr	r3, [pc, #472]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f003 0318 	and.w	r3, r3, #24
 8002548:	2b18      	cmp	r3, #24
 800254a:	f040 80dd 	bne.w	8002708 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800254e:	4b73      	ldr	r3, [pc, #460]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002558:	4b70      	ldr	r3, [pc, #448]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002562:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002564:	4b6d      	ldr	r3, [pc, #436]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002570:	4b6a      	ldr	r3, [pc, #424]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 8002572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002588:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80b7 	beq.w	8002702 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0xbe>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d056      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x16a>
 80025a0:	e077      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80025a2:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d02d      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80025ae:	4b5b      	ldr	r3, [pc, #364]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x240>)
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d8:	4b50      	ldr	r3, [pc, #320]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ec:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800272c <HAL_RCC_GetSysClockFreq+0x248>
 80025f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002604:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002608:	e065      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002614:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002730 <HAL_RCC_GetSysClockFreq+0x24c>
 8002618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261c:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 800261e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	ee07 3a90 	vmov	s15, r3
 8002628:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800262c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002630:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800272c <HAL_RCC_GetSysClockFreq+0x248>
 8002634:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002638:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800263c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002640:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002648:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800264c:	e043      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002658:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002734 <HAL_RCC_GetSysClockFreq+0x250>
 800265c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002660:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 8002662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002670:	ed97 6a02 	vldr	s12, [r7, #8]
 8002674:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800272c <HAL_RCC_GetSysClockFreq+0x248>
 8002678:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800267c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002684:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002690:	e021      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	ee07 3a90 	vmov	s15, r3
 8002698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002738 <HAL_RCC_GetSysClockFreq+0x254>
 80026a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 80026a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80026b8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800272c <HAL_RCC_GetSysClockFreq+0x248>
 80026bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80026d4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_RCC_GetSysClockFreq+0x238>)
 80026d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026da:	0a5b      	lsrs	r3, r3, #9
 80026dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026e0:	3301      	adds	r3, #1
 80026e2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80026f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fa:	ee17 3a90 	vmov	r3, s15
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	e004      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e001      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x240>)
 800270a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800270c:	69fb      	ldr	r3, [r7, #28]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	44020c00 	.word	0x44020c00
 8002720:	003d0900 	.word	0x003d0900
 8002724:	03d09000 	.word	0x03d09000
 8002728:	017d7840 	.word	0x017d7840
 800272c:	46000000 	.word	0x46000000
 8002730:	4c742400 	.word	0x4c742400
 8002734:	4bbebc20 	.word	0x4bbebc20
 8002738:	4a742400 	.word	0x4a742400

0800273c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002740:	f7ff fed0 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800274a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800274e:	4907      	ldr	r1, [pc, #28]	@ (800276c <HAL_RCC_GetHCLKFreq+0x30>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002752:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x34>)
 800275c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800275e:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x34>)
 8002760:	681b      	ldr	r3, [r3, #0]
}
 8002762:	4618      	mov	r0, r3
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	44020c00 	.word	0x44020c00
 800276c:	0800726c 	.word	0x0800726c
 8002770:	20000000 	.word	0x20000000

08002774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002778:	f7ff ffe0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4904      	ldr	r1, [pc, #16]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x28>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	44020c00 	.word	0x44020c00
 800279c:	0800727c 	.word	0x0800727c

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80027a4:	f7ff ffca 	bl	800273c <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4904      	ldr	r1, [pc, #16]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	44020c00 	.word	0x44020c00
 80027c8:	0800727c 	.word	0x0800727c

080027cc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80027d0:	f7ff ffb4 	bl	800273c <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	0b1b      	lsrs	r3, r3, #12
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4904      	ldr	r1, [pc, #16]	@ (80027f4 <HAL_RCC_GetPCLK3Freq+0x28>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	44020c00 	.word	0x44020c00
 80027f4:	0800727c 	.word	0x0800727c

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80027f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027fc:	b0ba      	sub	sp, #232	@ 0xe8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002804:	2300      	movs	r3, #0
 8002806:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800280a:	2300      	movs	r3, #0
 800280c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800281c:	2500      	movs	r5, #0
 800281e:	ea54 0305 	orrs.w	r3, r4, r5
 8002822:	d00b      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002824:	4bcd      	ldr	r3, [pc, #820]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800282a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800282e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	4ac9      	ldr	r2, [pc, #804]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002836:	430b      	orrs	r3, r1
 8002838:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800283c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f002 0801 	and.w	r8, r2, #1
 8002848:	f04f 0900 	mov.w	r9, #0
 800284c:	ea58 0309 	orrs.w	r3, r8, r9
 8002850:	d042      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002858:	2b05      	cmp	r3, #5
 800285a:	d823      	bhi.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800285c:	a201      	add	r2, pc, #4	@ (adr r2, 8002864 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	080028ad 	.word	0x080028ad
 8002868:	0800287d 	.word	0x0800287d
 800286c:	08002891 	.word	0x08002891
 8002870:	080028ad 	.word	0x080028ad
 8002874:	080028ad 	.word	0x080028ad
 8002878:	080028ad 	.word	0x080028ad
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800287c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002880:	3308      	adds	r3, #8
 8002882:	4618      	mov	r0, r3
 8002884:	f003 f90c 	bl	8005aa0 <RCCEx_PLL2_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800288e:	e00e      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002894:	3330      	adds	r3, #48	@ 0x30
 8002896:	4618      	mov	r0, r3
 8002898:	f003 f99a 	bl	8005bd0 <RCCEx_PLL3_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80028a2:	e004      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80028aa:	e000      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80028ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80028b6:	4ba9      	ldr	r3, [pc, #676]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028bc:	f023 0107 	bic.w	r1, r3, #7
 80028c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	4aa5      	ldr	r2, [pc, #660]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028c8:	430b      	orrs	r3, r1
 80028ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028ce:	e003      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80028d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f002 0a02 	and.w	sl, r2, #2
 80028e4:	f04f 0b00 	mov.w	fp, #0
 80028e8:	ea5a 030b 	orrs.w	r3, sl, fp
 80028ec:	f000 8088 	beq.w	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80028f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	2b28      	cmp	r3, #40	@ 0x28
 80028f8:	d868      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80028fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	080029d5 	.word	0x080029d5
 8002904:	080029cd 	.word	0x080029cd
 8002908:	080029cd 	.word	0x080029cd
 800290c:	080029cd 	.word	0x080029cd
 8002910:	080029cd 	.word	0x080029cd
 8002914:	080029cd 	.word	0x080029cd
 8002918:	080029cd 	.word	0x080029cd
 800291c:	080029cd 	.word	0x080029cd
 8002920:	080029a5 	.word	0x080029a5
 8002924:	080029cd 	.word	0x080029cd
 8002928:	080029cd 	.word	0x080029cd
 800292c:	080029cd 	.word	0x080029cd
 8002930:	080029cd 	.word	0x080029cd
 8002934:	080029cd 	.word	0x080029cd
 8002938:	080029cd 	.word	0x080029cd
 800293c:	080029cd 	.word	0x080029cd
 8002940:	080029b9 	.word	0x080029b9
 8002944:	080029cd 	.word	0x080029cd
 8002948:	080029cd 	.word	0x080029cd
 800294c:	080029cd 	.word	0x080029cd
 8002950:	080029cd 	.word	0x080029cd
 8002954:	080029cd 	.word	0x080029cd
 8002958:	080029cd 	.word	0x080029cd
 800295c:	080029cd 	.word	0x080029cd
 8002960:	080029d5 	.word	0x080029d5
 8002964:	080029cd 	.word	0x080029cd
 8002968:	080029cd 	.word	0x080029cd
 800296c:	080029cd 	.word	0x080029cd
 8002970:	080029cd 	.word	0x080029cd
 8002974:	080029cd 	.word	0x080029cd
 8002978:	080029cd 	.word	0x080029cd
 800297c:	080029cd 	.word	0x080029cd
 8002980:	080029d5 	.word	0x080029d5
 8002984:	080029cd 	.word	0x080029cd
 8002988:	080029cd 	.word	0x080029cd
 800298c:	080029cd 	.word	0x080029cd
 8002990:	080029cd 	.word	0x080029cd
 8002994:	080029cd 	.word	0x080029cd
 8002998:	080029cd 	.word	0x080029cd
 800299c:	080029cd 	.word	0x080029cd
 80029a0:	080029d5 	.word	0x080029d5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029a8:	3308      	adds	r3, #8
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 f878 	bl	8005aa0 <RCCEx_PLL2_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80029b6:	e00e      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029bc:	3330      	adds	r3, #48	@ 0x30
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 f906 	bl	8005bd0 <RCCEx_PLL3_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80029ca:	e004      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80029d2:	e000      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80029d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80029de:	4b5f      	ldr	r3, [pc, #380]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029e4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80029e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ee:	4a5b      	ldr	r2, [pc, #364]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029f0:	430b      	orrs	r3, r1
 80029f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80029f6:	e003      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f002 0304 	and.w	r3, r2, #4
 8002a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	d04e      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002a20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a2a:	d02c      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002a2c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a30:	d825      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a36:	d028      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3c:	d81f      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a40:	d025      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002a42:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a44:	d81b      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a46:	2b80      	cmp	r3, #128	@ 0x80
 8002a48:	d00f      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002a4a:	2b80      	cmp	r3, #128	@ 0x80
 8002a4c:	d817      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01f      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002a52:	2b40      	cmp	r3, #64	@ 0x40
 8002a54:	d113      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 f81f 	bl	8005aa0 <RCCEx_PLL2_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002a68:	e014      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a6e:	3330      	adds	r3, #48	@ 0x30
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 f8ad 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002a84:	e006      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a86:	bf00      	nop
 8002a88:	e004      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a8a:	bf00      	nop
 8002a8c:	e002      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002aa2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aac:	4a2b      	ldr	r2, [pc, #172]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ab4:	e003      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002aba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	f002 0308 	and.w	r3, r2, #8
 8002aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4313      	orrs	r3, r2
 8002adc:	d056      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ae4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002ae8:	d031      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002aea:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002aee:	d82a      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002af4:	d02d      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002af6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002afa:	d824      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002afc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b00:	d029      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002b02:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b06:	d81e      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0c:	d011      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b12:	d818      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d023      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b1c:	d113      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b22:	3308      	adds	r3, #8
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 ffbb 	bl	8005aa0 <RCCEx_PLL2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002b30:	e017      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b36:	3330      	adds	r3, #48	@ 0x30
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 f849 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002b44:	e00d      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002b4c:	e009      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b4e:	bf00      	nop
 8002b50:	e007      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b52:	bf00      	nop
 8002b54:	e005      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b56:	bf00      	nop
 8002b58:	e003      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002b5a:	bf00      	nop
 8002b5c:	44020c00 	.word	0x44020c00
        break;
 8002b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002b6a:	4bb9      	ldr	r3, [pc, #740]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b70:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b7a:	4ab5      	ldr	r2, [pc, #724]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b82:	e003      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b88:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f002 0310 	and.w	r3, r2, #16
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ba2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	d053      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bb2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002bb6:	d031      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002bb8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002bbc:	d82a      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bc2:	d02d      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002bc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bc8:	d824      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bce:	d029      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002bd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bd4:	d81e      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bda:	d011      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be0:	d818      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d020      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bea:	d113      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 ff54 	bl	8005aa0 <RCCEx_PLL2_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002bfe:	e014      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c04:	3330      	adds	r3, #48	@ 0x30
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 ffe2 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002c12:	e00a      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002c1a:	e006      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c1c:	bf00      	nop
 8002c1e:	e004      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c20:	bf00      	nop
 8002c22:	e002      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c32:	4b87      	ldr	r3, [pc, #540]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c42:	4a83      	ldr	r2, [pc, #524]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c44:	430b      	orrs	r3, r1
 8002c46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c4a:	e003      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c50:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f002 0320 	and.w	r3, r2, #32
 8002c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4313      	orrs	r3, r2
 8002c72:	d053      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002c7e:	d031      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002c80:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002c84:	d82a      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c8a:	d02d      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c90:	d824      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c92:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002c96:	d029      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002c98:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002c9c:	d81e      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca2:	d011      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca8:	d818      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d020      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb2:	d113      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cb8:	3308      	adds	r3, #8
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fef0 	bl	8005aa0 <RCCEx_PLL2_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ccc:	3330      	adds	r3, #48	@ 0x30
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 ff7e 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002ce2:	e006      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ce4:	bf00      	nop
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002ce8:	bf00      	nop
 8002cea:	e002      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002cfa:	4b55      	ldr	r3, [pc, #340]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d00:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	4a51      	ldr	r2, [pc, #324]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d12:	e003      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d32:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d36:	460b      	mov	r3, r1
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	d053      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d42:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002d46:	d031      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002d48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002d4c:	d82a      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d52:	d02d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d58:	d824      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d5e:	d029      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d64:	d81e      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d6a:	d011      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d70:	d818      	bhi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d020      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002d76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d7a:	d113      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d80:	3308      	adds	r3, #8
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fe8c 	bl	8005aa0 <RCCEx_PLL2_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002d8e:	e014      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d94:	3330      	adds	r3, #48	@ 0x30
 8002d96:	4618      	mov	r0, r3
 8002d98:	f002 ff1a 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002da2:	e00a      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002daa:	e006      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002dac:	bf00      	nop
 8002dae:	e004      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002db0:	bf00      	nop
 8002db2:	e002      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002dc2:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dda:	e003      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002de0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002df0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002dfa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4313      	orrs	r3, r2
 8002e02:	d03d      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e0e:	d01b      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002e10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e14:	d814      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002e16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e1a:	d017      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x654>
 8002e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e20:	d80e      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2a:	d109      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e30:	3330      	adds	r3, #48	@ 0x30
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 fecc 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e46:	e006      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002e48:	bf00      	nop
 8002e4a:	e004      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002e4c:	bf00      	nop
 8002e4e:	e002      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8002e50:	44020c00 	.word	0x44020c00
        break;
 8002e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e56:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002e5e:	4b99      	ldr	r3, [pc, #612]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e64:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e6e:	4a95      	ldr	r2, [pc, #596]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e76:	e003      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e7c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e96:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	d03b      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eaa:	d01b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8002eac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eb0:	d814      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002eb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002eb6:	d017      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8002eb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ebc:	d80e      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d014      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8002ec2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ec6:	d109      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ecc:	3330      	adds	r3, #48	@ 0x30
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fe7e 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002eda:	e008      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002ee2:	e004      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e002      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002ee8:	bf00      	nop
 8002eea:	e000      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002ef6:	4b73      	ldr	r3, [pc, #460]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ef8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002efc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f06:	4a6f      	ldr	r2, [pc, #444]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f0e:	e003      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002f32:	460b      	mov	r3, r1
 8002f34:	4313      	orrs	r3, r2
 8002f36:	d03d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f44:	d01b      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x786>
 8002f46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f4a:	d814      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002f4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f50:	d017      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8002f52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f56:	d80e      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d014      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8002f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f60:	d109      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f66:	3330      	adds	r3, #48	@ 0x30
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 fe31 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002f74:	e008      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f7c:	e004      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e002      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002f90:	4b4c      	ldr	r3, [pc, #304]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa2:	4a48      	ldr	r2, [pc, #288]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002faa:	e003      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fb0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	d035      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fe0:	d015      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fe6:	d80e      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d012      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff0:	d109      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff6:	3330      	adds	r3, #48	@ 0x30
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f002 fde9 	bl	8005bd0 <RCCEx_PLL3_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003004:	e006      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800300c:	e002      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003014:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10d      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800301c:	4b29      	ldr	r3, [pc, #164]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800301e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003022:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302e:	4a25      	ldr	r2, [pc, #148]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003030:	430b      	orrs	r3, r1
 8003032:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003036:	e003      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800303c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	2100      	movs	r1, #0
 800304a:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800304e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003052:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003056:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800305a:	460b      	mov	r3, r1
 800305c:	4313      	orrs	r3, r2
 800305e:	d037      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306c:	d015      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800306e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003072:	d80e      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800307c:	d109      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800307e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003082:	3330      	adds	r3, #48	@ 0x30
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fda3 	bl	8005bd0 <RCCEx_PLL3_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003098:	e002      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800309e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80030a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10f      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030ae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	4a02      	ldr	r2, [pc, #8]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80030c2:	e005      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80030c4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80030d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	2100      	movs	r1, #0
 80030da:	67b9      	str	r1, [r7, #120]	@ 0x78
 80030dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80030ec:	4bb8      	ldr	r3, [pc, #736]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4ab7      	ldr	r2, [pc, #732]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030f6:	61d3      	str	r3, [r2, #28]
 80030f8:	4bb5      	ldr	r3, [pc, #724]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030fa:	69d9      	ldr	r1, [r3, #28]
 80030fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003100:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003104:	4ab2      	ldr	r2, [pc, #712]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003106:	430b      	orrs	r3, r1
 8003108:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800310a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003116:	673b      	str	r3, [r7, #112]	@ 0x70
 8003118:	2300      	movs	r3, #0
 800311a:	677b      	str	r3, [r7, #116]	@ 0x74
 800311c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003120:	460b      	mov	r3, r1
 8003122:	4313      	orrs	r3, r2
 8003124:	d055      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800312a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800312e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003132:	d031      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8003134:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003138:	d82a      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313e:	d02d      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003144:	d824      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800314a:	d029      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 800314c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003150:	d81e      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003156:	d011      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315c:	d818      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d020      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8003162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003166:	d113      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800316c:	3308      	adds	r3, #8
 800316e:	4618      	mov	r0, r3
 8003170:	f002 fc96 	bl	8005aa0 <RCCEx_PLL2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800317a:	e014      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800317c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003180:	3330      	adds	r3, #48	@ 0x30
 8003182:	4618      	mov	r0, r3
 8003184:	f002 fd24 	bl	8005bd0 <RCCEx_PLL3_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800318e:	e00a      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003196:	e006      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003198:	bf00      	nop
 800319a:	e004      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800319c:	bf00      	nop
 800319e:	e002      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80031a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80031ae:	4b88      	ldr	r3, [pc, #544]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80031b4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80031b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c0:	4a83      	ldr	r2, [pc, #524]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031c2:	430b      	orrs	r3, r1
 80031c4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031ce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80031de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031e0:	2300      	movs	r3, #0
 80031e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031e4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80031e8:	460b      	mov	r3, r1
 80031ea:	4313      	orrs	r3, r2
 80031ec:	d055      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80031fa:	d031      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80031fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003200:	d82a      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003206:	d02d      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800320c:	d824      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800320e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003212:	d029      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003218:	d81e      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	d011      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003224:	d818      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d020      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322e:	d113      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003234:	3308      	adds	r3, #8
 8003236:	4618      	mov	r0, r3
 8003238:	f002 fc32 	bl	8005aa0 <RCCEx_PLL2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003242:	e014      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003248:	3330      	adds	r3, #48	@ 0x30
 800324a:	4618      	mov	r0, r3
 800324c:	f002 fcc0 	bl	8005bd0 <RCCEx_PLL3_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003256:	e00a      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800325e:	e006      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003260:	bf00      	nop
 8003262:	e004      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003264:	bf00      	nop
 8003266:	e002      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800326c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10d      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003276:	4b56      	ldr	r3, [pc, #344]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003278:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800327c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	4a51      	ldr	r2, [pc, #324]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800328a:	430b      	orrs	r3, r1
 800328c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003290:	e003      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003292:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003296:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800329a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80032a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80032a8:	2300      	movs	r3, #0
 80032aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80032ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80032b0:	460b      	mov	r3, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d032      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80032b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d80f      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d211      	bcs.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d911      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d109      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032d2:	3308      	adds	r3, #8
 80032d4:	4618      	mov	r0, r3
 80032d6:	f002 fbe3 	bl	8005aa0 <RCCEx_PLL2_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032e8:	e002      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80032ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10d      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80032f8:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80032fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032fe:	f023 0107 	bic.w	r1, r3, #7
 8003302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800330a:	4a31      	ldr	r2, [pc, #196]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800330c:	430b      	orrs	r3, r1
 800330e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003318:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800331c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	2100      	movs	r1, #0
 8003326:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800332c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800332e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003332:	460b      	mov	r3, r1
 8003334:	4313      	orrs	r3, r2
 8003336:	d024      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800333c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003344:	2b08      	cmp	r3, #8
 8003346:	d005      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800334e:	e002      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8003350:	bf00      	nop
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8003354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003356:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10d      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800335e:	4b1c      	ldr	r3, [pc, #112]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003364:	f023 0108 	bic.w	r1, r3, #8
 8003368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800336c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003370:	4a17      	ldr	r2, [pc, #92]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003372:	430b      	orrs	r3, r1
 8003374:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003378:	e003      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800337e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800338e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003390:	2300      	movs	r3, #0
 8003392:	657b      	str	r3, [r7, #84]	@ 0x54
 8003394:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003398:	460b      	mov	r3, r1
 800339a:	4313      	orrs	r3, r2
 800339c:	f000 80b9 	beq.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80033a0:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	4a0b      	ldr	r2, [pc, #44]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ac:	f7fd ffa0 	bl	80012f0 <HAL_GetTick>
 80033b0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033b4:	e010      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fd ff9b 	bl	80012f0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d908      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033cc:	e00a      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80033ce:	bf00      	nop
 80033d0:	44020c00 	.word	0x44020c00
 80033d4:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033d8:	4bba      	ldr	r3, [pc, #744]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0e8      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80033e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 808e 	bne.w	800350a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ee:	4bb6      	ldr	r3, [pc, #728]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d023      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003408:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800340c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003410:	4293      	cmp	r3, r2
 8003412:	d01b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003414:	4bac      	ldr	r3, [pc, #688]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800341a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003422:	4ba9      	ldr	r3, [pc, #676]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003428:	4aa7      	ldr	r2, [pc, #668]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800342a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003432:	4ba5      	ldr	r3, [pc, #660]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003438:	4aa3      	ldr	r2, [pc, #652]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800343e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003442:	4aa1      	ldr	r2, [pc, #644]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003448:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d019      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd ff4a 	bl	80012f0 <HAL_GetTick>
 800345c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	e00d      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fd ff45 	bl	80012f0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346c:	1ad2      	subs	r2, r2, r3
 800346e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003472:	429a      	cmp	r2, r3
 8003474:	d903      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	4b92      	ldr	r3, [pc, #584]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ea      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 800348c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d135      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003498:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800349c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a4:	d110      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80034a6:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034bc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034c0:	4a81      	ldr	r2, [pc, #516]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034c2:	430b      	orrs	r3, r1
 80034c4:	61d3      	str	r3, [r2, #28]
 80034c6:	e005      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80034c8:	4b7f      	ldr	r3, [pc, #508]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4a7e      	ldr	r2, [pc, #504]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034d2:	61d3      	str	r3, [r2, #28]
 80034d4:	4b7c      	ldr	r3, [pc, #496]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034da:	4a7b      	ldr	r2, [pc, #492]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034e4:	4b78      	ldr	r3, [pc, #480]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034e6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80034ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f6:	4a74      	ldr	r2, [pc, #464]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003500:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003504:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003508:	e003      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800350e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800351e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003520:	2300      	movs	r3, #0
 8003522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003524:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003528:	460b      	mov	r3, r1
 800352a:	4313      	orrs	r3, r2
 800352c:	d035      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800352e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003536:	2b30      	cmp	r3, #48	@ 0x30
 8003538:	d014      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800353a:	2b30      	cmp	r3, #48	@ 0x30
 800353c:	d80e      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800353e:	2b20      	cmp	r3, #32
 8003540:	d012      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8003542:	2b20      	cmp	r3, #32
 8003544:	d80a      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800354a:	2b10      	cmp	r3, #16
 800354c:	d106      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354e:	4b5e      	ldr	r3, [pc, #376]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	4a5d      	ldr	r2, [pc, #372]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003558:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800355a:	e008      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003562:	e004      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800356c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003576:	4b54      	ldr	r3, [pc, #336]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800357c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003588:	4a4f      	ldr	r2, [pc, #316]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800358a:	430b      	orrs	r3, r1
 800358c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003596:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800359a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80035a8:	2300      	movs	r3, #0
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d033      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80035b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80035c2:	2b40      	cmp	r3, #64	@ 0x40
 80035c4:	d007      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80035c6:	e010      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c8:	4b3f      	ldr	r3, [pc, #252]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	4a3e      	ldr	r2, [pc, #248]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80035d4:	e00d      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035da:	3308      	adds	r3, #8
 80035dc:	4618      	mov	r0, r3
 80035de:	f002 fa5f 	bl	8005aa0 <RCCEx_PLL2_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80035fa:	4b33      	ldr	r3, [pc, #204]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003600:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800360c:	4a2e      	ldr	r2, [pc, #184]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800360e:	430b      	orrs	r3, r1
 8003610:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003616:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800361a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800361e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800362a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800362c:	2300      	movs	r3, #0
 800362e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003630:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003634:	460b      	mov	r3, r1
 8003636:	4313      	orrs	r3, r2
 8003638:	d04c      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800363a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800363e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003642:	2b04      	cmp	r3, #4
 8003644:	d827      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8003646:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003661 	.word	0x08003661
 8003650:	0800366f 	.word	0x0800366f
 8003654:	08003683 	.word	0x08003683
 8003658:	0800369f 	.word	0x0800369f
 800365c:	0800369f 	.word	0x0800369f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003660:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	4a18      	ldr	r2, [pc, #96]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800366c:	e018      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800366e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003672:	3308      	adds	r3, #8
 8003674:	4618      	mov	r0, r3
 8003676:	f002 fa13 	bl	8005aa0 <RCCEx_PLL2_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003680:	e00e      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003686:	3330      	adds	r3, #48	@ 0x30
 8003688:	4618      	mov	r0, r3
 800368a:	f002 faa1 	bl	8005bd0 <RCCEx_PLL3_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003694:	e004      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800369e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80036a8:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ae:	f023 0107 	bic.w	r1, r3, #7
 80036b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036ba:	4a03      	ldr	r2, [pc, #12]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036c2:	e007      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80036c4:	44020800 	.word	0x44020800
 80036c8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036d0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80036d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80036e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036e2:	2300      	movs	r3, #0
 80036e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f000 8081 	beq.w	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80036f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d85f      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80036fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003789 	.word	0x08003789
 8003708:	080037bf 	.word	0x080037bf
 800370c:	080037bf 	.word	0x080037bf
 8003710:	080037bf 	.word	0x080037bf
 8003714:	080037bf 	.word	0x080037bf
 8003718:	080037bf 	.word	0x080037bf
 800371c:	080037bf 	.word	0x080037bf
 8003720:	080037bf 	.word	0x080037bf
 8003724:	08003797 	.word	0x08003797
 8003728:	080037bf 	.word	0x080037bf
 800372c:	080037bf 	.word	0x080037bf
 8003730:	080037bf 	.word	0x080037bf
 8003734:	080037bf 	.word	0x080037bf
 8003738:	080037bf 	.word	0x080037bf
 800373c:	080037bf 	.word	0x080037bf
 8003740:	080037bf 	.word	0x080037bf
 8003744:	080037ab 	.word	0x080037ab
 8003748:	080037bf 	.word	0x080037bf
 800374c:	080037bf 	.word	0x080037bf
 8003750:	080037bf 	.word	0x080037bf
 8003754:	080037bf 	.word	0x080037bf
 8003758:	080037bf 	.word	0x080037bf
 800375c:	080037bf 	.word	0x080037bf
 8003760:	080037bf 	.word	0x080037bf
 8003764:	080037c7 	.word	0x080037c7
 8003768:	080037bf 	.word	0x080037bf
 800376c:	080037bf 	.word	0x080037bf
 8003770:	080037bf 	.word	0x080037bf
 8003774:	080037bf 	.word	0x080037bf
 8003778:	080037bf 	.word	0x080037bf
 800377c:	080037bf 	.word	0x080037bf
 8003780:	080037bf 	.word	0x080037bf
 8003784:	080037c7 	.word	0x080037c7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003788:	4bb9      	ldr	r3, [pc, #740]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	4ab8      	ldr	r2, [pc, #736]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800378e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003792:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003794:	e018      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800379a:	3308      	adds	r3, #8
 800379c:	4618      	mov	r0, r3
 800379e:	f002 f97f 	bl	8005aa0 <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80037a8:	e00e      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ae:	3330      	adds	r3, #48	@ 0x30
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fa0d 	bl	8005bd0 <RCCEx_PLL3_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80037bc:	e004      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80037c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80037d0:	4ba7      	ldr	r3, [pc, #668]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80037da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037e2:	4aa3      	ldr	r2, [pc, #652]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80037f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003802:	2300      	movs	r3, #0
 8003804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003806:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d04e      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800381c:	d02e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800381e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003822:	d827      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003824:	2bc0      	cmp	r3, #192	@ 0xc0
 8003826:	d02b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003828:	2bc0      	cmp	r3, #192	@ 0xc0
 800382a:	d823      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800382c:	2b80      	cmp	r3, #128	@ 0x80
 800382e:	d017      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8003830:	2b80      	cmp	r3, #128	@ 0x80
 8003832:	d81f      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	d007      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1054>
 800383c:	e01a      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003842:	4a8b      	ldr	r2, [pc, #556]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003848:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800384a:	e01a      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800384c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003850:	3308      	adds	r3, #8
 8003852:	4618      	mov	r0, r3
 8003854:	f002 f924 	bl	8005aa0 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800385e:	e010      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003860:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003864:	3330      	adds	r3, #48	@ 0x30
 8003866:	4618      	mov	r0, r3
 8003868:	f002 f9b2 	bl	8005bd0 <RCCEx_PLL3_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003872:	e006      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800387a:	e002      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800387c:	bf00      	nop
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003882:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800388a:	4b79      	ldr	r3, [pc, #484]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800388c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003890:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003894:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800389c:	4974      	ldr	r1, [pc, #464]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80038a4:	e003      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80038ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038c4:	460b      	mov	r3, r1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	d055      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80038ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038d2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80038d6:	d031      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80038d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80038dc:	d82a      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e2:	d02d      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80038e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e8:	d824      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80038ea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038ee:	d029      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80038f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038f4:	d81e      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d011      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003900:	d818      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8003906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390a:	d113      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800390c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003910:	3308      	adds	r3, #8
 8003912:	4618      	mov	r0, r3
 8003914:	f002 f8c4 	bl	8005aa0 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800391e:	e014      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003924:	3330      	adds	r3, #48	@ 0x30
 8003926:	4618      	mov	r0, r3
 8003928:	f002 f952 	bl	8005bd0 <RCCEx_PLL3_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003932:	e00a      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800393a:	e006      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800393c:	bf00      	nop
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10d      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003952:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003958:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 800395c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003960:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003964:	4942      	ldr	r1, [pc, #264]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800396c:	e003      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003972:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	2100      	movs	r1, #0
 8003980:	61b9      	str	r1, [r7, #24]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d03c      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800399a:	2b03      	cmp	r3, #3
 800399c:	d81b      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800399e:	a201      	add	r2, pc, #4	@ (adr r2, 80039a4 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039df 	.word	0x080039df
 80039a8:	080039b5 	.word	0x080039b5
 80039ac:	080039c3 	.word	0x080039c3
 80039b0:	080039df 	.word	0x080039df
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039be:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80039c0:	e00e      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039c6:	3308      	adds	r3, #8
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 f869 	bl	8005aa0 <RCCEx_PLL2_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80039e8:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039fa:	491d      	ldr	r1, [pc, #116]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a08:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	2100      	movs	r1, #0
 8003a16:	6139      	str	r1, [r7, #16]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d03c      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a34:	d00e      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3a:	d815      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d019      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8003a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a44:	d110      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a46:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a50:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a52:	e010      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a58:	3308      	adds	r3, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 f820 	bl	8005aa0 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a66:	e006      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8003a70:	44020c00 	.word	0x44020c00
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a90:	4938      	ldr	r1, [pc, #224]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003a98:	e003      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a9e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	2100      	movs	r1, #0
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	d038      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ac2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ac6:	2b30      	cmp	r3, #48	@ 0x30
 8003ac8:	d01b      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8003aca:	2b30      	cmp	r3, #48	@ 0x30
 8003acc:	d815      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d007      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8003ad6:	e010      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b26      	ldr	r3, [pc, #152]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	4a25      	ldr	r2, [pc, #148]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ae4:	e00e      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aea:	3330      	adds	r3, #48	@ 0x30
 8003aec:	4618      	mov	r0, r3
 8003aee:	f002 f86f 	bl	8005bd0 <RCCEx_PLL3_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003af8:	e004      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8003b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10d      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b12:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b1e:	4915      	ldr	r1, [pc, #84]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b26:	e003      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b2c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	2100      	movs	r1, #0
 8003b3a:	6039      	str	r1, [r7, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	d00c      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b5e:	4905      	ldr	r1, [pc, #20]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8003b66:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	37e8      	adds	r7, #232	@ 0xe8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b74:	44020c00 	.word	0x44020c00

08003b78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b08b      	sub	sp, #44	@ 0x2c
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003b80:	4bae      	ldr	r3, [pc, #696]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b88:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b8a:	4bac      	ldr	r3, [pc, #688]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003b94:	4ba9      	ldr	r3, [pc, #676]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b9e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003ba0:	4ba6      	ldr	r3, [pc, #664]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bac:	4ba3      	ldr	r3, [pc, #652]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8126 	beq.w	8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d053      	beq.n	8003c7e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d86f      	bhi.n	8003cbc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d003      	beq.n	8003bea <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d02b      	beq.n	8003c40 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003be8:	e068      	b.n	8003cbc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bea:	4b94      	ldr	r3, [pc, #592]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	08db      	lsrs	r3, r3, #3
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	4a92      	ldr	r2, [pc, #584]	@ (8003e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c22:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003c3e:	e068      	b.n	8003d12 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c60:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003c7c:	e049      	b.n	8003d12 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c88:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c9e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003cba:	e02a      	b.n	8003d12 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	4a5e      	ldr	r2, [pc, #376]	@ (8003e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cf4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003d10:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d12:	4b4a      	ldr	r3, [pc, #296]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d1e:	d121      	bne.n	8003d64 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003d20:	4b46      	ldr	r3, [pc, #280]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d2c:	4b43      	ldr	r3, [pc, #268]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	0a5b      	lsrs	r3, r3, #9
 8003d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d42:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d46:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d52:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e006      	b.n	8003d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e002      	b.n	8003d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d6a:	4b34      	ldr	r3, [pc, #208]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d76:	d121      	bne.n	8003dbc <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003d78:	4b30      	ldr	r3, [pc, #192]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d017      	beq.n	8003db4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d84:	4b2d      	ldr	r3, [pc, #180]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d9e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003daa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	e006      	b.n	8003dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	e002      	b.n	8003dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dce:	d121      	bne.n	8003e14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d017      	beq.n	8003e0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ddc:	4b17      	ldr	r3, [pc, #92]	@ (8003e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de0:	0e1b      	lsrs	r3, r3, #24
 8003de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003df2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003df6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e02:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003e0a:	e010      	b.n	8003e2e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
}
 8003e12:	e00c      	b.n	8003e2e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
}
 8003e1a:	e008      	b.n	8003e2e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
}
 8003e2e:	bf00      	nop
 8003e30:	372c      	adds	r7, #44	@ 0x2c
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	44020c00 	.word	0x44020c00
 8003e40:	03d09000 	.word	0x03d09000
 8003e44:	46000000 	.word	0x46000000
 8003e48:	4a742400 	.word	0x4a742400
 8003e4c:	4bbebc20 	.word	0x4bbebc20

08003e50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b08b      	sub	sp, #44	@ 0x2c
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e58:	4bae      	ldr	r3, [pc, #696]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e60:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e62:	4bac      	ldr	r3, [pc, #688]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003e6c:	4ba9      	ldr	r3, [pc, #676]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e76:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003e78:	4ba6      	ldr	r3, [pc, #664]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003e84:	4ba3      	ldr	r3, [pc, #652]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	08db      	lsrs	r3, r3, #3
 8003e8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8126 	beq.w	80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d053      	beq.n	8003f56 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d86f      	bhi.n	8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d02b      	beq.n	8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003ec0:	e068      	b.n	8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ec2:	4b94      	ldr	r3, [pc, #592]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	4a92      	ldr	r2, [pc, #584]	@ (8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef6:	ed97 6a04 	vldr	s12, [r7, #16]
 8003efa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003f16:	e068      	b.n	8003fea <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f34:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f38:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f54:	e049      	b.n	8003fea <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f60:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f72:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f76:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f92:	e02a      	b.n	8003fea <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f94:	4b5f      	ldr	r3, [pc, #380]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	08db      	lsrs	r3, r3, #3
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc8:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fcc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003fe8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003fea:	4b4a      	ldr	r3, [pc, #296]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ff6:	d121      	bne.n	800403c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003ff8:	4b46      	ldr	r3, [pc, #280]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d017      	beq.n	8004034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004004:	4b43      	ldr	r3, [pc, #268]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004008:	0a5b      	lsrs	r3, r3, #9
 800400a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800401a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800401e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800402a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e006      	b.n	8004042 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e002      	b.n	8004042 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004042:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800404e:	d121      	bne.n	8004094 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004050:	4b30      	ldr	r3, [pc, #192]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d017      	beq.n	800408c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800405c:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800406e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004072:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004076:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800407a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004082:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	e006      	b.n	800409a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	e002      	b.n	800409a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800409a:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a6:	d121      	bne.n	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80040a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d017      	beq.n	80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040b4:	4b17      	ldr	r3, [pc, #92]	@ (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80040c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80040ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040da:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040e2:	e010      	b.n	8004106 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	e00c      	b.n	8004106 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
}
 80040f2:	e008      	b.n	8004106 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	bf00      	nop
 8004108:	372c      	adds	r7, #44	@ 0x2c
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	44020c00 	.word	0x44020c00
 8004118:	03d09000 	.word	0x03d09000
 800411c:	46000000 	.word	0x46000000
 8004120:	4a742400 	.word	0x4a742400
 8004124:	4bbebc20 	.word	0x4bbebc20

08004128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004128:	b480      	push	{r7}
 800412a:	b08b      	sub	sp, #44	@ 0x2c
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004130:	4bae      	ldr	r3, [pc, #696]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004138:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800413a:	4bac      	ldr	r3, [pc, #688]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8004144:	4ba9      	ldr	r3, [pc, #676]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800414e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004150:	4ba6      	ldr	r3, [pc, #664]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800415c:	4ba3      	ldr	r3, [pc, #652]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800415e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	fb02 f303 	mul.w	r3, r2, r3
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004174:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8126 	beq.w	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d053      	beq.n	800422e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d86f      	bhi.n	800426c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d003      	beq.n	800419a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d02b      	beq.n	80041f0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004198:	e068      	b.n	800426c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800419a:	4b94      	ldr	r3, [pc, #592]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	4a92      	ldr	r2, [pc, #584]	@ (80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80041d2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80041d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80041ee:	e068      	b.n	80042c2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80041fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004210:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004228:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800422c:	e049      	b.n	80042c2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004238:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800423c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424a:	ed97 6a04 	vldr	s12, [r7, #16]
 800424e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800425a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800425e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004266:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800426a:	e02a      	b.n	80042c2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800426c:	4b5f      	ldr	r3, [pc, #380]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	08db      	lsrs	r3, r3, #3
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	4a5e      	ldr	r2, [pc, #376]	@ (80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80042a4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80042a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80042c0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042c2:	4b4a      	ldr	r3, [pc, #296]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ce:	d121      	bne.n	8004314 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80042d0:	4b46      	ldr	r3, [pc, #280]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042dc:	4b43      	ldr	r3, [pc, #268]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	0a5b      	lsrs	r3, r3, #9
 80042e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80042ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80042f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80042fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004302:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e006      	b.n	800431a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e002      	b.n	800431a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800431a:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004326:	d121      	bne.n	800436c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004328:	4b30      	ldr	r3, [pc, #192]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d017      	beq.n	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004334:	4b2d      	ldr	r3, [pc, #180]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800434a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800434e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	e006      	b.n	8004372 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004372:	4b1e      	ldr	r3, [pc, #120]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800437e:	d121      	bne.n	80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004380:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800438c:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800438e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004390:	0e1b      	lsrs	r3, r3, #24
 8004392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800439e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80043a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80043ba:	e010      	b.n	80043de <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
}
 80043c2:	e00c      	b.n	80043de <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
}
 80043de:	bf00      	nop
 80043e0:	372c      	adds	r7, #44	@ 0x2c
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	44020c00 	.word	0x44020c00
 80043f0:	03d09000 	.word	0x03d09000
 80043f4:	46000000 	.word	0x46000000
 80043f8:	4a742400 	.word	0x4a742400
 80043fc:	4bbebc20 	.word	0x4bbebc20

08004400 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b08f      	sub	sp, #60	@ 0x3c
 8004404:	af00      	add	r7, sp, #0
 8004406:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800440a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8004412:	4321      	orrs	r1, r4
 8004414:	d150      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004416:	4b26      	ldr	r3, [pc, #152]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800441c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004420:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004422:	4b23      	ldr	r3, [pc, #140]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d108      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004436:	d104      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
 800443e:	f001 bb20 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004442:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800444c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004450:	d108      	bne.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004458:	d104      	bne.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800445a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004460:	f001 bb0f 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004464:	4b12      	ldr	r3, [pc, #72]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004470:	d119      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004478:	d115      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004486:	d30a      	bcc.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004492:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800449a:	f001 baf2 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80044a2:	f001 baee 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044aa:	f001 baea 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80044ae:	bf00      	nop
 80044b0:	44020c00 	.word	0x44020c00
 80044b4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80044b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044bc:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 80044c0:	ea50 0104 	orrs.w	r1, r0, r4
 80044c4:	f000 8615 	beq.w	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 80044c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044cc:	2801      	cmp	r0, #1
 80044ce:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 80044d2:	f081 82d3 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044da:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80044de:	ea50 0104 	orrs.w	r1, r0, r4
 80044e2:	f000 84d8 	beq.w	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80044e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044ea:	2801      	cmp	r0, #1
 80044ec:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80044f0:	f081 82c4 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044f8:	f1a1 0410 	sub.w	r4, r1, #16
 80044fc:	ea50 0104 	orrs.w	r1, r0, r4
 8004500:	f001 8288 	beq.w	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8004504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004508:	2801      	cmp	r0, #1
 800450a:	f171 0110 	sbcs.w	r1, r1, #16
 800450e:	f081 82b5 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004516:	f1a1 0408 	sub.w	r4, r1, #8
 800451a:	ea50 0104 	orrs.w	r1, r0, r4
 800451e:	f001 81fe 	beq.w	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8004522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004526:	2801      	cmp	r0, #1
 8004528:	f171 0108 	sbcs.w	r1, r1, #8
 800452c:	f081 82a6 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004534:	1f0c      	subs	r4, r1, #4
 8004536:	ea50 0104 	orrs.w	r1, r0, r4
 800453a:	f000 8753 	beq.w	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 800453e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004542:	2801      	cmp	r0, #1
 8004544:	f171 0104 	sbcs.w	r1, r1, #4
 8004548:	f081 8298 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800454c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004550:	1e8c      	subs	r4, r1, #2
 8004552:	ea50 0104 	orrs.w	r1, r0, r4
 8004556:	f001 8173 	beq.w	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800455a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800455e:	2801      	cmp	r0, #1
 8004560:	f171 0102 	sbcs.w	r1, r1, #2
 8004564:	f081 828a 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800456c:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8004570:	4321      	orrs	r1, r4
 8004572:	f001 80fe 	beq.w	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8004576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800457a:	4ccb      	ldr	r4, [pc, #812]	@ (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800457c:	42a0      	cmp	r0, r4
 800457e:	f171 0100 	sbcs.w	r1, r1, #0
 8004582:	f081 827b 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800458a:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800458e:	4321      	orrs	r1, r4
 8004590:	f001 8076 	beq.w	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8004594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004598:	4cc4      	ldr	r4, [pc, #784]	@ (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800459a:	42a0      	cmp	r0, r4
 800459c:	f171 0100 	sbcs.w	r1, r1, #0
 80045a0:	f081 826c 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045a8:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80045ac:	4321      	orrs	r1, r4
 80045ae:	f000 87b5 	beq.w	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80045b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045b6:	4cbe      	ldr	r4, [pc, #760]	@ (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 80045b8:	42a0      	cmp	r0, r4
 80045ba:	f171 0100 	sbcs.w	r1, r1, #0
 80045be:	f081 825d 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045c6:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80045ca:	4321      	orrs	r1, r4
 80045cc:	f000 8738 	beq.w	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80045d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045d4:	4cb7      	ldr	r4, [pc, #732]	@ (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 80045d6:	42a0      	cmp	r0, r4
 80045d8:	f171 0100 	sbcs.w	r1, r1, #0
 80045dc:	f081 824e 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045e4:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80045e8:	4321      	orrs	r1, r4
 80045ea:	f001 81cd 	beq.w	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 80045ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045f2:	4cb1      	ldr	r4, [pc, #708]	@ (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	f171 0100 	sbcs.w	r1, r1, #0
 80045fa:	f081 823f 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004602:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8004606:	4321      	orrs	r1, r4
 8004608:	f000 80d9 	beq.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800460c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004610:	4caa      	ldr	r4, [pc, #680]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8004612:	42a0      	cmp	r0, r4
 8004614:	f171 0100 	sbcs.w	r1, r1, #0
 8004618:	f081 8230 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800461c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004620:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8004624:	4321      	orrs	r1, r4
 8004626:	f000 83da 	beq.w	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800462a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800462e:	4ca4      	ldr	r4, [pc, #656]	@ (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8004630:	42a0      	cmp	r0, r4
 8004632:	f171 0100 	sbcs.w	r1, r1, #0
 8004636:	f081 8221 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800463a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800463e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8004642:	4321      	orrs	r1, r4
 8004644:	f000 8627 	beq.w	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8004648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800464c:	4c9d      	ldr	r4, [pc, #628]	@ (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 800464e:	42a0      	cmp	r0, r4
 8004650:	f171 0100 	sbcs.w	r1, r1, #0
 8004654:	f081 8212 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800465c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8004660:	4321      	orrs	r1, r4
 8004662:	f000 857a 	beq.w	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800466a:	4c97      	ldr	r4, [pc, #604]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 800466c:	42a0      	cmp	r0, r4
 800466e:	f171 0100 	sbcs.w	r1, r1, #0
 8004672:	f081 8203 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800467a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800467e:	4321      	orrs	r1, r4
 8004680:	f000 84fb 	beq.w	800507a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004688:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800468c:	f171 0100 	sbcs.w	r1, r1, #0
 8004690:	f081 81f4 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004698:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800469c:	4321      	orrs	r1, r4
 800469e:	f000 84a9 	beq.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80046a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046a6:	f248 0401 	movw	r4, #32769	@ 0x8001
 80046aa:	42a0      	cmp	r0, r4
 80046ac:	f171 0100 	sbcs.w	r1, r1, #0
 80046b0:	f081 81e4 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046b8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80046bc:	4321      	orrs	r1, r4
 80046be:	f000 8456 	beq.w	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 80046c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046c6:	f244 0401 	movw	r4, #16385	@ 0x4001
 80046ca:	42a0      	cmp	r0, r4
 80046cc:	f171 0100 	sbcs.w	r1, r1, #0
 80046d0:	f081 81d4 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046d8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80046dc:	4321      	orrs	r1, r4
 80046de:	f000 8403 	beq.w	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80046e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046e6:	f242 0401 	movw	r4, #8193	@ 0x2001
 80046ea:	42a0      	cmp	r0, r4
 80046ec:	f171 0100 	sbcs.w	r1, r1, #0
 80046f0:	f081 81c4 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046f8:	2821      	cmp	r0, #33	@ 0x21
 80046fa:	f171 0100 	sbcs.w	r1, r1, #0
 80046fe:	d255      	bcs.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004704:	4301      	orrs	r1, r0
 8004706:	f001 81b9 	beq.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800470a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800470e:	1e42      	subs	r2, r0, #1
 8004710:	f141 33ff 	adc.w	r3, r1, #4294967295
 8004714:	2a20      	cmp	r2, #32
 8004716:	f173 0100 	sbcs.w	r1, r3, #0
 800471a:	f081 81af 	bcs.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800471e:	2a1f      	cmp	r2, #31
 8004720:	f201 81ac 	bhi.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004724:	a101      	add	r1, pc, #4	@ (adr r1, 800472c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004726:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004803 	.word	0x08004803
 8004730:	08004901 	.word	0x08004901
 8004734:	08005a7d 	.word	0x08005a7d
 8004738:	080049c1 	.word	0x080049c1
 800473c:	08005a7d 	.word	0x08005a7d
 8004740:	08005a7d 	.word	0x08005a7d
 8004744:	08005a7d 	.word	0x08005a7d
 8004748:	08004a91 	.word	0x08004a91
 800474c:	08005a7d 	.word	0x08005a7d
 8004750:	08005a7d 	.word	0x08005a7d
 8004754:	08005a7d 	.word	0x08005a7d
 8004758:	08005a7d 	.word	0x08005a7d
 800475c:	08005a7d 	.word	0x08005a7d
 8004760:	08005a7d 	.word	0x08005a7d
 8004764:	08005a7d 	.word	0x08005a7d
 8004768:	08004b75 	.word	0x08004b75
 800476c:	08005a7d 	.word	0x08005a7d
 8004770:	08005a7d 	.word	0x08005a7d
 8004774:	08005a7d 	.word	0x08005a7d
 8004778:	08005a7d 	.word	0x08005a7d
 800477c:	08005a7d 	.word	0x08005a7d
 8004780:	08005a7d 	.word	0x08005a7d
 8004784:	08005a7d 	.word	0x08005a7d
 8004788:	08005a7d 	.word	0x08005a7d
 800478c:	08005a7d 	.word	0x08005a7d
 8004790:	08005a7d 	.word	0x08005a7d
 8004794:	08005a7d 	.word	0x08005a7d
 8004798:	08005a7d 	.word	0x08005a7d
 800479c:	08005a7d 	.word	0x08005a7d
 80047a0:	08005a7d 	.word	0x08005a7d
 80047a4:	08005a7d 	.word	0x08005a7d
 80047a8:	08004c4b 	.word	0x08004c4b
 80047ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80047b4:	430b      	orrs	r3, r1
 80047b6:	f000 82b3 	beq.w	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80047ba:	f001 b95f 	b.w	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80047be:	4b43      	ldr	r3, [pc, #268]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80047c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047d0:	f107 0320 	add.w	r3, r7, #32
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff f9cf 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80047de:	f001 b950 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d108      	bne.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fb2f 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047f6:	f001 b944 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047fe:	f001 b940 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004802:	4b32      	ldr	r3, [pc, #200]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004814:	f7fd ffc4 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8004818:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800481a:	f001 b932 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800481e:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800482a:	d10a      	bne.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800482c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482e:	2b01      	cmp	r3, #1
 8004830:	d107      	bne.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004832:	f107 0314 	add.w	r3, r7, #20
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fb0a 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004840:	e05c      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8004842:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800484a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800484e:	d10a      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	2b02      	cmp	r3, #2
 8004854:	d107      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fc64 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
 8004864:	e04a      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004866:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d10c      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	2b03      	cmp	r3, #3
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004878:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	4a13      	ldr	r2, [pc, #76]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
 800488a:	e037      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800488c:	4b0f      	ldr	r3, [pc, #60]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004898:	d11e      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	2b04      	cmp	r3, #4
 800489e:	d11b      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a4:	e02a      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80048a6:	bf00      	nop
 80048a8:	40000001 	.word	0x40000001
 80048ac:	20000001 	.word	0x20000001
 80048b0:	10000001 	.word	0x10000001
 80048b4:	08000001 	.word	0x08000001
 80048b8:	04000001 	.word	0x04000001
 80048bc:	00400001 	.word	0x00400001
 80048c0:	00200001 	.word	0x00200001
 80048c4:	00040001 	.word	0x00040001
 80048c8:	00020001 	.word	0x00020001
 80048cc:	44020c00 	.word	0x44020c00
 80048d0:	03d09000 	.word	0x03d09000
 80048d4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80048d8:	4ba3      	ldr	r3, [pc, #652]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d106      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d103      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80048ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f2:	e003      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048f8:	f001 b8c3 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80048fc:	f001 b8c1 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004900:	4b99      	ldr	r3, [pc, #612]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800490a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004912:	f7fd ff2f 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004916:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004918:	f001 b8b3 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800491c:	4b92      	ldr	r3, [pc, #584]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004928:	d10a      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	2b08      	cmp	r3, #8
 800492e:	d107      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fa8b 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
 800493e:	e03d      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	2b10      	cmp	r3, #16
 8004944:	d108      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fbec 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004954:	f001 b895 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004958:	4b83      	ldr	r3, [pc, #524]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d10c      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	2b18      	cmp	r3, #24
 8004968:	d109      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800496a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	08db      	lsrs	r3, r3, #3
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	4a7d      	ldr	r2, [pc, #500]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
 800497c:	e01e      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800497e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800498a:	d105      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	2b20      	cmp	r3, #32
 8004990:	d102      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8004992:	4b77      	ldr	r3, [pc, #476]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004994:	637b      	str	r3, [r7, #52]	@ 0x34
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004998:	4b73      	ldr	r3, [pc, #460]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800499a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d106      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	2b28      	cmp	r3, #40	@ 0x28
 80049aa:	d103      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80049ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049b8:	f001 b863 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80049bc:	f001 b861 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80049c0:	4b69      	ldr	r3, [pc, #420]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80049d2:	f7fd fecf 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 80049d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80049d8:	f001 b853 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80049dc:	4b62      	ldr	r3, [pc, #392]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049e8:	d10a      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2b40      	cmp	r3, #64	@ 0x40
 80049ee:	d107      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fa2b 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fe:	e045      	b.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8004a00:	4b59      	ldr	r3, [pc, #356]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0c:	d10a      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	2b80      	cmp	r3, #128	@ 0x80
 8004a12:	d107      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a14:	f107 0308 	add.w	r3, r7, #8
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fb85 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a22:	e033      	b.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004a24:	4b50      	ldr	r3, [pc, #320]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a36:	4b4c      	ldr	r3, [pc, #304]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	08db      	lsrs	r3, r3, #3
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	4a4a      	ldr	r2, [pc, #296]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a48:	e020      	b.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004a4a:	4b47      	ldr	r3, [pc, #284]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a56:	d106      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8004a60:	4b43      	ldr	r3, [pc, #268]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a64:	e012      	b.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004a66:	4b40      	ldr	r3, [pc, #256]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d107      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a7a:	d103      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8004a7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a82:	e003      	b.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a88:	f000 bffb 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a8c:	f000 bff9 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004a90:	4b35      	ldr	r3, [pc, #212]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a96:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8004a9a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d104      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fd fe67 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004aa8:	f000 bfeb 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8004aac:	4b2e      	ldr	r3, [pc, #184]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f9c2 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad0:	e047      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8004ad2:	4b25      	ldr	r3, [pc, #148]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ae8:	f107 0308 	add.w	r3, r7, #8
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff fb1b 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af6:	e034      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004af8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d10d      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b0a:	d109      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b0c:	4b16      	ldr	r3, [pc, #88]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	08db      	lsrs	r3, r3, #3
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	4a15      	ldr	r2, [pc, #84]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b1e:	e020      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8004b20:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b2c:	d106      	bne.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b34:	d102      	bne.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8004b36:	4b0e      	ldr	r3, [pc, #56]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b3a:	e012      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d107      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b50:	d103      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8004b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b58:	e003      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b5e:	f000 bf90 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004b62:	f000 bf8e 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004b66:	bf00      	nop
 8004b68:	44020c00 	.word	0x44020c00
 8004b6c:	03d09000 	.word	0x03d09000
 8004b70:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004b74:	4ba5      	ldr	r3, [pc, #660]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b7a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fd fdf5 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b8c:	f000 bf79 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8004b90:	4b9e      	ldr	r3, [pc, #632]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b9c:	d10b      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f950 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb4:	e047      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8004bb6:	4b95      	ldr	r3, [pc, #596]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff faa9 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	e034      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004bdc:	4b8b      	ldr	r3, [pc, #556]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bee:	d109      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bf0:	4b86      	ldr	r3, [pc, #536]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	4a85      	ldr	r2, [pc, #532]	@ (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c02:	e020      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8004c04:	4b81      	ldr	r3, [pc, #516]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c10:	d106      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c18:	d102      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8004c1a:	4b7e      	ldr	r3, [pc, #504]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c1e:	e012      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004c20:	4b7a      	ldr	r3, [pc, #488]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c34:	d103      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c42:	f000 bf1e 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004c46:	f000 bf1c 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004c4a:	4b70      	ldr	r3, [pc, #448]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c50:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8004c54:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c5c:	f7fd fd8a 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004c60:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c62:	f000 bf0e 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8004c66:	4b69      	ldr	r3, [pc, #420]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff f8e5 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8a:	e047      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8004c8c:	4b5f      	ldr	r3, [pc, #380]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c98:	d10b      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ca2:	f107 0308 	add.w	r3, r7, #8
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fa3e 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb0:	e034      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004cb2:	4b56      	ldr	r3, [pc, #344]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d10d      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004cc4:	d109      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cc6:	4b51      	ldr	r3, [pc, #324]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd8:	e020      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8004cda:	4b4c      	ldr	r3, [pc, #304]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cee:	d102      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8004cf0:	4b48      	ldr	r3, [pc, #288]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf4:	e012      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004cf6:	4b45      	ldr	r3, [pc, #276]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d107      	bne.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d0a:	d103      	bne.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8004d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d18:	f000 beb3 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004d1c:	f000 beb1 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d26:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004d2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004d32:	f7fd fd4b 	bl	80027cc <HAL_RCC_GetPCLK3Freq>
 8004d36:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d38:	f000 bea3 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d42:	d108      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d44:	f107 0314 	add.w	r3, r7, #20
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff f881 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d52:	f000 be96 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d5c:	d108      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f9e0 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d6c:	f000 be89 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004d70:	4b26      	ldr	r3, [pc, #152]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d10d      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d82:	d109      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d84:	4b21      	ldr	r3, [pc, #132]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	4a20      	ldr	r2, [pc, #128]	@ (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d96:	e020      	b.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004d98:	4b1c      	ldr	r3, [pc, #112]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da4:	d106      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dac:	d102      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8004dae:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db2:	e012      	b.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004db4:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004dc8:	d103      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dd6:	f000 be54 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004dda:	f000 be52 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004dde:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004df0:	f7fd fca4 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8004df4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004df6:	f000 be44 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10b      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e00:	f7fd fb70 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004e04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e06:	f000 be3c 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e0a:	bf00      	nop
 8004e0c:	44020c00 	.word	0x44020c00
 8004e10:	03d09000 	.word	0x03d09000
 8004e14:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d108      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e1e:	f107 0314 	add.w	r3, r7, #20
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff f814 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e2c:	f000 be29 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004e30:	4b9f      	ldr	r3, [pc, #636]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e3c:	d105      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d102      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8004e44:	4b9b      	ldr	r3, [pc, #620]	@ (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e48:	e023      	b.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004e4a:	4b99      	ldr	r3, [pc, #612]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d109      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e5c:	4b94      	ldr	r3, [pc, #592]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	08db      	lsrs	r3, r3, #3
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	4a94      	ldr	r2, [pc, #592]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e6e:	e010      	b.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004e70:	4b8f      	ldr	r3, [pc, #572]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d102      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8004e84:	4b8d      	ldr	r3, [pc, #564]	@ (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e88:	e003      	b.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e8e:	f000 bdf8 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e92:	f000 bdf6 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004e96:	4b86      	ldr	r3, [pc, #536]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004ea2:	4b83      	ldr	r3, [pc, #524]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d106      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ebc:	e012      	b.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ecc:	d106      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d103      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8004ed4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eda:	e003      	b.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004ee0:	f000 bdcf 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ee4:	f000 bdcd 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004ee8:	4b71      	ldr	r3, [pc, #452]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004eea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ef2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004efa:	f7fd fc3b 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004efe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f00:	f000 bdbf 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0a:	d108      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f0c:	f107 0308 	add.w	r3, r7, #8
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff f909 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f1a:	f000 bdb2 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004f1e:	4b64      	ldr	r3, [pc, #400]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d10d      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f30:	d109      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f32:	4b5f      	ldr	r3, [pc, #380]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f44:	e011      	b.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004f46:	4b5a      	ldr	r3, [pc, #360]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f52:	d106      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8004f5c:	4b57      	ldr	r3, [pc, #348]	@ (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f60:	e003      	b.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f66:	f000 bd8c 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f6a:	f000 bd8a 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f6e:	4b50      	ldr	r3, [pc, #320]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004f78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f80:	f7fd fbf8 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004f84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f86:	f000 bd7c 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f90:	d108      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff f8c6 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fa0:	f000 bd6f 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004fa4:	4b42      	ldr	r3, [pc, #264]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d10d      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fb6:	d109      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	08db      	lsrs	r3, r3, #3
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fca:	e011      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004fcc:	4b38      	ldr	r3, [pc, #224]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fd8:	d106      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8004fe2:	4b36      	ldr	r3, [pc, #216]	@ (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe6:	e003      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fec:	f000 bd49 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ff0:	f000 bd47 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ff6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ffa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004ffe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005006:	f7fd fbe1 	bl	80027cc <HAL_RCC_GetPCLK3Freq>
 800500a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800500c:	f000 bd39 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005016:	d108      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff f883 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005026:	f000 bd2c 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800502a:	4b21      	ldr	r3, [pc, #132]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	d10d      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800503c:	d109      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800503e:	4b1c      	ldr	r3, [pc, #112]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	08db      	lsrs	r3, r3, #3
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	4a1b      	ldr	r2, [pc, #108]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005050:	e011      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8005052:	4b17      	ldr	r3, [pc, #92]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800505a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505e:	d106      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005066:	d102      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8005068:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800506a:	637b      	str	r3, [r7, #52]	@ 0x34
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005072:	f000 bd06 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005076:	f000 bd04 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800507c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005080:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005084:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fd fb72 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8005090:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005092:	f000 bcf6 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800509c:	d110      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800509e:	f107 0308 	add.w	r3, r7, #8
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff f840 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ac:	f000 bce9 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80050b0:	44020c00 	.word	0x44020c00
 80050b4:	017d7840 	.word	0x017d7840
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80050c0:	4ba4      	ldr	r3, [pc, #656]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d10e      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050d2:	d10a      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050d4:	4b9f      	ldr	r3, [pc, #636]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	08db      	lsrs	r3, r3, #3
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	4a9e      	ldr	r2, [pc, #632]	@ (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
 80050e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050e6:	f000 bccc 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ee:	f000 bcc8 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80050f2:	4b98      	ldr	r3, [pc, #608]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050f8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80050fc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005104:	f7fd fb62 	bl	80027cc <HAL_RCC_GetPCLK3Freq>
 8005108:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800510a:	f000 bcba 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005114:	d108      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f804 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005124:	f000 bcad 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8005128:	4b8a      	ldr	r3, [pc, #552]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d10e      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800513a:	d10a      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800513c:	4b85      	ldr	r3, [pc, #532]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	08db      	lsrs	r3, r3, #3
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	4a84      	ldr	r2, [pc, #528]	@ (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
 800514c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800514e:	f000 bc98 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005156:	f000 bc94 	b.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800515a:	4b7e      	ldr	r3, [pc, #504]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800515c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005164:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800516c:	d056      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005174:	f200 808b 	bhi.w	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517e:	d03e      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005186:	f200 8082 	bhi.w	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800518a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005190:	d027      	beq.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005198:	d879      	bhi.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a0:	d017      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a8:	d871      	bhi.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80051b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b6:	d004      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 80051b8:	e069      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80051ba:	f7fd fb07 	bl	80027cc <HAL_RCC_GetPCLK3Freq>
 80051be:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80051c0:	e068      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fe42 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051d0:	e060      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d2:	f107 0308 	add.w	r3, r7, #8
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fe ffa6 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051e0:	e058      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80051e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d103      	bne.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 80051f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80051f6:	e04d      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051fc:	e04a      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80051fe:	4b55      	ldr	r3, [pc, #340]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800520c:	d103      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 800520e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005212:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005214:	e03e      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800521a:	e03b      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800521c:	4b4d      	ldr	r3, [pc, #308]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800521e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005222:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005228:	4b4a      	ldr	r3, [pc, #296]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d10c      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8005234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800523a:	4b46      	ldr	r3, [pc, #280]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	4a44      	ldr	r2, [pc, #272]	@ (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
 800524c:	e01e      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800524e:	4b41      	ldr	r3, [pc, #260]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525a:	d106      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005262:	d102      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005264:	4b3d      	ldr	r3, [pc, #244]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8005266:	637b      	str	r3, [r7, #52]	@ 0x34
 8005268:	e010      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800526a:	4b3a      	ldr	r3, [pc, #232]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005276:	d106      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800527e:	d102      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005280:	4b37      	ldr	r3, [pc, #220]	@ (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8005282:	637b      	str	r3, [r7, #52]	@ 0x34
 8005284:	e002      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800528a:	e003      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800528c:	e002      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005292:	bf00      	nop
          }
        }
        break;
 8005294:	e3f5      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005296:	4b2f      	ldr	r3, [pc, #188]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005298:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800529c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80052a0:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052a8:	d05f      	beq.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052b0:	f200 8094 	bhi.w	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ba:	d03f      	beq.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c2:	f200 808b 	bhi.w	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052cc:	d028      	beq.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052d4:	f200 8082 	bhi.w	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052de:	d017      	beq.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e6:	d879      	bhi.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80052f6:	e071      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fd fa3c 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 80052fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80052fe:	e070      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe fda3 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800530e:	e068      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe ff07 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800531e:	e060      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d103      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005334:	e055      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800533a:	e052      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800533c:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800533e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800534a:	d10b      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 800534c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005350:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005352:	e046      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8005354:	44020c00 	.word	0x44020c00
 8005358:	03d09000 	.word	0x03d09000
 800535c:	003d0900 	.word	0x003d0900
 8005360:	017d7840 	.word	0x017d7840
              frequency = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005368:	e03b      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800536a:	4bae      	ldr	r3, [pc, #696]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800536c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005370:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005374:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005376:	4bab      	ldr	r3, [pc, #684]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d10c      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005388:	4ba6      	ldr	r3, [pc, #664]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	4aa5      	ldr	r2, [pc, #660]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
 800539a:	e01e      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800539c:	4ba1      	ldr	r3, [pc, #644]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a8:	d106      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80053aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b0:	d102      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80053b2:	4b9e      	ldr	r3, [pc, #632]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b6:	e010      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053b8:	4b9a      	ldr	r3, [pc, #616]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053c4:	d106      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053cc:	d102      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80053ce:	4b98      	ldr	r3, [pc, #608]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d2:	e002      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80053da:	e002      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80053e0:	bf00      	nop
          }
        }
        break;
 80053e2:	e34e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80053e4:	4b8f      	ldr	r3, [pc, #572]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80053f0:	4b8c      	ldr	r3, [pc, #560]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053fc:	d105      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8005404:	4b8a      	ldr	r3, [pc, #552]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005406:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005408:	e33b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005410:	d107      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005412:	f107 0320 	add.w	r3, r7, #32
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fbae 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005420:	e32f      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005428:	d107      	bne.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800542a:	f107 0314 	add.w	r3, r7, #20
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fd0e 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005438:	e323      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800543e:	e320      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005440:	4b78      	ldr	r3, [pc, #480]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800544c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544e:	2b04      	cmp	r3, #4
 8005450:	d860      	bhi.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	0800546d 	.word	0x0800546d
 800545c:	0800547d 	.word	0x0800547d
 8005460:	0800548d 	.word	0x0800548d
 8005464:	0800549d 	.word	0x0800549d
 8005468:	080054a3 	.word	0x080054a3
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800546c:	f107 0320 	add.w	r3, r7, #32
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe fb81 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800547a:	e04e      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fce5 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800548a:	e046      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	4618      	mov	r0, r3
 8005492:	f7fe fe49 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800549a:	e03e      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800549c:	4b65      	ldr	r3, [pc, #404]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800549e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054a0:	e03b      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054a2:	4b60      	ldr	r3, [pc, #384]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054c0:	4b58      	ldr	r3, [pc, #352]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	4a57      	ldr	r2, [pc, #348]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d2:	e01e      	b.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054d4:	4b53      	ldr	r3, [pc, #332]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e0:	d106      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 80054e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e8:	d102      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80054ea:	4b50      	ldr	r3, [pc, #320]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80054ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ee:	e010      	b.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054fc:	d106      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005504:	d102      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005506:	4b4a      	ldr	r3, [pc, #296]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
 800550a:	e002      	b.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005510:	e003      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8005512:	e002      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005518:	bf00      	nop
          }
        }
        break;
 800551a:	e2b2      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800551c:	4b41      	ldr	r3, [pc, #260]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800551e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005526:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	2b20      	cmp	r3, #32
 800552c:	f200 80a4 	bhi.w	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8005530:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	080055bd 	.word	0x080055bd
 800553c:	08005679 	.word	0x08005679
 8005540:	08005679 	.word	0x08005679
 8005544:	08005679 	.word	0x08005679
 8005548:	08005679 	.word	0x08005679
 800554c:	08005679 	.word	0x08005679
 8005550:	08005679 	.word	0x08005679
 8005554:	08005679 	.word	0x08005679
 8005558:	080055cd 	.word	0x080055cd
 800555c:	08005679 	.word	0x08005679
 8005560:	08005679 	.word	0x08005679
 8005564:	08005679 	.word	0x08005679
 8005568:	08005679 	.word	0x08005679
 800556c:	08005679 	.word	0x08005679
 8005570:	08005679 	.word	0x08005679
 8005574:	08005679 	.word	0x08005679
 8005578:	080055dd 	.word	0x080055dd
 800557c:	08005679 	.word	0x08005679
 8005580:	08005679 	.word	0x08005679
 8005584:	08005679 	.word	0x08005679
 8005588:	08005679 	.word	0x08005679
 800558c:	08005679 	.word	0x08005679
 8005590:	08005679 	.word	0x08005679
 8005594:	08005679 	.word	0x08005679
 8005598:	080055ed 	.word	0x080055ed
 800559c:	08005679 	.word	0x08005679
 80055a0:	08005679 	.word	0x08005679
 80055a4:	08005679 	.word	0x08005679
 80055a8:	08005679 	.word	0x08005679
 80055ac:	08005679 	.word	0x08005679
 80055b0:	08005679 	.word	0x08005679
 80055b4:	08005679 	.word	0x08005679
 80055b8:	080055f3 	.word	0x080055f3
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055bc:	f107 0320 	add.w	r3, r7, #32
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe fad9 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055ca:	e058      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055cc:	f107 0314 	add.w	r3, r7, #20
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fc3d 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055da:	e050      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fda1 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055ea:	e048      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80055ec:	4b11      	ldr	r3, [pc, #68]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055f0:	e045      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80055f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055fe:	4b09      	ldr	r3, [pc, #36]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d116      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 800560a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d113      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005610:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	4a03      	ldr	r2, [pc, #12]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	637b      	str	r3, [r7, #52]	@ 0x34
 8005622:	e028      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005624:	44020c00 	.word	0x44020c00
 8005628:	03d09000 	.word	0x03d09000
 800562c:	003d0900 	.word	0x003d0900
 8005630:	017d7840 	.word	0x017d7840
 8005634:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005638:	4b95      	ldr	r3, [pc, #596]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005644:	d106      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800564c:	d102      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800564e:	4b91      	ldr	r3, [pc, #580]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005650:	637b      	str	r3, [r7, #52]	@ 0x34
 8005652:	e010      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005654:	4b8e      	ldr	r3, [pc, #568]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005660:	d106      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005668:	d102      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800566a:	4b8b      	ldr	r3, [pc, #556]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800566c:	637b      	str	r3, [r7, #52]	@ 0x34
 800566e:	e002      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005674:	e003      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8005676:	e002      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800567c:	bf00      	nop
          }
        }
        break;
 800567e:	e200      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005680:	4b83      	ldr	r3, [pc, #524]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005686:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800568a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005692:	d031      	beq.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569a:	d866      	bhi.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	2bc0      	cmp	r3, #192	@ 0xc0
 80056a0:	d027      	beq.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80056a6:	d860      	bhi.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	2b80      	cmp	r3, #128	@ 0x80
 80056ac:	d019      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	2b80      	cmp	r3, #128	@ 0x80
 80056b2:	d85a      	bhi.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	d008      	beq.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 80056c0:	e053      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c2:	f107 0320 	add.w	r3, r7, #32
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fa56 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056d0:	e04e      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d2:	f107 0314 	add.w	r3, r7, #20
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fbba 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056e0:	e046      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fd1e 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056f0:	e03e      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80056f2:	4b6a      	ldr	r3, [pc, #424]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80056f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056f6:	e03b      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056f8:	4b65      	ldr	r3, [pc, #404]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80056fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005704:	4b62      	ldr	r3, [pc, #392]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b02      	cmp	r3, #2
 800570e:	d10c      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005716:	4b5e      	ldr	r3, [pc, #376]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	08db      	lsrs	r3, r3, #3
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	4a5f      	ldr	r2, [pc, #380]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005722:	fa22 f303 	lsr.w	r3, r2, r3
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
 8005728:	e01e      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800572a:	4b59      	ldr	r3, [pc, #356]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005736:	d106      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573e:	d102      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005740:	4b54      	ldr	r3, [pc, #336]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
 8005744:	e010      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005746:	4b52      	ldr	r3, [pc, #328]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005752:	d106      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800575a:	d102      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800575c:	4b4e      	ldr	r3, [pc, #312]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005766:	e003      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800576e:	bf00      	nop
          }
        }
        break;
 8005770:	e187      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8005772:	4b47      	ldr	r3, [pc, #284]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005778:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005784:	f7fd f80c 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8005788:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800578a:	e17a      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800578c:	4b40      	ldr	r3, [pc, #256]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005798:	d10b      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a0:	d107      	bne.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057a2:	f107 0314 	add.w	r3, r7, #20
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fb52 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b0:	e045      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80057b2:	4b37      	ldr	r3, [pc, #220]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057be:	d10b      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c6:	d107      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057c8:	f107 0308 	add.w	r3, r7, #8
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe fcab 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d6:	e032      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80057d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d10d      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057ea:	d109      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057ec:	4b28      	ldr	r3, [pc, #160]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	08db      	lsrs	r3, r3, #3
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	4a2a      	ldr	r2, [pc, #168]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fe:	e01e      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005800:	4b23      	ldr	r3, [pc, #140]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800580c:	d106      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005814:	d102      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8005816:	4b1f      	ldr	r3, [pc, #124]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005818:	637b      	str	r3, [r7, #52]	@ 0x34
 800581a:	e010      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800581c:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005828:	d106      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005830:	d102      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8005832:	4b19      	ldr	r3, [pc, #100]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
 8005836:	e002      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800583c:	e121      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800583e:	e120      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005840:	4b13      	ldr	r3, [pc, #76]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005842:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	2b03      	cmp	r3, #3
 8005850:	d861      	bhi.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8005852:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005869 	.word	0x08005869
 800585c:	08005871 	.word	0x08005871
 8005860:	08005881 	.word	0x08005881
 8005864:	080058a5 	.word	0x080058a5
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005868:	f7fc ff68 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800586c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800586e:	e055      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005870:	f107 0320 	add.w	r3, r7, #32
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe f97f 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800587e:	e04d      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fae3 	bl	8003e50 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800588e:	e045      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005890:	44020c00 	.word	0x44020c00
 8005894:	003d0900 	.word	0x003d0900
 8005898:	017d7840 	.word	0x017d7840
 800589c:	00bb8000 	.word	0x00bb8000
 80058a0:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058a4:	4b79      	ldr	r3, [pc, #484]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058b0:	4b76      	ldr	r3, [pc, #472]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d10c      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 80058bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058c2:	4b72      	ldr	r3, [pc, #456]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	08db      	lsrs	r3, r3, #3
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	4a70      	ldr	r2, [pc, #448]	@ (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80058ce:	fa22 f303 	lsr.w	r3, r2, r3
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d4:	e01e      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058d6:	4b6d      	ldr	r3, [pc, #436]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e2:	d106      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ea:	d102      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80058ec:	4b69      	ldr	r3, [pc, #420]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80058ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f0:	e010      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058f2:	4b66      	ldr	r3, [pc, #408]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058fe:	d106      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005906:	d102      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005908:	4b63      	ldr	r3, [pc, #396]	@ (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005912:	e003      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005914:	e002      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800591a:	bf00      	nop
          }
        }
        break;
 800591c:	e0b1      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800591e:	4b5b      	ldr	r3, [pc, #364]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005924:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800592a:	4b58      	ldr	r3, [pc, #352]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800592c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b02      	cmp	r3, #2
 8005936:	d106      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
 8005944:	e01f      	b.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8005946:	4b51      	ldr	r3, [pc, #324]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800594c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005954:	d106      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	2b40      	cmp	r3, #64	@ 0x40
 800595a:	d103      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 800595c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34
 8005962:	e010      	b.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005964:	4b49      	ldr	r3, [pc, #292]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800596c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005970:	d106      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	2b80      	cmp	r3, #128	@ 0x80
 8005976:	d103      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8005978:	f248 0312 	movw	r3, #32786	@ 0x8012
 800597c:	637b      	str	r3, [r7, #52]	@ 0x34
 800597e:	e002      	b.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005984:	e07d      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005986:	e07c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005988:	4b40      	ldr	r3, [pc, #256]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800598a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800598e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005992:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005994:	4b3d      	ldr	r3, [pc, #244]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a0:	d105      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80059a8:	4b3c      	ldr	r3, [pc, #240]	@ (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ac:	e031      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80059ae:	4b37      	ldr	r3, [pc, #220]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ba:	d10a      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d107      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059c2:	f107 0320 	add.w	r3, r7, #32
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe f8d6 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d0:	e01f      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80059d2:	4b2e      	ldr	r3, [pc, #184]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80059d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d106      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d103      	bne.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80059e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ec:	e011      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80059ee:	4b27      	ldr	r3, [pc, #156]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80059f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059fc:	d106      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	2b30      	cmp	r3, #48	@ 0x30
 8005a02:	d103      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8005a04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005a10:	e037      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005a12:	e036      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005a14:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	2b10      	cmp	r3, #16
 8005a24:	d107      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a26:	f107 0320 	add.w	r3, r7, #32
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe f8a4 	bl	8003b78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a32:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005a34:	e025      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8005a36:	4b15      	ldr	r3, [pc, #84]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a42:	d10a      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d107      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fb6a 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a58:	e00f      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a66:	d105      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	2b30      	cmp	r3, #48	@ 0x30
 8005a6c:	d102      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a72:	e002      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005a78:	e003      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005a7a:	e002      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a80:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8005a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	373c      	adds	r7, #60	@ 0x3c
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd90      	pop	{r4, r7, pc}
 8005a8c:	44020c00 	.word	0x44020c00
 8005a90:	03d09000 	.word	0x03d09000
 8005a94:	003d0900 	.word	0x003d0900
 8005a98:	017d7840 	.word	0x017d7840
 8005a9c:	02dc6c00 	.word	0x02dc6c00

08005aa0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005aa8:	4b48      	ldr	r3, [pc, #288]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a47      	ldr	r2, [pc, #284]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005aae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ab2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ab4:	f7fb fc1c 	bl	80012f0 <HAL_GetTick>
 8005ab8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005aba:	e008      	b.n	8005ace <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005abc:	f7fb fc18 	bl	80012f0 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e07a      	b.n	8005bc4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ace:	4b3f      	ldr	r3, [pc, #252]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005ada:	4b3c      	ldr	r3, [pc, #240]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ade:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6811      	ldr	r1, [r2, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6852      	ldr	r2, [r2, #4]
 8005aee:	0212      	lsls	r2, r2, #8
 8005af0:	430a      	orrs	r2, r1
 8005af2:	4936      	ldr	r1, [pc, #216]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	025b      	lsls	r3, r3, #9
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	041b      	lsls	r3, r3, #16
 8005b16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	061b      	lsls	r3, r3, #24
 8005b24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b28:	4928      	ldr	r1, [pc, #160]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005b2e:	4b27      	ldr	r3, [pc, #156]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	f023 020c 	bic.w	r2, r3, #12
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	4924      	ldr	r1, [pc, #144]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005b40:	4b22      	ldr	r3, [pc, #136]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	f023 0220 	bic.w	r2, r3, #32
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	491f      	ldr	r1, [pc, #124]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005b52:	4b1e      	ldr	r3, [pc, #120]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5a:	491c      	ldr	r1, [pc, #112]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005b60:	4b1a      	ldr	r3, [pc, #104]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b66:	f023 0310 	bic.w	r3, r3, #16
 8005b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005b6c:	4b17      	ldr	r3, [pc, #92]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b74:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6a12      	ldr	r2, [r2, #32]
 8005b7c:	00d2      	lsls	r2, r2, #3
 8005b7e:	4913      	ldr	r1, [pc, #76]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005b84:	4b11      	ldr	r3, [pc, #68]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	4a10      	ldr	r2, [pc, #64]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b8a:	f043 0310 	orr.w	r3, r3, #16
 8005b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005b90:	4b0e      	ldr	r3, [pc, #56]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0d      	ldr	r2, [pc, #52]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005b96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b9c:	f7fb fba8 	bl	80012f0 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ba2:	e008      	b.n	8005bb6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ba4:	f7fb fba4 	bl	80012f0 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e006      	b.n	8005bc4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bb6:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <RCCEx_PLL2_Config+0x12c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0

}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	44020c00 	.word	0x44020c00

08005bd0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005bd8:	4b48      	ldr	r3, [pc, #288]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a47      	ldr	r2, [pc, #284]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005bde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005be4:	f7fb fb84 	bl	80012f0 <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bea:	e008      	b.n	8005bfe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bec:	f7fb fb80 	bl	80012f0 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e07a      	b.n	8005cf4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6811      	ldr	r1, [r2, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6852      	ldr	r2, [r2, #4]
 8005c1e:	0212      	lsls	r2, r2, #8
 8005c20:	430a      	orrs	r2, r1
 8005c22:	4936      	ldr	r1, [pc, #216]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	630b      	str	r3, [r1, #48]	@ 0x30
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	025b      	lsls	r3, r3, #9
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	061b      	lsls	r3, r3, #24
 8005c54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c58:	4928      	ldr	r1, [pc, #160]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c5e:	4b27      	ldr	r3, [pc, #156]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c62:	f023 020c 	bic.w	r2, r3, #12
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	4924      	ldr	r1, [pc, #144]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005c70:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c74:	f023 0220 	bic.w	r2, r3, #32
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	491f      	ldr	r1, [pc, #124]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005c82:	4b1e      	ldr	r3, [pc, #120]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	491c      	ldr	r1, [pc, #112]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005c90:	4b1a      	ldr	r3, [pc, #104]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c94:	4a19      	ldr	r2, [pc, #100]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005c9c:	4b17      	ldr	r3, [pc, #92]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ca4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6a12      	ldr	r2, [r2, #32]
 8005cac:	00d2      	lsls	r2, r2, #3
 8005cae:	4913      	ldr	r1, [pc, #76]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005cb4:	4b11      	ldr	r3, [pc, #68]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	4a10      	ldr	r2, [pc, #64]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005cba:	f043 0310 	orr.w	r3, r3, #16
 8005cbe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ccc:	f7fb fb10 	bl	80012f0 <HAL_GetTick>
 8005cd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cd2:	e008      	b.n	8005ce6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005cd4:	f7fb fb0c 	bl	80012f0 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e006      	b.n	8005cf4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ce6:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <RCCEx_PLL3_Config+0x12c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	44020c00 	.word	0x44020c00

08005d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e042      	b.n	8005d98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fb f8f3 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2224      	movs	r2, #36	@ 0x24
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa74 	bl	8006238 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f8c3 	bl	8005edc <UART_SetConfig>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e01b      	b.n	8005d98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 faf3 	bl	800637c <UART_CheckIdleState>
 8005d96:	4603      	mov	r3, r0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	f040 808b 	bne.w	8005ed2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_UART_Transmit+0x28>
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e083      	b.n	8005ed4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd6:	2b80      	cmp	r3, #128	@ 0x80
 8005dd8:	d107      	bne.n	8005dea <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005de8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2221      	movs	r2, #33	@ 0x21
 8005df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dfa:	f7fb fa79 	bl	80012f0 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e18:	d108      	bne.n	8005e2c <HAL_UART_Transmit+0x8c>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	e003      	b.n	8005e34 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e34:	e030      	b.n	8005e98 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2180      	movs	r1, #128	@ 0x80
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fb45 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e03d      	b.n	8005ed4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10b      	bne.n	8005e76 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	3302      	adds	r3, #2
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	e007      	b.n	8005e86 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	3301      	adds	r3, #1
 8005e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1c8      	bne.n	8005e36 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2140      	movs	r1, #64	@ 0x40
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fb0e 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e006      	b.n	8005ed4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e000      	b.n	8005ed4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee0:	b094      	sub	sp, #80	@ 0x50
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b83      	ldr	r3, [pc, #524]	@ (8006100 <UART_SetConfig+0x224>)
 8005ef2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	497c      	ldr	r1, [pc, #496]	@ (8006104 <UART_SetConfig+0x228>)
 8005f14:	4019      	ands	r1, r3
 8005f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2c:	68d9      	ldr	r1, [r3, #12]
 8005f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	ea40 0301 	orr.w	r3, r0, r1
 8005f36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b6f      	ldr	r3, [pc, #444]	@ (8006100 <UART_SetConfig+0x224>)
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d009      	beq.n	8005f5c <UART_SetConfig+0x80>
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	4b6e      	ldr	r3, [pc, #440]	@ (8006108 <UART_SetConfig+0x22c>)
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d004      	beq.n	8005f5c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	6a1a      	ldr	r2, [r3, #32]
 8005f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005f66:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	f023 000f 	bic.w	r0, r3, #15
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	ea40 0301 	orr.w	r3, r0, r1
 8005f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b5e      	ldr	r3, [pc, #376]	@ (800610c <UART_SetConfig+0x230>)
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d102      	bne.n	8005f9c <UART_SetConfig+0xc0>
 8005f96:	2301      	movs	r3, #1
 8005f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f9a:	e032      	b.n	8006002 <UART_SetConfig+0x126>
 8005f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	4b5b      	ldr	r3, [pc, #364]	@ (8006110 <UART_SetConfig+0x234>)
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d102      	bne.n	8005fac <UART_SetConfig+0xd0>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005faa:	e02a      	b.n	8006002 <UART_SetConfig+0x126>
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	4b58      	ldr	r3, [pc, #352]	@ (8006114 <UART_SetConfig+0x238>)
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d102      	bne.n	8005fbc <UART_SetConfig+0xe0>
 8005fb6:	2304      	movs	r3, #4
 8005fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fba:	e022      	b.n	8006002 <UART_SetConfig+0x126>
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b55      	ldr	r3, [pc, #340]	@ (8006118 <UART_SetConfig+0x23c>)
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d102      	bne.n	8005fcc <UART_SetConfig+0xf0>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fca:	e01a      	b.n	8006002 <UART_SetConfig+0x126>
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4b52      	ldr	r3, [pc, #328]	@ (800611c <UART_SetConfig+0x240>)
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d102      	bne.n	8005fdc <UART_SetConfig+0x100>
 8005fd6:	2310      	movs	r3, #16
 8005fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fda:	e012      	b.n	8006002 <UART_SetConfig+0x126>
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8006120 <UART_SetConfig+0x244>)
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d102      	bne.n	8005fec <UART_SetConfig+0x110>
 8005fe6:	2320      	movs	r3, #32
 8005fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fea:	e00a      	b.n	8006002 <UART_SetConfig+0x126>
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b43      	ldr	r3, [pc, #268]	@ (8006100 <UART_SetConfig+0x224>)
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d103      	bne.n	8005ffe <UART_SetConfig+0x122>
 8005ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ffc:	e001      	b.n	8006002 <UART_SetConfig+0x126>
 8005ffe:	2300      	movs	r3, #0
 8006000:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b3e      	ldr	r3, [pc, #248]	@ (8006100 <UART_SetConfig+0x224>)
 8006008:	429a      	cmp	r2, r3
 800600a:	d005      	beq.n	8006018 <UART_SetConfig+0x13c>
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b3d      	ldr	r3, [pc, #244]	@ (8006108 <UART_SetConfig+0x22c>)
 8006012:	429a      	cmp	r2, r3
 8006014:	f040 8088 	bne.w	8006128 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800601a:	2200      	movs	r2, #0
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006020:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006024:	f7fe f9ec 	bl	8004400 <HAL_RCCEx_GetPeriphCLKFreq>
 8006028:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800602a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80eb 	beq.w	8006208 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	4a3b      	ldr	r2, [pc, #236]	@ (8006124 <UART_SetConfig+0x248>)
 8006038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800603c:	461a      	mov	r2, r3
 800603e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006040:	fbb3 f3f2 	udiv	r3, r3, r2
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	4413      	add	r3, r2
 8006050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006052:	429a      	cmp	r2, r3
 8006054:	d305      	bcc.n	8006062 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800605c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800605e:	429a      	cmp	r2, r3
 8006060:	d903      	bls.n	800606a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006068:	e048      	b.n	80060fc <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800606c:	2200      	movs	r2, #0
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	61fa      	str	r2, [r7, #28]
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	4a2b      	ldr	r2, [pc, #172]	@ (8006124 <UART_SetConfig+0x248>)
 8006078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607c:	b29b      	uxth	r3, r3
 800607e:	2200      	movs	r2, #0
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	617a      	str	r2, [r7, #20]
 8006084:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006088:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800608c:	f7fa f90a 	bl	80002a4 <__aeabi_uldivmod>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4610      	mov	r0, r2
 8006096:	4619      	mov	r1, r3
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	020b      	lsls	r3, r1, #8
 80060a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060a6:	0202      	lsls	r2, r0, #8
 80060a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060aa:	6849      	ldr	r1, [r1, #4]
 80060ac:	0849      	lsrs	r1, r1, #1
 80060ae:	2000      	movs	r0, #0
 80060b0:	460c      	mov	r4, r1
 80060b2:	4605      	mov	r5, r0
 80060b4:	eb12 0804 	adds.w	r8, r2, r4
 80060b8:	eb43 0905 	adc.w	r9, r3, r5
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	60bb      	str	r3, [r7, #8]
 80060c4:	60fa      	str	r2, [r7, #12]
 80060c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	f7fa f8e9 	bl	80002a4 <__aeabi_uldivmod>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4613      	mov	r3, r2
 80060d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e0:	d308      	bcc.n	80060f4 <UART_SetConfig+0x218>
 80060e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e8:	d204      	bcs.n	80060f4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	e003      	b.n	80060fc <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80060fa:	e085      	b.n	8006208 <UART_SetConfig+0x32c>
 80060fc:	e084      	b.n	8006208 <UART_SetConfig+0x32c>
 80060fe:	bf00      	nop
 8006100:	44002400 	.word	0x44002400
 8006104:	cfff69f3 	.word	0xcfff69f3
 8006108:	54002400 	.word	0x54002400
 800610c:	40013800 	.word	0x40013800
 8006110:	40004400 	.word	0x40004400
 8006114:	40004800 	.word	0x40004800
 8006118:	40004c00 	.word	0x40004c00
 800611c:	40005000 	.word	0x40005000
 8006120:	40006400 	.word	0x40006400
 8006124:	08007284 	.word	0x08007284
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006130:	d13c      	bne.n	80061ac <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006134:	2200      	movs	r2, #0
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800613e:	f7fe f95f 	bl	8004400 <HAL_RCCEx_GetPeriphCLKFreq>
 8006142:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d05e      	beq.n	8006208 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	4a39      	ldr	r2, [pc, #228]	@ (8006234 <UART_SetConfig+0x358>)
 8006150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006154:	461a      	mov	r2, r3
 8006156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006158:	fbb3 f3f2 	udiv	r3, r3, r2
 800615c:	005a      	lsls	r2, r3, #1
 800615e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	441a      	add	r2, r3
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d916      	bls.n	80061a4 <UART_SetConfig+0x2c8>
 8006176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800617c:	d212      	bcs.n	80061a4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800617e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006180:	b29b      	uxth	r3, r3
 8006182:	f023 030f 	bic.w	r3, r3, #15
 8006186:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	b29b      	uxth	r3, r3
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	b29a      	uxth	r2, r3
 8006194:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006196:	4313      	orrs	r3, r2
 8006198:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80061a0:	60da      	str	r2, [r3, #12]
 80061a2:	e031      	b.n	8006208 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80061aa:	e02d      	b.n	8006208 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80061ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ae:	2200      	movs	r2, #0
 80061b0:	469a      	mov	sl, r3
 80061b2:	4693      	mov	fp, r2
 80061b4:	4650      	mov	r0, sl
 80061b6:	4659      	mov	r1, fp
 80061b8:	f7fe f922 	bl	8004400 <HAL_RCCEx_GetPeriphCLKFreq>
 80061bc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80061be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d021      	beq.n	8006208 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006234 <UART_SetConfig+0x358>)
 80061ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	441a      	add	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	d909      	bls.n	8006202 <UART_SetConfig+0x326>
 80061ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f4:	d205      	bcs.n	8006202 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	e002      	b.n	8006208 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	2201      	movs	r2, #1
 800620c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	2201      	movs	r2, #1
 8006214:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	2200      	movs	r2, #0
 800621c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800621e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006220:	2200      	movs	r2, #0
 8006222:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006224:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006228:	4618      	mov	r0, r3
 800622a:	3750      	adds	r7, #80	@ 0x50
 800622c:	46bd      	mov	sp, r7
 800622e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006232:	bf00      	nop
 8006234:	08007284 	.word	0x08007284

08006238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01a      	beq.n	800634e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006336:	d10a      	bne.n	800634e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b098      	sub	sp, #96	@ 0x60
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800638c:	f7fa ffb0 	bl	80012f0 <HAL_GetTick>
 8006390:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b08      	cmp	r3, #8
 800639e:	d12f      	bne.n	8006400 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063a8:	2200      	movs	r2, #0
 80063aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f88e 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d022      	beq.n	8006400 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e063      	b.n	80064c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b04      	cmp	r3, #4
 800640c:	d149      	bne.n	80064a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800640e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006416:	2200      	movs	r2, #0
 8006418:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f857 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d03c      	beq.n	80064a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	623b      	str	r3, [r7, #32]
   return(result);
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800643c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006446:	633b      	str	r3, [r7, #48]	@ 0x30
 8006448:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800644c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e6      	bne.n	8006428 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	60fb      	str	r3, [r7, #12]
   return(result);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800647a:	61fa      	str	r2, [r7, #28]
 800647c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	617b      	str	r3, [r7, #20]
   return(result);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e012      	b.n	80064c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3758      	adds	r7, #88	@ 0x58
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e0:	e04f      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d04b      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7fa ff01 	bl	80012f0 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e04e      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d037      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b80      	cmp	r3, #128	@ 0x80
 8006516:	d034      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d031      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d110      	bne.n	800654e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2208      	movs	r2, #8
 8006532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f838 	bl	80065aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2208      	movs	r2, #8
 800653e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e029      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800655c:	d111      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f81e 	bl	80065aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e00f      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	429a      	cmp	r2, r3
 800659e:	d0a0      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b095      	sub	sp, #84	@ 0x54
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006608:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800660a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800660e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e3      	bne.n	80065e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d118      	bne.n	8006656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	60bb      	str	r3, [r7, #8]
   return(result);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f023 0310 	bic.w	r3, r3, #16
 8006638:	647b      	str	r3, [r7, #68]	@ 0x44
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6979      	ldr	r1, [r7, #20]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	613b      	str	r3, [r7, #16]
   return(result);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e6      	bne.n	8006624 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800666a:	bf00      	nop
 800666c:	3754      	adds	r7, #84	@ 0x54
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_UARTEx_DisableFifoMode+0x16>
 8006688:	2302      	movs	r3, #2
 800668a:	e027      	b.n	80066dc <HAL_UARTEx_DisableFifoMode+0x66>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2224      	movs	r2, #36	@ 0x24
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0201 	bic.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e02d      	b.n	800675c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2224      	movs	r2, #36	@ 0x24
 800670c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f84f 	bl	80067e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006778:	2302      	movs	r3, #2
 800677a:	e02d      	b.n	80067d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2224      	movs	r2, #36	@ 0x24
 8006788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f811 	bl	80067e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d108      	bne.n	8006802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006800:	e031      	b.n	8006866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006802:	2308      	movs	r3, #8
 8006804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006806:	2308      	movs	r3, #8
 8006808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	0e5b      	lsrs	r3, r3, #25
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	0f5b      	lsrs	r3, r3, #29
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	7b3a      	ldrb	r2, [r7, #12]
 800682e:	4911      	ldr	r1, [pc, #68]	@ (8006874 <UARTEx_SetNbDataToProcess+0x94>)
 8006830:	5c8a      	ldrb	r2, [r1, r2]
 8006832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006836:	7b3a      	ldrb	r2, [r7, #12]
 8006838:	490f      	ldr	r1, [pc, #60]	@ (8006878 <UARTEx_SetNbDataToProcess+0x98>)
 800683a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800683c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006840:	b29a      	uxth	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	7b7a      	ldrb	r2, [r7, #13]
 800684c:	4909      	ldr	r1, [pc, #36]	@ (8006874 <UARTEx_SetNbDataToProcess+0x94>)
 800684e:	5c8a      	ldrb	r2, [r1, r2]
 8006850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006854:	7b7a      	ldrb	r2, [r7, #13]
 8006856:	4908      	ldr	r1, [pc, #32]	@ (8006878 <UARTEx_SetNbDataToProcess+0x98>)
 8006858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800685a:	fb93 f3f2 	sdiv	r3, r3, r2
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	0800729c 	.word	0x0800729c
 8006878:	080072a4 	.word	0x080072a4

0800687c <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006888:	f7fa fd32 	bl	80012f0 <HAL_GetTick>
 800688c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	e0bc      	b.n	8006a14 <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a60      	ldr	r2, [pc, #384]	@ (8006a20 <HAL_XSPI_Init+0x1a4>)
 80068a0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 80b1 	bne.w	8006a14 <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fa fa74 	bl	8000da0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80068b8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa5b 	bl	8006d78 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	4b56      	ldr	r3, [pc, #344]	@ (8006a24 <HAL_XSPI_Init+0x1a8>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68d1      	ldr	r1, [r2, #12]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6912      	ldr	r2, [r2, #16]
 80068d4:	0412      	lsls	r2, r2, #16
 80068d6:	4311      	orrs	r1, r2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6952      	ldr	r2, [r2, #20]
 80068dc:	3a01      	subs	r2, #1
 80068de:	0212      	lsls	r2, r2, #8
 80068e0:	4311      	orrs	r1, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	69d2      	ldr	r2, [r2, #28]
 80068e6:	4311      	orrs	r1, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	430b      	orrs	r3, r1
 80068ee:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006a20 <HAL_XSPI_Init+0x1a4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_XSPI_Init+0x88>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006a28 <HAL_XSPI_Init+0x1ac>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10a      	bne.n	800691a <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f023 0108 	bic.w	r1, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693e:	041a      	lsls	r2, r3, #16
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006950:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	3b01      	subs	r3, #1
 8006962:	021a      	lsls	r2, r3, #8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	2120      	movs	r1, #32
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa0c 	bl	8006d96 <XSPI_WaitFlagStateUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d145      	bne.n	8006a14 <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069bc:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d107      	bne.n	80069fc <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0202 	orr.w	r2, r2, #2
 80069fa:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a04:	d103      	bne.n	8006a0e <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a0c:	e002      	b.n	8006a14 <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	47001400 	.word	0x47001400
 8006a24:	f8e0c0fc 	.word	0xf8e0c0fc
 8006a28:	57001400 	.word	0x57001400

08006a2c <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08a      	sub	sp, #40	@ 0x28
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006a38:	f7fa fc5a 	bl	80012f0 <HAL_GetTick>
 8006a3c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a42:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a48:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d104      	bne.n	8006a5a <HAL_XSPI_Command+0x2e>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a58:	d115      	bne.n	8006a86 <HAL_XSPI_Command+0x5a>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b14      	cmp	r3, #20
 8006a5e:	d107      	bne.n	8006a70 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d00e      	beq.n	8006a86 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d00a      	beq.n	8006a86 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b24      	cmp	r3, #36	@ 0x24
 8006a74:	d15e      	bne.n	8006b34 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d003      	beq.n	8006a86 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d156      	bne.n	8006b34 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2120      	movs	r1, #32
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f980 	bl	8006d96 <XSPI_WaitFlagStateUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006a9a:	7ffb      	ldrb	r3, [r7, #31]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d146      	bne.n	8006b2e <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f9ab 	bl	8006e04 <XSPI_ConfigCmd>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8006ab2:	7ffb      	ldrb	r3, [r7, #31]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d143      	bne.n	8006b40 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10e      	bne.n	8006ade <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2120      	movs	r1, #32
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f963 	bl	8006d96 <XSPI_WaitFlagStateUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006adc:	e030      	b.n	8006b40 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006aec:	e028      	b.n	8006b40 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10b      	bne.n	8006b0e <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afa:	2b24      	cmp	r3, #36	@ 0x24
 8006afc:	d103      	bne.n	8006b06 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2204      	movs	r2, #4
 8006b02:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b04:	e01c      	b.n	8006b40 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2214      	movs	r2, #20
 8006b0a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b0c:	e018      	b.n	8006b40 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d114      	bne.n	8006b40 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1a:	2b14      	cmp	r3, #20
 8006b1c:	d103      	bne.n	8006b26 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2204      	movs	r2, #4
 8006b22:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b24:	e00c      	b.n	8006b40 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2224      	movs	r2, #36	@ 0x24
 8006b2a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b2c:	e008      	b.n	8006b40 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8006b32:	e005      	b.n	8006b40 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2210      	movs	r2, #16
 8006b3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b3e:	e000      	b.n	8006b42 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8006b40:	bf00      	nop
  }

  return status;
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	@ 0x28
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b58:	f7fa fbca 	bl	80012f0 <HAL_GetTick>
 8006b5c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3350      	adds	r3, #80	@ 0x50
 8006b64:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d105      	bne.n	8006b78 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2208      	movs	r2, #8
 8006b74:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b76:	e057      	b.n	8006c28 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d14e      	bne.n	8006c1e <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006ba8:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	2104      	movs	r1, #4
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f8ee 	bl	8006d96 <XSPI_WaitFlagStateUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006bbe:	7ffb      	ldrb	r3, [r7, #31]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d113      	bne.n	8006bec <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bdc:	1e5a      	subs	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1df      	bne.n	8006baa <HAL_XSPI_Transmit+0x5e>
 8006bea:	e000      	b.n	8006bee <HAL_XSPI_Transmit+0xa2>
          break;
 8006bec:	bf00      	nop

      if (status == HAL_OK)
 8006bee:	7ffb      	ldrb	r3, [r7, #31]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d119      	bne.n	8006c28 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f8c9 	bl	8006d96 <XSPI_WaitFlagStateUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10c      	bne.n	8006c28 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2202      	movs	r2, #2
 8006c14:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c1c:	e004      	b.n	8006c28 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2210      	movs	r2, #16
 8006c26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8006c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08c      	sub	sp, #48	@ 0x30
 8006c36:	af02      	add	r7, sp, #8
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c3e:	f7fa fb57 	bl	80012f0 <HAL_GetTick>
 8006c42:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3350      	adds	r3, #80	@ 0x50
 8006c4a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c52:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d106      	bne.n	8006c72 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c70:	e07c      	b.n	8006d6c <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d172      	bne.n	8006d60 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cb0:	d104      	bne.n	8006cbc <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	649a      	str	r2, [r3, #72]	@ 0x48
 8006cba:	e011      	b.n	8006ce0 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006cc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	649a      	str	r2, [r3, #72]	@ 0x48
 8006cd4:	e004      	b.n	8006ce0 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	2106      	movs	r1, #6
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f853 	bl	8006d96 <XSPI_WaitFlagStateUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8006cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d114      	bne.n	8006d28 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d18:	1e5a      	subs	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1dc      	bne.n	8006ce0 <HAL_XSPI_Receive+0xae>
 8006d26:	e000      	b.n	8006d2a <HAL_XSPI_Receive+0xf8>
          break;
 8006d28:	bf00      	nop

      if (status == HAL_OK)
 8006d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d11c      	bne.n	8006d6c <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	2102      	movs	r1, #2
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f82a 	bl	8006d96 <XSPI_WaitFlagStateUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8006d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10d      	bne.n	8006d6c <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2202      	movs	r2, #2
 8006d56:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d5e:	e005      	b.n	8006d6c <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2210      	movs	r2, #16
 8006d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8006d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3728      	adds	r7, #40	@ 0x28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	4613      	mov	r3, r2
 8006da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006da6:	e019      	b.n	8006ddc <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d015      	beq.n	8006ddc <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db0:	f7fa fa9e 	bl	80012f0 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd0:	f043 0201 	orr.w	r2, r3, #1
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e00e      	b.n	8006dfa <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bf14      	ite	ne
 8006dea:	2301      	movne	r3, #1
 8006dec:	2300      	moveq	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d1d7      	bne.n	8006da8 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	@ 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006e20:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d114      	bne.n	8006e72 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006e50:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006e5a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006e64:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e02c      	b.n	8006ecc <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d114      	bne.n	8006ea4 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006e82:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006e8c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e96:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e013      	b.n	8006ecc <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006eac:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006eb6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006ec0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d105      	bne.n	8006eee <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d012      	beq.n	8006f1c <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f0e:	4319      	orrs	r1, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f14:	430b      	orrs	r3, r1
 8006f16:	431a      	orrs	r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 021f 	bic.w	r2, r3, #31
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3a01      	subs	r2, #1
 8006f48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01e      	beq.n	8006f90 <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f5a:	d10a      	bne.n	8006f72 <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8006f6c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006f70:	e00e      	b.n	8006f90 <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d109      	bne.n	8006f90 <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006f8c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8099 	beq.w	80070cc <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d055      	beq.n	800704e <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01e      	beq.n	8006fe8 <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4b68      	ldr	r3, [pc, #416]	@ (8007150 <XSPI_ConfigCmd+0x34c>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	68d1      	ldr	r1, [r2, #12]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	6952      	ldr	r2, [r2, #20]
 8006fba:	4311      	orrs	r1, r2
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	6912      	ldr	r2, [r2, #16]
 8006fc0:	4311      	orrs	r1, r2
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	69d2      	ldr	r2, [r2, #28]
 8006fc6:	4311      	orrs	r1, r2
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fcc:	4311      	orrs	r1, r2
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	6a12      	ldr	r2, [r2, #32]
 8006fd2:	4311      	orrs	r1, r2
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006fd8:	4311      	orrs	r1, r2
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e028      	b.n	800703a <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	68d1      	ldr	r1, [r2, #12]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	6952      	ldr	r2, [r2, #20]
 8006ffc:	4311      	orrs	r1, r2
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	6912      	ldr	r2, [r2, #16]
 8007002:	4311      	orrs	r1, r2
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	69d2      	ldr	r2, [r2, #28]
 8007008:	4311      	orrs	r1, r2
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800700e:	4311      	orrs	r1, r2
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	6a12      	ldr	r2, [r2, #32]
 8007014:	430a      	orrs	r2, r1
 8007016:	431a      	orrs	r2, r3
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007024:	d109      	bne.n	800703a <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800702a:	2b08      	cmp	r3, #8
 800702c:	d105      	bne.n	800703a <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	6992      	ldr	r2, [r2, #24]
 800704a:	649a      	str	r2, [r3, #72]	@ 0x48
 800704c:	e078      	b.n	8007140 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007052:	2b00      	cmp	r3, #0
 8007054:	d017      	beq.n	8007086 <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800705e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	68d1      	ldr	r1, [r2, #12]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	6952      	ldr	r2, [r2, #20]
 800706a:	4311      	orrs	r1, r2
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	6912      	ldr	r2, [r2, #16]
 8007070:	4311      	orrs	r1, r2
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007076:	4311      	orrs	r1, r2
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800707c:	430a      	orrs	r2, r1
 800707e:	431a      	orrs	r2, r3
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e01d      	b.n	80070c2 <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68d9      	ldr	r1, [r3, #12]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4319      	orrs	r1, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	430b      	orrs	r3, r1
 800709e:	431a      	orrs	r2, r3
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070ac:	d109      	bne.n	80070c2 <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d105      	bne.n	80070c2 <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e039      	b.n	8007140 <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d030      	beq.n	8007136 <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d017      	beq.n	800710c <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80070e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	69d1      	ldr	r1, [r2, #28]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070f0:	4311      	orrs	r1, r2
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	6a12      	ldr	r2, [r2, #32]
 80070f6:	4311      	orrs	r1, r2
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80070fc:	4311      	orrs	r1, r2
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007102:	430a      	orrs	r2, r1
 8007104:	431a      	orrs	r2, r3
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	e00e      	b.n	800712a <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	69d9      	ldr	r1, [r3, #28]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	4319      	orrs	r1, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	430b      	orrs	r3, r1
 8007124:	431a      	orrs	r2, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	6992      	ldr	r2, [r2, #24]
 8007132:	649a      	str	r2, [r3, #72]	@ 0x48
 8007134:	e004      	b.n	8007140 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2208      	movs	r2, #8
 800713e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8007140:	7ffb      	ldrb	r3, [r7, #31]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3724      	adds	r7, #36	@ 0x24
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	f0ffc0c0 	.word	0xf0ffc0c0

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <__libc_init_array>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	4d0d      	ldr	r5, [pc, #52]	@ (800719c <__libc_init_array+0x38>)
 8007168:	2600      	movs	r6, #0
 800716a:	4c0d      	ldr	r4, [pc, #52]	@ (80071a0 <__libc_init_array+0x3c>)
 800716c:	1b64      	subs	r4, r4, r5
 800716e:	10a4      	asrs	r4, r4, #2
 8007170:	42a6      	cmp	r6, r4
 8007172:	d109      	bne.n	8007188 <__libc_init_array+0x24>
 8007174:	4d0b      	ldr	r5, [pc, #44]	@ (80071a4 <__libc_init_array+0x40>)
 8007176:	2600      	movs	r6, #0
 8007178:	4c0b      	ldr	r4, [pc, #44]	@ (80071a8 <__libc_init_array+0x44>)
 800717a:	f000 f81f 	bl	80071bc <_init>
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	42a6      	cmp	r6, r4
 8007184:	d105      	bne.n	8007192 <__libc_init_array+0x2e>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	f855 3b04 	ldr.w	r3, [r5], #4
 800718c:	3601      	adds	r6, #1
 800718e:	4798      	blx	r3
 8007190:	e7ee      	b.n	8007170 <__libc_init_array+0xc>
 8007192:	f855 3b04 	ldr.w	r3, [r5], #4
 8007196:	3601      	adds	r6, #1
 8007198:	4798      	blx	r3
 800719a:	e7f2      	b.n	8007182 <__libc_init_array+0x1e>
 800719c:	080072b4 	.word	0x080072b4
 80071a0:	080072b4 	.word	0x080072b4
 80071a4:	080072b4 	.word	0x080072b4
 80071a8:	080072b8 	.word	0x080072b8

080071ac <strcpy>:
 80071ac:	4603      	mov	r3, r0
 80071ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071b2:	f803 2b01 	strb.w	r2, [r3], #1
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	d1f9      	bne.n	80071ae <strcpy+0x2>
 80071ba:	4770      	bx	lr

080071bc <_init>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	bf00      	nop
 80071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c2:	bc08      	pop	{r3}
 80071c4:	469e      	mov	lr, r3
 80071c6:	4770      	bx	lr

080071c8 <_fini>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr
