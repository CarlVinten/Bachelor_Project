
BP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b98  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006dec  08006dec  00007dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e6c  08006e6c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e6c  08006e6c  00007e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e74  08006e74  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e74  08006e74  00007e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e78  08006e78  00007e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006e7c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08006e88  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08006e88  0000811c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001261b  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201c  00000000  00000000  0001a65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0001c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b1  00000000  00000000  0001d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b04a  00000000  00000000  0001dcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100d6  00000000  00000000  00048cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e278  00000000  00000000  00058dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167049  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003488  00000000  00000000  0016708c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0016a514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08006dd4 	.word	0x08006dd4

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08006dd4 	.word	0x08006dd4

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b9b0 	b.w	800061c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	4688      	mov	r8, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	468e      	mov	lr, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d95f      	bls.n	80003aa <__udivmoddi4+0xd6>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	40b4      	lsls	r4, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	ea43 0e0e 	orr.w	lr, r3, lr
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fbbe f1f8 	udiv	r1, lr, r8
 8000312:	fb08 ee11 	mls	lr, r8, r1, lr
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x5e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x5c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 8154 	bhi.w	80005d8 <__udivmoddi4+0x304>
 8000330:	4601      	mov	r1, r0
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b2a2      	uxth	r2, r4
 8000336:	fbb3 f0f8 	udiv	r0, r3, r8
 800033a:	fb08 3310 	mls	r3, r8, r0, r3
 800033e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000346:	4594      	cmp	ip, r2
 8000348:	d90b      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034a:	18ba      	adds	r2, r7, r2
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	bf2c      	ite	cs
 8000352:	2401      	movcs	r4, #1
 8000354:	2400      	movcc	r4, #0
 8000356:	4594      	cmp	ip, r2
 8000358:	d902      	bls.n	8000360 <__udivmoddi4+0x8c>
 800035a:	2c00      	cmp	r4, #0
 800035c:	f000 813f 	beq.w	80005de <__udivmoddi4+0x30a>
 8000360:	4618      	mov	r0, r3
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba2 020c 	sub.w	r2, r2, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f2      	lsrs	r2, r6
 8000370:	2300      	movs	r3, #0
 8000372:	e9c5 2300 	strd	r2, r3, [r5]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14e      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000392:	4543      	cmp	r3, r8
 8000394:	f0c0 8112 	bcc.w	80005bc <__udivmoddi4+0x2e8>
 8000398:	4282      	cmp	r2, r0
 800039a:	f240 810f 	bls.w	80005bc <__udivmoddi4+0x2e8>
 800039e:	4608      	mov	r0, r1
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d0e8      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a8:	e7e5      	b.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	f000 80ac 	beq.w	8000508 <__udivmoddi4+0x234>
 80003b0:	fab2 f682 	clz	r6, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	f040 80bb 	bne.w	8000530 <__udivmoddi4+0x25c>
 80003ba:	1a8b      	subs	r3, r1, r2
 80003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c0:	b2bc      	uxth	r4, r7
 80003c2:	2101      	movs	r1, #1
 80003c4:	0c02      	lsrs	r2, r0, #16
 80003c6:	b280      	uxth	r0, r0
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d4:	fb04 f20c 	mul.w	r2, r4, ip
 80003d8:	429a      	cmp	r2, r3
 80003da:	d90e      	bls.n	80003fa <__udivmoddi4+0x126>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80ec 	beq.w	80005d0 <__udivmoddi4+0x2fc>
 80003f8:	46c4      	mov	ip, r8
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000400:	fb0e 3318 	mls	r3, lr, r8, r3
 8000404:	fb04 f408 	mul.w	r4, r4, r8
 8000408:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800040c:	4294      	cmp	r4, r2
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x154>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295
 8000416:	bf2c      	ite	cs
 8000418:	2001      	movcs	r0, #1
 800041a:	2000      	movcc	r0, #0
 800041c:	4294      	cmp	r4, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x152>
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80d1 	beq.w	80005c8 <__udivmoddi4+0x2f4>
 8000426:	4698      	mov	r8, r3
 8000428:	1b12      	subs	r2, r2, r4
 800042a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa08 f401 	lsl.w	r4, r8, r1
 800043a:	fa00 f901 	lsl.w	r9, r0, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa28 f806 	lsr.w	r8, r8, r6
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f306 	lsr.w	r3, r0, r6
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fbb8 fef0 	udiv	lr, r8, r0
 800045c:	fb00 881e 	mls	r8, r0, lr, r8
 8000460:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000464:	fb0e f80c 	mul.w	r8, lr, ip
 8000468:	45a0      	cmp	r8, r4
 800046a:	d90e      	bls.n	800048a <__udivmoddi4+0x1b6>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000472:	bf2c      	ite	cs
 8000474:	f04f 0b01 	movcs.w	fp, #1
 8000478:	f04f 0b00 	movcc.w	fp, #0
 800047c:	45a0      	cmp	r8, r4
 800047e:	d903      	bls.n	8000488 <__udivmoddi4+0x1b4>
 8000480:	f1bb 0f00 	cmp.w	fp, #0
 8000484:	f000 80b8 	beq.w	80005f8 <__udivmoddi4+0x324>
 8000488:	46d6      	mov	lr, sl
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fa1f f883 	uxth.w	r8, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d90e      	bls.n	80004c4 <__udivmoddi4+0x1f0>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	bf2c      	ite	cs
 80004ae:	f04f 0801 	movcs.w	r8, #1
 80004b2:	f04f 0800 	movcc.w	r8, #0
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d903      	bls.n	80004c2 <__udivmoddi4+0x1ee>
 80004ba:	f1b8 0f00 	cmp.w	r8, #0
 80004be:	f000 809f 	beq.w	8000600 <__udivmoddi4+0x32c>
 80004c2:	4603      	mov	r3, r0
 80004c4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c8:	eba4 040c 	sub.w	r4, r4, ip
 80004cc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d0:	4564      	cmp	r4, ip
 80004d2:	4673      	mov	r3, lr
 80004d4:	46e0      	mov	r8, ip
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0x20a>
 80004d8:	d107      	bne.n	80004ea <__udivmoddi4+0x216>
 80004da:	45f1      	cmp	r9, lr
 80004dc:	d205      	bcs.n	80004ea <__udivmoddi4+0x216>
 80004de:	ebbe 0302 	subs.w	r3, lr, r2
 80004e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e6:	3801      	subs	r0, #1
 80004e8:	46e0      	mov	r8, ip
 80004ea:	b15d      	cbz	r5, 8000504 <__udivmoddi4+0x230>
 80004ec:	ebb9 0203 	subs.w	r2, r9, r3
 80004f0:	eb64 0408 	sbc.w	r4, r4, r8
 80004f4:	fa04 f606 	lsl.w	r6, r4, r6
 80004f8:	fa22 f301 	lsr.w	r3, r2, r1
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e736      	b.n	8000376 <__udivmoddi4+0xa2>
 8000508:	fbb1 fcf2 	udiv	ip, r1, r2
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4614      	mov	r4, r2
 8000510:	b280      	uxth	r0, r0
 8000512:	4696      	mov	lr, r2
 8000514:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000518:	2620      	movs	r6, #32
 800051a:	4690      	mov	r8, r2
 800051c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000520:	4610      	mov	r0, r2
 8000522:	fbb1 f1f2 	udiv	r1, r1, r2
 8000526:	eba3 0308 	sub.w	r3, r3, r8
 800052a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052e:	e74b      	b.n	80003c8 <__udivmoddi4+0xf4>
 8000530:	40b7      	lsls	r7, r6
 8000532:	f1c6 0320 	rsb	r3, r6, #32
 8000536:	fa01 f206 	lsl.w	r2, r1, r6
 800053a:	fa21 f803 	lsr.w	r8, r1, r3
 800053e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000542:	fa20 f303 	lsr.w	r3, r0, r3
 8000546:	b2bc      	uxth	r4, r7
 8000548:	40b0      	lsls	r0, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	0c02      	lsrs	r2, r0, #16
 800054e:	0c19      	lsrs	r1, r3, #16
 8000550:	b280      	uxth	r0, r0
 8000552:	fbb8 f9fe 	udiv	r9, r8, lr
 8000556:	fb0e 8819 	mls	r8, lr, r9, r8
 800055a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	4588      	cmp	r8, r1
 8000564:	d951      	bls.n	800060a <__udivmoddi4+0x336>
 8000566:	1879      	adds	r1, r7, r1
 8000568:	f109 3cff 	add.w	ip, r9, #4294967295
 800056c:	bf2c      	ite	cs
 800056e:	f04f 0a01 	movcs.w	sl, #1
 8000572:	f04f 0a00 	movcc.w	sl, #0
 8000576:	4588      	cmp	r8, r1
 8000578:	d902      	bls.n	8000580 <__udivmoddi4+0x2ac>
 800057a:	f1ba 0f00 	cmp.w	sl, #0
 800057e:	d031      	beq.n	80005e4 <__udivmoddi4+0x310>
 8000580:	eba1 0108 	sub.w	r1, r1, r8
 8000584:	fbb1 f9fe 	udiv	r9, r1, lr
 8000588:	fb09 f804 	mul.w	r8, r9, r4
 800058c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000590:	b29b      	uxth	r3, r3
 8000592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000596:	4543      	cmp	r3, r8
 8000598:	d235      	bcs.n	8000606 <__udivmoddi4+0x332>
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a0:	bf2c      	ite	cs
 80005a2:	f04f 0a01 	movcs.w	sl, #1
 80005a6:	f04f 0a00 	movcc.w	sl, #0
 80005aa:	4543      	cmp	r3, r8
 80005ac:	d2bb      	bcs.n	8000526 <__udivmoddi4+0x252>
 80005ae:	f1ba 0f00 	cmp.w	sl, #0
 80005b2:	d1b8      	bne.n	8000526 <__udivmoddi4+0x252>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e7b4      	b.n	8000526 <__udivmoddi4+0x252>
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb68 0203 	sbc.w	r2, r8, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	4696      	mov	lr, r2
 80005c6:	e6eb      	b.n	80003a0 <__udivmoddi4+0xcc>
 80005c8:	443a      	add	r2, r7
 80005ca:	f1a8 0802 	sub.w	r8, r8, #2
 80005ce:	e72b      	b.n	8000428 <__udivmoddi4+0x154>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	e710      	b.n	80003fa <__udivmoddi4+0x126>
 80005d8:	3902      	subs	r1, #2
 80005da:	443b      	add	r3, r7
 80005dc:	e6a9      	b.n	8000332 <__udivmoddi4+0x5e>
 80005de:	443a      	add	r2, r7
 80005e0:	3802      	subs	r0, #2
 80005e2:	e6be      	b.n	8000362 <__udivmoddi4+0x8e>
 80005e4:	eba7 0808 	sub.w	r8, r7, r8
 80005e8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005ec:	4441      	add	r1, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c9      	b.n	800058c <__udivmoddi4+0x2b8>
 80005f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005fc:	443c      	add	r4, r7
 80005fe:	e744      	b.n	800048a <__udivmoddi4+0x1b6>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e75e      	b.n	80004c4 <__udivmoddi4+0x1f0>
 8000606:	4649      	mov	r1, r9
 8000608:	e78d      	b.n	8000526 <__udivmoddi4+0x252>
 800060a:	eba1 0108 	sub.w	r1, r1, r8
 800060e:	46cc      	mov	ip, r9
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7b8      	b.n	800058c <__udivmoddi4+0x2b8>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fcda 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f842 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f93a 	bl	80008a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 f8ec 	bl	8000810 <MX_USART2_UART_Init>
  MX_OCTOSPI1_Init();
 8000638:	f000 f8ac 	bl	8000794 <MX_OCTOSPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f000 fd8c 	bl	800115c <HAL_Delay>
  uart_print((uint8_t *)"\r\nInitializing\r\n", &huart2);
 8000644:	4915      	ldr	r1, [pc, #84]	@ (800069c <main+0x7c>)
 8000646:	4816      	ldr	r0, [pc, #88]	@ (80006a0 <main+0x80>)
 8000648:	f000 f9b2 	bl	80009b0 <uart_print>

  if(hospi1.State == HAL_XSPI_STATE_READY){
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <main+0x84>)
 800064e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000650:	2b02      	cmp	r3, #2
 8000652:	d104      	bne.n	800065e <main+0x3e>
	  uart_print((uint8_t *)"HAL OK\r\n", &huart2);
 8000654:	4911      	ldr	r1, [pc, #68]	@ (800069c <main+0x7c>)
 8000656:	4814      	ldr	r0, [pc, #80]	@ (80006a8 <main+0x88>)
 8000658:	f000 f9aa 	bl	80009b0 <uart_print>
 800065c:	e003      	b.n	8000666 <main+0x46>
  }else{
	  uart_print((uint8_t *)"HAL NOT OK\r\n", &huart2);
 800065e:	490f      	ldr	r1, [pc, #60]	@ (800069c <main+0x7c>)
 8000660:	4812      	ldr	r0, [pc, #72]	@ (80006ac <main+0x8c>)
 8000662:	f000 f9a5 	bl	80009b0 <uart_print>
  }

  uart_print((uint8_t *) "Reset device\r\n", &huart2);
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <main+0x7c>)
 8000668:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <main+0x90>)
 800066a:	f000 f9a1 	bl	80009b0 <uart_print>
  check_spi_return(reset(&hospi1));
 800066e:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <main+0x84>)
 8000670:	f000 fa17 	bl	8000aa2 <reset>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d004      	beq.n	8000684 <main+0x64>
 800067a:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <main+0x84>)
 800067c:	f000 fa11 	bl	8000aa2 <reset>
 8000680:	4603      	mov	r3, r0
 8000682:	e005      	b.n	8000690 <main+0x70>

  /*uart_print((uint8_t *)"Setting QE bit \r\n", &huart2);
  check_spi_return(set_QE(&hospi1));*/


  uint32_t address = 0x100;
 8000684:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000688:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  while (1)
  {

	  while(1){
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x6c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000690:	4618      	mov	r0, r3
 8000692:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000084 	.word	0x20000084
 80006a0:	08006dec 	.word	0x08006dec
 80006a4:	20000028 	.word	0x20000028
 80006a8:	08006e00 	.word	0x08006e00
 80006ac:	08006e0c 	.word	0x08006e0c
 80006b0:	08006e1c 	.word	0x08006e1c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09c      	sub	sp, #112	@ 0x70
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2250      	movs	r2, #80	@ 0x50
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fb5a 	bl	8006d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <SystemClock_Config+0xd8>)
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	4a2b      	ldr	r2, [pc, #172]	@ (800078c <SystemClock_Config+0xd8>)
 80006e0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006e4:	6113      	str	r3, [r2, #16]
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <SystemClock_Config+0xd8>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f2:	bf00      	nop
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <SystemClock_Config+0xd8>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d1f9      	bne.n	80006f4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800070e:	2303      	movs	r3, #3
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000716:	2328      	movs	r3, #40	@ 0x28
 8000718:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000722:	2302      	movs	r3, #2
 8000724:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000726:	230c      	movs	r3, #12
 8000728:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800072a:	2300      	movs	r3, #0
 800072c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f80e 	bl	8001758 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000742:	f000 f92f 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	231f      	movs	r3, #31
 8000748:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2303      	movs	r3, #3
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2105      	movs	r1, #5
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fc2f 	bl	8001fc8 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000770:	f000 f918 	bl	80009a4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <SystemClock_Config+0xdc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <SystemClock_Config+0xdc>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	3770      	adds	r7, #112	@ 0x70
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	44020800 	.word	0x44020800
 8000790:	40022000 	.word	0x40022000

08000794 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	@ (800080c <MX_OCTOSPI1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 31;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007a0:	221f      	movs	r2, #31
 80007a2:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_64MB;
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007b2:	2216      	movs	r2, #22
 80007b4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_128MB;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007e2:	2218      	movs	r2, #24
 80007e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007e8:	2208      	movs	r2, #8
 80007ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_OCTOSPI1_Init+0x74>)
 80007f4:	f005 ff6c 	bl	80066d0 <HAL_XSPI_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 f8d1 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000028 	.word	0x20000028
 800080c:	47001400 	.word	0x47001400

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 8000816:	4a23      	ldr	r2, [pc, #140]	@ (80008a4 <MX_USART2_UART_Init+0x94>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000858:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800085a:	f005 f97b 	bl	8005b54 <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000864:	f000 f89e 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800086c:	f005 fe66 	bl	800653c <HAL_UARTEx_SetTxFifoThreshold>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000876:	f000 f895 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800087e:	f005 fe9b 	bl	80065b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000888:	f000 f88c 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_USART2_UART_Init+0x90>)
 800088e:	f005 fe1c 	bl	80064ca <HAL_UARTEx_DisableFifoMode>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000898:	f000 f884 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000084 	.word	0x20000084
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b36      	ldr	r3, [pc, #216]	@ (8000998 <MX_GPIO_Init+0xf0>)
 80008c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c4:	4a34      	ldr	r2, [pc, #208]	@ (8000998 <MX_GPIO_Init+0xf0>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <MX_GPIO_Init+0xf0>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <MX_GPIO_Init+0xf0>)
 80008de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000998 <MX_GPIO_Init+0xf0>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <MX_GPIO_Init+0xf0>)
 80008ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <MX_GPIO_Init+0xf0>)
 80008fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000900:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <MX_GPIO_Init+0xf0>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <MX_GPIO_Init+0xf0>)
 800090c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_GPIO_Init+0xf0>)
 800091a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091e:	4a1e      	ldr	r2, [pc, #120]	@ (8000998 <MX_GPIO_Init+0xf0>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_GPIO_Init+0xf0>)
 800092a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	4818      	ldr	r0, [pc, #96]	@ (800099c <MX_GPIO_Init+0xf4>)
 800093c:	f000 fef4 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000940:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4812      	ldr	r0, [pc, #72]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 8000956:	f000 fd89 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0xf4>)
 800096e:	f000 fd7d 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000972:	2320      	movs	r3, #32
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0xf4>)
 800098a:	f000 fd6f 	bl	800146c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	@ 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	44020c00 	.word	0x44020c00
 800099c:	42020000 	.word	0x42020000
 80009a0:	42020800 	.word	0x42020800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <uart_print>:

#include "my_hal.h"



void uart_print(uint8_t *text, UART_HandleTypeDef * husart){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	uint32_t n = strlen((char *)text) > 31 ? 31 : strlen((char *)text);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fc6a 	bl	8000294 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b1f      	cmp	r3, #31
 80009c4:	d804      	bhi.n	80009d0 <uart_print+0x20>
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fc64 	bl	8000294 <strlen>
 80009cc:	4603      	mov	r3, r0
 80009ce:	e000      	b.n	80009d2 <uart_print+0x22>
 80009d0:	231f      	movs	r3, #31
 80009d2:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(husart, text, n, HAL_MAX_DELAY);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f005 f908 	bl	8005bf4 <HAL_UART_Transmit>
	return;
 80009e4:	bf00      	nop
}
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <set_spi_command>:
#include "stm32h5xx_hal_xspi.h"
#include <string.h>

void set_spi_command(XSPI_RegularCmdTypeDef *command_struct, uint32_t instruction, //
					 uint32_t instruction_wires, uint32_t address, uint32_t address_wires, //
					 uint32_t data_wires, uint32_t data_length, uint32_t dummy_cycles){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	603b      	str	r3, [r7, #0]
	command_struct->OperationType         = HAL_XSPI_OPTYPE_COMMON_CFG; 		// Constant.
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
	command_struct->IOSelect 		      = HAL_XSPI_SELECT_IO_3_0;				// Constant. Always the same pins
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
	command_struct->Instruction	          = instruction;						// Not constant.
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	609a      	str	r2, [r3, #8]
	// Use defined instructions
	command_struct->InstructionMode	      = instruction_wires;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]
	// Not constant. Number of wires for transferring instructions.
	command_struct->InstructionWidth 	  = HAL_XSPI_INSTRUCTION_8_BITS;		// Constant - always 1 byte
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
	command_struct->InstructionDTRMode    = HAL_XSPI_INSTRUCTION_DTR_DISABLE;	// Constant - DTR = Double transfer rate
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
	command_struct->Address 			  = address;							// Not constant
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	619a      	str	r2, [r3, #24]
	// Between 0x00 and 0xFFFFFFFF.
	command_struct->AddressMode           = address_wires;						// Not constant
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	61da      	str	r2, [r3, #28]
	// Number of wires for sending the address.
	command_struct->AddressWidth          = HAL_XSPI_ADDRESS_24_BITS;		// constant
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a30:	621a      	str	r2, [r3, #32]
	command_struct->AddressDTRMode        = HAL_XSPI_ADDRESS_DTR_DISABLE;		// Constant - IDK
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
	command_struct->AlternateBytes        = 0x00;							    // I don't what alternate bytes are but it isn't used in the flash
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
	command_struct->AlternateBytesMode    = HAL_XSPI_ALT_BYTES_NONE;			// ---
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2200      	movs	r2, #0
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
	command_struct->AlternateBytesWidth   = HAL_XSPI_ALT_BYTES_32_BITS;			// ---
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000a4a:	631a      	str	r2, [r3, #48]	@ 0x30
	command_struct->AlternateBytesDTRMode = HAL_XSPI_ALT_BYTES_DTR_DISABLE;		// ---
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
	command_struct->DataMode 			  = data_wires;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	639a      	str	r2, [r3, #56]	@ 0x38
	// Number of wires for sending and receiving data. 
    command_struct->DataLength 		      = data_length;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	6a3a      	ldr	r2, [r7, #32]
 8000a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Length in bytes
	command_struct->DataDTRMode 		  = HAL_XSPI_DATA_DTR_DISABLE;			// Constant
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	641a      	str	r2, [r3, #64]	@ 0x40
	command_struct->DummyCycles 		  = dummy_cycles;						// Not constant
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a68:	645a      	str	r2, [r3, #68]	@ 0x44
	// Enter number of dummy cycles.
	command_struct->DQSMode 			  = HAL_XSPI_DQS_DISABLE;				// Constant - IDK
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	649a      	str	r2, [r3, #72]	@ 0x48
	command_struct->SIOOMode 			  = HAL_XSPI_SIOO_INST_EVERY_CMD;		// Constant - IDK
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2200      	movs	r2, #0
 8000a74:	64da      	str	r2, [r3, #76]	@ 0x4c

	if (instruction == 0xBB) {
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2bbb      	cmp	r3, #187	@ 0xbb
 8000a7a:	d10c      	bne.n	8000a96 <set_spi_command+0xaa>
		command_struct->AlternateBytes        = 0x00;							    // I don't what alternate bytes are but it isn't used in the flash
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
		command_struct->AlternateBytesMode    = HAL_XSPI_ALT_BYTES_2_LINES;			// ---
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a88:	62da      	str	r2, [r3, #44]	@ 0x2c
		command_struct->AlternateBytesWidth   = HAL_XSPI_ALT_BYTES_8_BITS;			// ---
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	631a      	str	r2, [r3, #48]	@ 0x30
		command_struct->AlternateBytesDTRMode = HAL_XSPI_ALT_BYTES_DTR_DISABLE;		// ---
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2200      	movs	r2, #0
 8000a94:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <reset>:
	set_spi_command(&spi_command, MY_PP, INST_1_WIRE, 0x00, ADDR_1_WIRE, DATA_1_WIRE, PAGE_SIZE - 1, 0);
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
	return HAL_XSPI_Transmit(octo_spi_handle,  empty_buffer, ONE_MINUTE);
}

HAL_StatusTypeDef reset(XSPI_HandleTypeDef *octo_spi_handle){
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b09a      	sub	sp, #104	@ 0x68
 8000aa6:	af04      	add	r7, sp, #16
 8000aa8:	6078      	str	r0, [r7, #4]
	XSPI_RegularCmdTypeDef spi_command;
	set_spi_command(&spi_command, MY_RSTEN, INST_1_WIRE, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000aaa:	f107 0008 	add.w	r0, r7, #8
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9303      	str	r3, [sp, #12]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9302      	str	r3, [sp, #8]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2166      	movs	r1, #102	@ 0x66
 8000ac4:	f7ff ff92 	bl	80009ec <set_spi_command>
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f005 fed4 	bl	8006880 <HAL_XSPI_Command>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <reset+0x50>
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f005 fec9 	bl	8006880 <HAL_XSPI_Command>
 8000aee:	4603      	mov	r3, r0
 8000af0:	e05f      	b.n	8000bb2 <reset+0x110>
	set_spi_command(&spi_command, MY_RST, INST_1_WIRE, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000af2:	f107 0008 	add.w	r0, r7, #8
 8000af6:	2300      	movs	r3, #0
 8000af8:	9303      	str	r3, [sp, #12]
 8000afa:	2300      	movs	r3, #0
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2300      	movs	r3, #0
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2300      	movs	r3, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2199      	movs	r1, #153	@ 0x99
 8000b0c:	f7ff ff6e 	bl	80009ec <set_spi_command>
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b18:	4619      	mov	r1, r3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f005 feb0 	bl	8006880 <HAL_XSPI_Command>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d009      	beq.n	8000b3a <reset+0x98>
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b2e:	4619      	mov	r1, r3
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f005 fea5 	bl	8006880 <HAL_XSPI_Command>
 8000b36:	4603      	mov	r3, r0
 8000b38:	e03b      	b.n	8000bb2 <reset+0x110>
	set_spi_command(&spi_command, MY_RSTEN, INST_4_WIRES, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000b3a:	f107 0008 	add.w	r0, r7, #8
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9303      	str	r3, [sp, #12]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2300      	movs	r3, #0
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2203      	movs	r2, #3
 8000b52:	2166      	movs	r1, #102	@ 0x66
 8000b54:	f7ff ff4a 	bl	80009ec <set_spi_command>
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f005 fe8c 	bl	8006880 <HAL_XSPI_Command>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d009      	beq.n	8000b82 <reset+0xe0>
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f005 fe81 	bl	8006880 <HAL_XSPI_Command>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	e017      	b.n	8000bb2 <reset+0x110>
	set_spi_command(&spi_command, MY_RST, INST_4_WIRES, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000b82:	f107 0008 	add.w	r0, r7, #8
 8000b86:	2300      	movs	r3, #0
 8000b88:	9303      	str	r3, [sp, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	2300      	movs	r3, #0
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2300      	movs	r3, #0
 8000b98:	2203      	movs	r2, #3
 8000b9a:	2199      	movs	r1, #153	@ 0x99
 8000b9c:	f7ff ff26 	bl	80009ec <set_spi_command>
	return HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f005 fe68 	bl	8006880 <HAL_XSPI_Command>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3758      	adds	r7, #88	@ 0x58
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0c0      	sub	sp, #256	@ 0x100
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	22d0      	movs	r2, #208	@ 0xd0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 f8c7 	bl	8006d7c <memset>
  if(hxspi->Instance==OCTOSPI1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a57      	ldr	r2, [pc, #348]	@ (8000d50 <HAL_XSPI_MspInit+0x188>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	f040 80a5 	bne.w	8000d44 <HAL_XSPI_MspInit+0x17c>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0302 	mov.w	r3, #2
 8000c02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSE;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2N = 48;
 8000c0e:	2330      	movs	r3, #48	@ 0x30
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 10;
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8000c2a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c2e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2R;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fd06 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_XSPI_MspInit+0x82>
    {
      Error_Handler();
 8000c46:	f7ff fead 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000c4a:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c50:	4a40      	ldr	r2, [pc, #256]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b3a      	ldr	r3, [pc, #232]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c6e:	4a39      	ldr	r2, [pc, #228]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c78:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b33      	ldr	r3, [pc, #204]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8c:	4a31      	ldr	r2, [pc, #196]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c96:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000caa:	4a2a      	ldr	r2, [pc, #168]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <HAL_XSPI_MspInit+0x18c>)
 8000cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> OCTOSPI1_IO3
    PB2     ------> OCTOSPI1_CLK
    PB10     ------> OCTOSPI1_NCS
    PC10     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8000cc2:	f240 430c 	movw	r3, #1036	@ 0x40c
 8000cc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000cdc:	2309      	movs	r3, #9
 8000cde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481b      	ldr	r0, [pc, #108]	@ (8000d58 <HAL_XSPI_MspInit+0x190>)
 8000cea:	f000 fbbf 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000d06:	2309      	movs	r3, #9
 8000d08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d10:	4619      	mov	r1, r3
 8000d12:	4812      	ldr	r0, [pc, #72]	@ (8000d5c <HAL_XSPI_MspInit+0x194>)
 8000d14:	f000 fbaa 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000d18:	f240 4304 	movw	r3, #1028	@ 0x404
 8000d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000d32:	2309      	movs	r3, #9
 8000d34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <HAL_XSPI_MspInit+0x198>)
 8000d40:	f000 fb94 	bl	800146c <HAL_GPIO_Init>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8000d44:	bf00      	nop
 8000d46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	47001400 	.word	0x47001400
 8000d54:	44020c00 	.word	0x44020c00
 8000d58:	42020800 	.word	0x42020800
 8000d5c:	42020000 	.word	0x42020000
 8000d60:	42020400 	.word	0x42020400

08000d64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0be      	sub	sp, #248	@ 0xf8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	22d0      	movs	r2, #208	@ 0xd0
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 fff9 	bl	8006d7c <memset>
  if(huart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d144      	bne.n	8000e1e <HAL_UART_MspInit+0xba>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	f04f 0202 	mov.w	r2, #2
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fc4f 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000db4:	f7ff fdf6 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ddc:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df4:	230c      	movs	r3, #12
 8000df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <HAL_UART_MspInit+0xcc>)
 8000e1a:	f000 fb27 	bl	800146c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	37f8      	adds	r7, #248	@ 0xf8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	44020c00 	.word	0x44020c00
 8000e30:	42020000 	.word	0x42020000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <NMI_Handler+0x4>

08000e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8a:	f000 f947 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e9a:	4b35      	ldr	r3, [pc, #212]	@ (8000f70 <SystemInit+0xdc>)
 8000e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea0:	4a33      	ldr	r2, [pc, #204]	@ (8000f70 <SystemInit+0xdc>)
 8000ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000eaa:	4b32      	ldr	r3, [pc, #200]	@ (8000f74 <SystemInit+0xe0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <SystemInit+0xe0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <SystemInit+0xe0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <SystemInit+0xe0>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	492c      	ldr	r1, [pc, #176]	@ (8000f74 <SystemInit+0xe0>)
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <SystemInit+0xe4>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <SystemInit+0xe0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <SystemInit+0xe0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <SystemInit+0xe0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <SystemInit+0xe0>)
 8000edc:	4a27      	ldr	r2, [pc, #156]	@ (8000f7c <SystemInit+0xe8>)
 8000ede:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <SystemInit+0xe0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <SystemInit+0xe0>)
 8000ee8:	4a24      	ldr	r2, [pc, #144]	@ (8000f7c <SystemInit+0xe8>)
 8000eea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000eec:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <SystemInit+0xe0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <SystemInit+0xe0>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <SystemInit+0xe8>)
 8000ef6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <SystemInit+0xe0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <SystemInit+0xe0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <SystemInit+0xe0>)
 8000f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <SystemInit+0xe0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <SystemInit+0xdc>)
 8000f12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f16:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <SystemInit+0xec>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000f20:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000f28:	d003      	beq.n	8000f32 <SystemInit+0x9e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000f30:	d117      	bne.n	8000f62 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <SystemInit+0xec>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <SystemInit+0xec>)
 8000f40:	4a10      	ldr	r2, [pc, #64]	@ (8000f84 <SystemInit+0xf0>)
 8000f42:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <SystemInit+0xec>)
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <SystemInit+0xf4>)
 8000f48:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <SystemInit+0xec>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f80 <SystemInit+0xec>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <SystemInit+0xec>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <SystemInit+0xec>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	61d3      	str	r3, [r2, #28]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	44020c00 	.word	0x44020c00
 8000f78:	eae2eae3 	.word	0xeae2eae3
 8000f7c:	01010280 	.word	0x01010280
 8000f80:	40022000 	.word	0x40022000
 8000f84:	08192a3b 	.word	0x08192a3b
 8000f88:	4c5d6e7f 	.word	0x4c5d6e7f

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f90:	f7ff ff80 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fba:	f005 fee7 	bl	8006d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fb2f 	bl	8000620 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd0:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fd8:	2000011c 	.word	0x2000011c

08000fdc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f96c 	bl	80012c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000fea:	f001 f9a5 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_Init+0x44>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	490b      	ldr	r1, [pc, #44]	@ (8001028 <HAL_Init+0x48>)
 8000ffa:	5ccb      	ldrb	r3, [r1, r3]
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_Init+0x4c>)
 8001002:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001004:	2004      	movs	r0, #4
 8001006:	f000 f9a3 	bl	8001350 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f810 	bl	8001030 <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e002      	b.n	8001020 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800101a:	f7ff fdce 	bl	8000bba <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	bd80      	pop	{r7, pc}
 8001024:	44020c00 	.word	0x44020c00
 8001028:	08006e2c 	.word	0x08006e2c
 800102c:	20000000 	.word	0x20000000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800103c:	4b33      	ldr	r3, [pc, #204]	@ (800110c <HAL_InitTick+0xdc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e05c      	b.n	8001102 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001048:	4b31      	ldr	r3, [pc, #196]	@ (8001110 <HAL_InitTick+0xe0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b04      	cmp	r3, #4
 8001052:	d10c      	bne.n	800106e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001054:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <HAL_InitTick+0xe4>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <HAL_InitTick+0xdc>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e037      	b.n	80010de <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800106e:	f000 f9c7 	bl	8001400 <HAL_SYSTICK_GetCLKSourceConfig>
 8001072:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d023      	beq.n	80010c2 <HAL_InitTick+0x92>
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d82d      	bhi.n	80010dc <HAL_InitTick+0xac>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_InitTick+0x5e>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00d      	beq.n	80010a8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800108c:	e026      	b.n	80010dc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <HAL_InitTick+0xe4>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <HAL_InitTick+0xdc>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800109c:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a4:	60fb      	str	r3, [r7, #12]
        break;
 80010a6:	e01a      	b.n	80010de <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_InitTick+0xdc>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80010b6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	60fb      	str	r3, [r7, #12]
        break;
 80010c0:	e00d      	b.n	80010de <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_InitTick+0xdc>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80010d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d8:	60fb      	str	r3, [r7, #12]
        break;
 80010da:	e000      	b.n	80010de <HAL_InitTick+0xae>
        break;
 80010dc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f914 	bl	800130c <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e009      	b.n	8001102 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ee:	2200      	movs	r2, #0
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295
 80010f6:	f000 f8ef 	bl	80012d8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80010fa:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_InitTick+0xe8>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	e000e010 	.word	0xe000e010
 8001114:	20000000 	.word	0x20000000
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	20000118 	.word	0x20000118

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000118 	.word	0x20000118

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff6a 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e6:	f7ff ff81 	bl	80011ec <__NVIC_GetPriorityGrouping>
 80012ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	6978      	ldr	r0, [r7, #20]
 80012f2:	f7ff ffb3 	bl	800125c <NVIC_EncodePriority>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff82 	bl	8001208 <__NVIC_SetPriority>
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800131c:	d301      	bcc.n	8001322 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800131e:	2301      	movs	r3, #1
 8001320:	e00d      	b.n	800133e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_SYSTICK_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_SYSTICK_Config+0x40>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_SYSTICK_Config+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a05      	ldr	r2, [pc, #20]	@ (800134c <HAL_SYSTICK_Config+0x40>)
 8001336:	f043 0303 	orr.w	r3, r3, #3
 800133a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d844      	bhi.n	80013e8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800135e:	a201      	add	r2, pc, #4	@ (adr r2, 8001364 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001387 	.word	0x08001387
 8001368:	080013a5 	.word	0x080013a5
 800136c:	080013c7 	.word	0x080013c7
 8001370:	080013e9 	.word	0x080013e9
 8001374:	08001379 	.word	0x08001379
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6013      	str	r3, [r2, #0]
      break;
 8001384:	e031      	b.n	80013ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001394:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001398:	4a18      	ldr	r2, [pc, #96]	@ (80013fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800139a:	f023 030c 	bic.w	r3, r3, #12
 800139e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013a2:	e022      	b.n	80013ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013aa:	f023 0304 	bic.w	r3, r3, #4
 80013ae:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80013b6:	f023 030c 	bic.w	r3, r3, #12
 80013ba:	4a10      	ldr	r2, [pc, #64]	@ (80013fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013c4:	e011      	b.n	80013ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80013d8:	f023 030c 	bic.w	r3, r3, #12
 80013dc:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80013e6:	e000      	b.n	80013ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80013e8:	bf00      	nop
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010
 80013fc:	44020c00 	.word	0x44020c00

08001400 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001412:	2304      	movs	r3, #4
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	e01e      	b.n	8001456 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800141a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b08      	cmp	r3, #8
 8001428:	d00f      	beq.n	800144a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d80f      	bhi.n	8001450 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d003      	beq.n	8001444 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800143c:	e008      	b.n	8001450 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
        break;
 8001442:	e008      	b.n	8001456 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001444:	2301      	movs	r3, #1
 8001446:	607b      	str	r3, [r7, #4]
        break;
 8001448:	e005      	b.n	8001456 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800144a:	2302      	movs	r3, #2
 800144c:	607b      	str	r3, [r7, #4]
        break;
 800144e:	e002      	b.n	8001456 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
        break;
 8001454:	bf00      	nop
    }
  }
  return systick_source;
 8001456:	687b      	ldr	r3, [r7, #4]
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e010 	.word	0xe000e010
 8001468:	44020c00 	.word	0x44020c00

0800146c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800147a:	e142      	b.n	8001702 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8134 	beq.w	80016fc <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x38>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	d125      	bne.n	80014f0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f003 020f 	and.w	r2, r3, #15
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4313      	orrs	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0203 	and.w	r2, r3, #3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4313      	orrs	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d00b      	beq.n	8001544 <HAL_GPIO_Init+0xd8>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001538:	2b11      	cmp	r3, #17
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b12      	cmp	r3, #18
 8001542:	d130      	bne.n	80015a6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157a:	2201      	movs	r2, #1
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	4013      	ands	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 0201 	and.w	r2, r3, #1
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d109      	bne.n	80015c6 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d11b      	bne.n	80015f6 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d017      	beq.n	80015f6 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	4013      	ands	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d07c      	beq.n	80016fc <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001602:	4a47      	ldr	r2, [pc, #284]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3318      	adds	r3, #24
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4013      	ands	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0a9a      	lsrs	r2, r3, #10
 800162a:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 800162c:	4013      	ands	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	4093      	lsls	r3, r2
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4313      	orrs	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800163e:	4938      	ldr	r1, [pc, #224]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3318      	adds	r3, #24
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800164c:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001670:	4a2b      	ldr	r2, [pc, #172]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001676:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4013      	ands	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800169a:	4a21      	ldr	r2, [pc, #132]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 80016a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4013      	ands	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80016c6:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80016ce:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 80016d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4013      	ands	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80016f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	3301      	adds	r3, #1
 8001700:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	f47f aeb5 	bne.w	800147c <HAL_GPIO_Init+0x10>
  }
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	44022000 	.word	0x44022000
 8001724:	002f7f7f 	.word	0x002f7f7f

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001744:	e002      	b.n	800174c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f000 bc28 	b.w	8001fbc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176c:	4b94      	ldr	r3, [pc, #592]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f003 0318 	and.w	r3, r3, #24
 8001774:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001776:	4b92      	ldr	r3, [pc, #584]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	d05b      	beq.n	8001844 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b08      	cmp	r3, #8
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x46>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b18      	cmp	r3, #24
 8001796:	d114      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d111      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f000 bc08 	b.w	8001fbc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80017ac:	4b84      	ldr	r3, [pc, #528]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	4981      	ldr	r1, [pc, #516]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80017c0:	e040      	b.n	8001844 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d023      	beq.n	8001812 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017ca:	4b7d      	ldr	r3, [pc, #500]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7c      	ldr	r2, [pc, #496]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fcb5 	bl	8001144 <HAL_GetTick>
 80017da:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80017de:	f7ff fcb1 	bl	8001144 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e3e5      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017f0:	4b73      	ldr	r3, [pc, #460]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80017fc:	4b70      	ldr	r3, [pc, #448]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	496d      	ldr	r1, [pc, #436]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800180c:	4313      	orrs	r3, r2
 800180e:	618b      	str	r3, [r1, #24]
 8001810:	e018      	b.n	8001844 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001812:	4b6b      	ldr	r3, [pc, #428]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6a      	ldr	r2, [pc, #424]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fc91 	bl	8001144 <HAL_GetTick>
 8001822:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001826:	f7ff fc8d 	bl	8001144 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e3c1      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001838:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a0 	beq.w	8001992 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	2b10      	cmp	r3, #16
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x10c>
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	2b18      	cmp	r3, #24
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f040 8092 	bne.w	8001992 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e3a4      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x132>
 800187c:	4b50      	ldr	r3, [pc, #320]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a4f      	ldr	r2, [pc, #316]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e058      	b.n	800193c <HAL_RCC_OscConfig+0x1e4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d112      	bne.n	80018b8 <HAL_RCC_OscConfig+0x160>
 8001892:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a4a      	ldr	r2, [pc, #296]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a47      	ldr	r2, [pc, #284]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a44      	ldr	r2, [pc, #272]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e041      	b.n	800193c <HAL_RCC_OscConfig+0x1e4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c0:	d112      	bne.n	80018e8 <HAL_RCC_OscConfig+0x190>
 80018c2:	4b3f      	ldr	r3, [pc, #252]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3e      	ldr	r2, [pc, #248]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a3b      	ldr	r2, [pc, #236]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a38      	ldr	r2, [pc, #224]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e029      	b.n	800193c <HAL_RCC_OscConfig+0x1e4>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80018f0:	d112      	bne.n	8001918 <HAL_RCC_OscConfig+0x1c0>
 80018f2:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a32      	ldr	r2, [pc, #200]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2f      	ldr	r2, [pc, #188]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001904:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2c      	ldr	r2, [pc, #176]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e011      	b.n	800193c <HAL_RCC_OscConfig+0x1e4>
 8001918:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a25      	ldr	r2, [pc, #148]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a22      	ldr	r2, [pc, #136]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001936:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800193a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fbfe 	bl	8001144 <HAL_GetTick>
 8001948:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800194c:	f7ff fbfa 	bl	8001144 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e32e      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x1f4>
 800196a:	e012      	b.n	8001992 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fbea 	bl	8001144 <HAL_GetTick>
 8001970:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001974:	f7ff fbe6 	bl	8001144 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e31a      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <HAL_RCC_OscConfig+0x268>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 809a 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x25a>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b18      	cmp	r3, #24
 80019aa:	d149      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d146      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d104      	bne.n	80019c4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e2fe      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
 80019be:	bf00      	nop
 80019c0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80019ca:	4b9a      	ldr	r3, [pc, #616]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0218 	and.w	r2, r3, #24
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d014      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80019da:	4b96      	ldr	r3, [pc, #600]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 0218 	bic.w	r2, r3, #24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	4993      	ldr	r1, [pc, #588]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80019ec:	f000 fdd0 	bl	8002590 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019f0:	4b91      	ldr	r3, [pc, #580]	@ (8001c38 <HAL_RCC_OscConfig+0x4e0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fb1b 	bl	8001030 <HAL_InitTick>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e2db      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb9e 	bl	8001144 <HAL_GetTick>
 8001a08:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fb9a 	bl	8001144 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2ce      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1e:	4b85      	ldr	r3, [pc, #532]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a2a:	4b82      	ldr	r3, [pc, #520]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	497e      	ldr	r1, [pc, #504]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a3e:	e049      	b.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d02c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a48:	4b7a      	ldr	r3, [pc, #488]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 0218 	bic.w	r2, r3, #24
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	4977      	ldr	r1, [pc, #476]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001a5a:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a75      	ldr	r2, [pc, #468]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff fb6d 	bl	8001144 <HAL_GetTick>
 8001a6a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a6e:	f7ff fb69 	bl	8001144 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e29d      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a80:	4b6c      	ldr	r3, [pc, #432]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a8c:	4b69      	ldr	r3, [pc, #420]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	4966      	ldr	r1, [pc, #408]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	610b      	str	r3, [r1, #16]
 8001aa0:	e018      	b.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa2:	4b64      	ldr	r3, [pc, #400]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a63      	ldr	r2, [pc, #396]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fb49 	bl	8001144 <HAL_GetTick>
 8001ab2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fb45 	bl	8001144 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e279      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d03c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae8:	4b52      	ldr	r3, [pc, #328]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aee:	4a51      	ldr	r2, [pc, #324]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001af0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff fb24 	bl	8001144 <HAL_GetTick>
 8001afc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fb20 	bl	8001144 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e254      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b12:	4b48      	ldr	r3, [pc, #288]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ef      	beq.n	8001b00 <HAL_RCC_OscConfig+0x3a8>
 8001b20:	e01b      	b.n	8001b5a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b22:	4b44      	ldr	r3, [pc, #272]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b28:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001b2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff fb07 	bl	8001144 <HAL_GetTick>
 8001b36:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fb03 	bl	8001144 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e237      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b4c:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ef      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80d2 	beq.w	8001d0c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_RCC_OscConfig+0x4e4>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d118      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <HAL_RCC_OscConfig+0x4e4>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	4a30      	ldr	r2, [pc, #192]	@ (8001c3c <HAL_RCC_OscConfig+0x4e4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fae0 	bl	8001144 <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b88:	f7ff fadc 	bl	8001144 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e210      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b9a:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_RCC_OscConfig+0x4e4>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x468>
 8001bae:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bbe:	e074      	b.n	8001caa <HAL_RCC_OscConfig+0x552>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d118      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4a2>
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bce:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bde:	4a15      	ldr	r2, [pc, #84]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001be4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bee:	4a11      	ldr	r2, [pc, #68]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bf8:	e057      	b.n	8001caa <HAL_RCC_OscConfig+0x552>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d11e      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4e8>
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c08:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c18:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c28:	4a02      	ldr	r2, [pc, #8]	@ (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c32:	e03a      	b.n	8001caa <HAL_RCC_OscConfig+0x552>
 8001c34:	44020c00 	.word	0x44020c00
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	44020800 	.word	0x44020800
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b85      	cmp	r3, #133	@ 0x85
 8001c46:	d118      	bne.n	8001c7a <HAL_RCC_OscConfig+0x522>
 8001c48:	4ba2      	ldr	r3, [pc, #648]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c4e:	4aa1      	ldr	r2, [pc, #644]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c58:	4b9e      	ldr	r3, [pc, #632]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c5e:	4a9d      	ldr	r2, [pc, #628]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c68:	4b9a      	ldr	r3, [pc, #616]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c6e:	4a99      	ldr	r2, [pc, #612]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c78:	e017      	b.n	8001caa <HAL_RCC_OscConfig+0x552>
 8001c7a:	4b96      	ldr	r3, [pc, #600]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c80:	4a94      	ldr	r2, [pc, #592]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c8a:	4b92      	ldr	r3, [pc, #584]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c90:	4a90      	ldr	r2, [pc, #576]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c9a:	4b8e      	ldr	r3, [pc, #568]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ca0:	4a8c      	ldr	r2, [pc, #560]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fa47 	bl	8001144 <HAL_GetTick>
 8001cb6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff fa43 	bl	8001144 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e175      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd0:	4b80      	ldr	r3, [pc, #512]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ed      	beq.n	8001cba <HAL_RCC_OscConfig+0x562>
 8001cde:	e015      	b.n	8001d0c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fa30 	bl	8001144 <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fa2c 	bl	8001144 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e15e      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cfe:	4b75      	ldr	r3, [pc, #468]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ed      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d036      	beq.n	8001d86 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d019      	beq.n	8001d54 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d20:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6b      	ldr	r2, [pc, #428]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001d26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fa0a 	bl	8001144 <HAL_GetTick>
 8001d30:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d34:	f7ff fa06 	bl	8001144 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e13a      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d46:	4b63      	ldr	r3, [pc, #396]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x5dc>
 8001d52:	e018      	b.n	8001d86 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d54:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001d5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f9f0 	bl	8001144 <HAL_GetTick>
 8001d64:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d68:	f7ff f9ec 	bl	8001144 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e120      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d7a:	4b56      	ldr	r3, [pc, #344]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8115 	beq.w	8001fba <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b18      	cmp	r3, #24
 8001d94:	f000 80af 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	f040 8086 	bne.w	8001eae <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001da2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001da8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7ff f9c9 	bl	8001144 <HAL_GetTick>
 8001db2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001db6:	f7ff f9c5 	bl	8001144 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0f9      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001dc8:	4b42      	ldr	r3, [pc, #264]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ddc:	f023 0303 	bic.w	r3, r3, #3
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001de8:	0212      	lsls	r2, r2, #8
 8001dea:	430a      	orrs	r2, r1
 8001dec:	4939      	ldr	r1, [pc, #228]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	628b      	str	r3, [r1, #40]	@ 0x28
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e00:	3b01      	subs	r3, #1
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e22:	492c      	ldr	r1, [pc, #176]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	4a29      	ldr	r2, [pc, #164]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e2e:	f023 0310 	bic.w	r3, r3, #16
 8001e32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	4a26      	ldr	r2, [pc, #152]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001e4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	f023 020c 	bic.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	491f      	ldr	r1, [pc, #124]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f023 0220 	bic.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	491a      	ldr	r1, [pc, #104]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001e7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001e80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f95d 	bl	8001144 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f959 	bl	8001144 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e08d      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x736>
 8001eac:	e085      	b.n	8001fba <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <HAL_RCC_OscConfig+0x77c>)
 8001eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff f943 	bl	8001144 <HAL_GetTick>
 8001ebe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f93f 	bl	8001144 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d903      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e073      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
 8001ed4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ee4:	4b37      	ldr	r3, [pc, #220]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	4a36      	ldr	r2, [pc, #216]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001eea:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	6293      	str	r3, [r2, #40]	@ 0x28
 8001ef4:	e061      	b.n	8001fba <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ef6:	4b33      	ldr	r3, [pc, #204]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001efc:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f00:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d031      	beq.n	8001f6e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d12a      	bne.n	8001f6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d122      	bne.n	8001f6e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f32:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d11a      	bne.n	8001f6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d111      	bne.n	8001f6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f56:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d108      	bne.n	8001f6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0e1b      	lsrs	r3, r3, #24
 8001f60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e024      	b.n	8001fbc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d01a      	beq.n	8001fba <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f84:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001f8a:	f023 0310 	bic.w	r3, r3, #16
 8001f8e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f8d8 	bl	8001144 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001f96:	bf00      	nop
 8001f98:	f7ff f8d4 	bl	8001144 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d0f9      	beq.n	8001f98 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <HAL_RCC_OscConfig+0x86c>)
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	44020c00 	.word	0x44020c00

08001fc8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e19e      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b83      	ldr	r3, [pc, #524]	@ (80021ec <HAL_RCC_ClockConfig+0x224>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b80      	ldr	r3, [pc, #512]	@ (80021ec <HAL_RCC_ClockConfig+0x224>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 020f 	bic.w	r2, r3, #15
 8001ff2:	497e      	ldr	r1, [pc, #504]	@ (80021ec <HAL_RCC_ClockConfig+0x224>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <HAL_RCC_ClockConfig+0x224>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e186      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002026:	429a      	cmp	r2, r3
 8002028:	d909      	bls.n	800203e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800202a:	4b71      	ldr	r3, [pc, #452]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	496d      	ldr	r1, [pc, #436]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800203a:	4313      	orrs	r3, r2
 800203c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	4b68      	ldr	r3, [pc, #416]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002058:	429a      	cmp	r2, r3
 800205a:	d909      	bls.n	8002070 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800205c:	4b64      	ldr	r3, [pc, #400]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4961      	ldr	r1, [pc, #388]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800206c:	4313      	orrs	r3, r2
 800206e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4b5b      	ldr	r3, [pc, #364]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002088:	429a      	cmp	r2, r3
 800208a:	d908      	bls.n	800209e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800208c:	4b58      	ldr	r3, [pc, #352]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4955      	ldr	r1, [pc, #340]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800209a:	4313      	orrs	r3, r2
 800209c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	4b50      	ldr	r3, [pc, #320]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80020ba:	4b4d      	ldr	r3, [pc, #308]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 020f 	bic.w	r2, r3, #15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	494a      	ldr	r1, [pc, #296]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8093 	beq.w	8002200 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020e2:	4b43      	ldr	r3, [pc, #268]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d121      	bne.n	8002132 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e113      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fa:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d115      	bne.n	8002132 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e107      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002112:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0fb      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0f3      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002132:	4b2f      	ldr	r3, [pc, #188]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	492c      	ldr	r1, [pc, #176]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 8002140:	4313      	orrs	r3, r2
 8002142:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7fe fffe 	bl	8001144 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d112      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fff6 	bl	8001144 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0d7      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 0318 	and.w	r3, r3, #24
 8002172:	2b18      	cmp	r3, #24
 8002174:	d1ee      	bne.n	8002154 <HAL_RCC_ClockConfig+0x18c>
 8002176:	e043      	b.n	8002200 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d112      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7fe ffdf 	bl	8001144 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0c0      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f003 0318 	and.w	r3, r3, #24
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d1ee      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
 80021a4:	e02c      	b.n	8002200 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d122      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7fe ffc8 	bl	8001144 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0a9      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_RCC_ClockConfig+0x228>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 0318 	and.w	r3, r3, #24
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d1ee      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x1e8>
 80021d2:	e015      	b.n	8002200 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7fe ffb6 	bl	8001144 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d906      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e097      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000
 80021f0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f003 0318 	and.w	r3, r3, #24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e9      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d010      	beq.n	800222e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b44      	ldr	r3, [pc, #272]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	429a      	cmp	r2, r3
 800221a:	d208      	bcs.n	800222e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800221c:	4b41      	ldr	r3, [pc, #260]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 020f 	bic.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	493e      	ldr	r1, [pc, #248]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 800222a:	4313      	orrs	r3, r2
 800222c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222e:	4b3e      	ldr	r3, [pc, #248]	@ (8002328 <HAL_RCC_ClockConfig+0x360>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d210      	bcs.n	800225e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223c:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <HAL_RCC_ClockConfig+0x360>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 020f 	bic.w	r2, r3, #15
 8002244:	4938      	ldr	r1, [pc, #224]	@ (8002328 <HAL_RCC_ClockConfig+0x360>)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224c:	4b36      	ldr	r3, [pc, #216]	@ (8002328 <HAL_RCC_ClockConfig+0x360>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d001      	beq.n	800225e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e05d      	b.n	800231a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002276:	429a      	cmp	r2, r3
 8002278:	d208      	bcs.n	800228c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4927      	ldr	r1, [pc, #156]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d209      	bcs.n	80022be <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80022aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	491a      	ldr	r1, [pc, #104]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d8:	429a      	cmp	r2, r3
 80022da:	d209      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	490e      	ldr	r1, [pc, #56]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80022f0:	f000 f822 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_RCC_ClockConfig+0x35c>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	490b      	ldr	r1, [pc, #44]	@ (800232c <HAL_RCC_ClockConfig+0x364>)
 8002300:	5ccb      	ldrb	r3, [r1, r3]
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_RCC_ClockConfig+0x368>)
 8002308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x36c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fe8e 	bl	8001030 <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002318:	7afb      	ldrb	r3, [r7, #11]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	44020c00 	.word	0x44020c00
 8002328:	40022000 	.word	0x40022000
 800232c:	08006e2c 	.word	0x08006e2c
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800233e:	4b8c      	ldr	r3, [pc, #560]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0318 	and.w	r3, r3, #24
 8002346:	2b08      	cmp	r3, #8
 8002348:	d102      	bne.n	8002350 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800234a:	4b8a      	ldr	r3, [pc, #552]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x23c>)
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e107      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002350:	4b87      	ldr	r3, [pc, #540]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 0318 	and.w	r3, r3, #24
 8002358:	2b00      	cmp	r3, #0
 800235a:	d112      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800235c:	4b84      	ldr	r3, [pc, #528]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002368:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	4a81      	ldr	r2, [pc, #516]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x240>)
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e0f1      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800237c:	4b7e      	ldr	r3, [pc, #504]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x240>)
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	e0ee      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002382:	4b7b      	ldr	r3, [pc, #492]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0318 	and.w	r3, r3, #24
 800238a:	2b10      	cmp	r3, #16
 800238c:	d102      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800238e:	4b7b      	ldr	r3, [pc, #492]	@ (800257c <HAL_RCC_GetSysClockFreq+0x244>)
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e0e5      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002394:	4b76      	ldr	r3, [pc, #472]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f003 0318 	and.w	r3, r3, #24
 800239c:	2b18      	cmp	r3, #24
 800239e:	f040 80dd 	bne.w	800255c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023a2:	4b73      	ldr	r3, [pc, #460]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80023ac:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80023b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80023c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 80023c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80023c8:	08db      	lsrs	r3, r3, #3
 80023ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023dc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80b7 	beq.w	8002556 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0xbe>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d056      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x16a>
 80023f4:	e077      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80023f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d02d      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002402:	4b5b      	ldr	r3, [pc, #364]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	4a5a      	ldr	r2, [pc, #360]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x240>)
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242c:	4b50      	ldr	r3, [pc, #320]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800243c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002440:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002580 <HAL_RCC_GetSysClockFreq+0x248>
 8002444:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002448:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800244c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002450:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002458:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800245c:	e065      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002468:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002584 <HAL_RCC_GetSysClockFreq+0x24c>
 800246c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002470:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 8002472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002480:	ed97 6a02 	vldr	s12, [r7, #8]
 8002484:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002580 <HAL_RCC_GetSysClockFreq+0x248>
 8002488:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800248c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002494:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80024a0:	e043      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ac:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002588 <HAL_RCC_GetSysClockFreq+0x250>
 80024b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002580 <HAL_RCC_GetSysClockFreq+0x248>
 80024cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80024e4:	e021      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800258c <HAL_RCC_GetSysClockFreq+0x254>
 80024f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 80024fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002508:	ed97 6a02 	vldr	s12, [r7, #8]
 800250c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002580 <HAL_RCC_GetSysClockFreq+0x248>
 8002510:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002514:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800251c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002528:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800252a:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x238>)
 800252c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252e:	0a5b      	lsrs	r3, r3, #9
 8002530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002534:	3301      	adds	r3, #1
 8002536:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002542:	edd7 6a06 	vldr	s13, [r7, #24]
 8002546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254e:	ee17 3a90 	vmov	r3, s15
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	e004      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e001      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x240>)
 800255e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002560:	69fb      	ldr	r3, [r7, #28]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	@ 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	44020c00 	.word	0x44020c00
 8002574:	003d0900 	.word	0x003d0900
 8002578:	03d09000 	.word	0x03d09000
 800257c:	017d7840 	.word	0x017d7840
 8002580:	46000000 	.word	0x46000000
 8002584:	4c742400 	.word	0x4c742400
 8002588:	4bbebc20 	.word	0x4bbebc20
 800258c:	4a742400 	.word	0x4a742400

08002590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002594:	f7ff fed0 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_RCC_GetHCLKFreq+0x2c>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800259e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025a2:	4907      	ldr	r1, [pc, #28]	@ (80025c0 <HAL_RCC_GetHCLKFreq+0x30>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80025a6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a05      	ldr	r2, [pc, #20]	@ (80025c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80025b0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80025b2:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80025b4:	681b      	ldr	r3, [r3, #0]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	44020c00 	.word	0x44020c00
 80025c0:	08006e2c 	.word	0x08006e2c
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80025cc:	f7ff ffe0 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4904      	ldr	r1, [pc, #16]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	44020c00 	.word	0x44020c00
 80025f0:	08006e3c 	.word	0x08006e3c

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80025f8:	f7ff ffca 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4904      	ldr	r1, [pc, #16]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x28>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	44020c00 	.word	0x44020c00
 800261c:	08006e3c 	.word	0x08006e3c

08002620 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002624:	f7ff ffb4 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_RCC_GetPCLK3Freq+0x24>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	0b1b      	lsrs	r3, r3, #12
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4904      	ldr	r1, [pc, #16]	@ (8002648 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	44020c00 	.word	0x44020c00
 8002648:	08006e3c 	.word	0x08006e3c

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b0ba      	sub	sp, #232	@ 0xe8
 8002652:	af00      	add	r7, sp, #0
 8002654:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002658:	2300      	movs	r3, #0
 800265a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800265e:	2300      	movs	r3, #0
 8002660:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002670:	2500      	movs	r5, #0
 8002672:	ea54 0305 	orrs.w	r3, r4, r5
 8002676:	d00b      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002678:	4bcd      	ldr	r3, [pc, #820]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800267a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800267e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	4ac9      	ldr	r2, [pc, #804]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800268a:	430b      	orrs	r3, r1
 800268c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f002 0801 	and.w	r8, r2, #1
 800269c:	f04f 0900 	mov.w	r9, #0
 80026a0:	ea58 0309 	orrs.w	r3, r8, r9
 80026a4:	d042      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80026a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d823      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80026b0:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	08002701 	.word	0x08002701
 80026bc:	080026d1 	.word	0x080026d1
 80026c0:	080026e5 	.word	0x080026e5
 80026c4:	08002701 	.word	0x08002701
 80026c8:	08002701 	.word	0x08002701
 80026cc:	08002701 	.word	0x08002701
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80026d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026d4:	3308      	adds	r3, #8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 f90c 	bl	80058f4 <RCCEx_PLL2_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80026e2:	e00e      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80026e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026e8:	3330      	adds	r3, #48	@ 0x30
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 f99a 	bl	8005a24 <RCCEx_PLL3_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80026f6:	e004      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80026fe:	e000      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002702:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800270a:	4ba9      	ldr	r3, [pc, #676]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800270c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002710:	f023 0107 	bic.w	r1, r3, #7
 8002714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	4aa5      	ldr	r2, [pc, #660]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800271c:	430b      	orrs	r3, r1
 800271e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002722:	e003      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002728:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800272c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f002 0a02 	and.w	sl, r2, #2
 8002738:	f04f 0b00 	mov.w	fp, #0
 800273c:	ea5a 030b 	orrs.w	r3, sl, fp
 8002740:	f000 8088 	beq.w	8002854 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	2b28      	cmp	r3, #40	@ 0x28
 800274c:	d868      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800274e:	a201      	add	r2, pc, #4	@ (adr r2, 8002754 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002829 	.word	0x08002829
 8002758:	08002821 	.word	0x08002821
 800275c:	08002821 	.word	0x08002821
 8002760:	08002821 	.word	0x08002821
 8002764:	08002821 	.word	0x08002821
 8002768:	08002821 	.word	0x08002821
 800276c:	08002821 	.word	0x08002821
 8002770:	08002821 	.word	0x08002821
 8002774:	080027f9 	.word	0x080027f9
 8002778:	08002821 	.word	0x08002821
 800277c:	08002821 	.word	0x08002821
 8002780:	08002821 	.word	0x08002821
 8002784:	08002821 	.word	0x08002821
 8002788:	08002821 	.word	0x08002821
 800278c:	08002821 	.word	0x08002821
 8002790:	08002821 	.word	0x08002821
 8002794:	0800280d 	.word	0x0800280d
 8002798:	08002821 	.word	0x08002821
 800279c:	08002821 	.word	0x08002821
 80027a0:	08002821 	.word	0x08002821
 80027a4:	08002821 	.word	0x08002821
 80027a8:	08002821 	.word	0x08002821
 80027ac:	08002821 	.word	0x08002821
 80027b0:	08002821 	.word	0x08002821
 80027b4:	08002829 	.word	0x08002829
 80027b8:	08002821 	.word	0x08002821
 80027bc:	08002821 	.word	0x08002821
 80027c0:	08002821 	.word	0x08002821
 80027c4:	08002821 	.word	0x08002821
 80027c8:	08002821 	.word	0x08002821
 80027cc:	08002821 	.word	0x08002821
 80027d0:	08002821 	.word	0x08002821
 80027d4:	08002829 	.word	0x08002829
 80027d8:	08002821 	.word	0x08002821
 80027dc:	08002821 	.word	0x08002821
 80027e0:	08002821 	.word	0x08002821
 80027e4:	08002821 	.word	0x08002821
 80027e8:	08002821 	.word	0x08002821
 80027ec:	08002821 	.word	0x08002821
 80027f0:	08002821 	.word	0x08002821
 80027f4:	08002829 	.word	0x08002829
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027fc:	3308      	adds	r3, #8
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 f878 	bl	80058f4 <RCCEx_PLL2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800280a:	e00e      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800280c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002810:	3330      	adds	r3, #48	@ 0x30
 8002812:	4618      	mov	r0, r3
 8002814:	f003 f906 	bl	8005a24 <RCCEx_PLL3_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800281e:	e004      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002826:	e000      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800282a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002832:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002834:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002838:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800283c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002842:	4a5b      	ldr	r2, [pc, #364]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002844:	430b      	orrs	r3, r1
 8002846:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800284a:	e003      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002850:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f002 0304 	and.w	r3, r2, #4
 8002860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800286a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800286e:	460b      	mov	r3, r1
 8002870:	4313      	orrs	r3, r2
 8002872:	d04e      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800287a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800287e:	d02c      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002880:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002884:	d825      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288a:	d028      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x292>
 800288c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002890:	d81f      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002892:	2bc0      	cmp	r3, #192	@ 0xc0
 8002894:	d025      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002896:	2bc0      	cmp	r3, #192	@ 0xc0
 8002898:	d81b      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800289a:	2b80      	cmp	r3, #128	@ 0x80
 800289c:	d00f      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x272>
 800289e:	2b80      	cmp	r3, #128	@ 0x80
 80028a0:	d817      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01f      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80028a6:	2b40      	cmp	r3, #64	@ 0x40
 80028a8:	d113      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028ae:	3308      	adds	r3, #8
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 f81f 	bl	80058f4 <RCCEx_PLL2_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80028bc:	e014      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028c2:	3330      	adds	r3, #48	@ 0x30
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 f8ad 	bl	8005a24 <RCCEx_PLL3_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80028d0:	e00a      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80028d8:	e006      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80028da:	bf00      	nop
 80028dc:	e004      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80028e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10c      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80028f0:	4b2f      	ldr	r3, [pc, #188]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028f6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80028fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002900:	4a2b      	ldr	r2, [pc, #172]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002902:	430b      	orrs	r3, r1
 8002904:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002908:	e003      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800290e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f002 0308 	and.w	r3, r2, #8
 800291e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800292c:	460b      	mov	r3, r1
 800292e:	4313      	orrs	r3, r2
 8002930:	d056      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002938:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800293c:	d031      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800293e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002942:	d82a      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002948:	d02d      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800294a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800294e:	d824      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002950:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002954:	d029      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002956:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800295a:	d81e      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002960:	d011      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002966:	d818      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800296c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002970:	d113      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002976:	3308      	adds	r3, #8
 8002978:	4618      	mov	r0, r3
 800297a:	f002 ffbb 	bl	80058f4 <RCCEx_PLL2_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002984:	e017      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800298a:	3330      	adds	r3, #48	@ 0x30
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f849 	bl	8005a24 <RCCEx_PLL3_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002998:	e00d      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80029a0:	e009      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80029a2:	bf00      	nop
 80029a4:	e007      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80029a6:	bf00      	nop
 80029a8:	e005      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80029aa:	bf00      	nop
 80029ac:	e003      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80029ae:	bf00      	nop
 80029b0:	44020c00 	.word	0x44020c00
        break;
 80029b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80029be:	4bb9      	ldr	r3, [pc, #740]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029c4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80029c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ce:	4ab5      	ldr	r2, [pc, #724]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029d0:	430b      	orrs	r3, r1
 80029d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80029d6:	e003      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f002 0310 	and.w	r3, r2, #16
 80029ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80029fa:	460b      	mov	r3, r1
 80029fc:	4313      	orrs	r3, r2
 80029fe:	d053      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002a0a:	d031      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002a0c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002a10:	d82a      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a16:	d02d      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002a18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a1c:	d824      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a22:	d029      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002a24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a28:	d81e      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2e:	d011      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a34:	d818      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d020      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a3e:	d113      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a44:	3308      	adds	r3, #8
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 ff54 	bl	80058f4 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002a52:	e014      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a58:	3330      	adds	r3, #48	@ 0x30
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 ffe2 	bl	8005a24 <RCCEx_PLL3_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002a66:	e00a      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002a6e:	e006      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a70:	bf00      	nop
 8002a72:	e004      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a74:	bf00      	nop
 8002a76:	e002      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002a86:	4b87      	ldr	r3, [pc, #540]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002a8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a96:	4a83      	ldr	r2, [pc, #524]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002a9e:	e003      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002aa4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f002 0320 	and.w	r3, r2, #32
 8002ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002abe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	d053      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ace:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002ad2:	d031      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002ad4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002ad8:	d82a      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ada:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ade:	d02d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ae4:	d824      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ae6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002aea:	d029      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002aec:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002af0:	d81e      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af6:	d011      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afc:	d818      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d020      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b06:	d113      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fef0 	bl	80058f4 <RCCEx_PLL2_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002b1a:	e014      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b20:	3330      	adds	r3, #48	@ 0x30
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 ff7e 	bl	8005a24 <RCCEx_PLL3_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002b36:	e006      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b38:	bf00      	nop
 8002b3a:	e004      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002b4e:	4b55      	ldr	r3, [pc, #340]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b54:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	4a51      	ldr	r2, [pc, #324]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b60:	430b      	orrs	r3, r1
 8002b62:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b66:	e003      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b6c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b86:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	d053      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b96:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002b9a:	d031      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002b9c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002ba0:	d82a      	bhi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002ba2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ba6:	d02d      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bac:	d824      	bhi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002bae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bb2:	d029      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bb8:	d81e      	bhi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bbe:	d011      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002bc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bc4:	d818      	bhi.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d020      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bce:	d113      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fe8c 	bl	80058f4 <RCCEx_PLL2_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002be2:	e014      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002be8:	3330      	adds	r3, #48	@ 0x30
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 ff1a 	bl	8005a24 <RCCEx_PLL3_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002bfe:	e006      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c00:	bf00      	nop
 8002c02:	e004      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c04:	bf00      	nop
 8002c06:	e002      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c08:	bf00      	nop
 8002c0a:	e000      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002c16:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c2e:	e003      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c34:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002c4e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4313      	orrs	r3, r2
 8002c56:	d03d      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c62:	d01b      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002c64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c68:	d814      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c6e:	d017      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8002c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c74:	d80e      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7e:	d109      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c84:	3330      	adds	r3, #48	@ 0x30
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fecc 	bl	8005a24 <RCCEx_PLL3_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002c92:	e00a      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002c9a:	e006      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002c9c:	bf00      	nop
 8002c9e:	e004      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002ca0:	bf00      	nop
 8002ca2:	e002      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8002ca4:	44020c00 	.word	0x44020c00
        break;
 8002ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002caa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002cb2:	4b99      	ldr	r3, [pc, #612]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002cb8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cc2:	4a95      	ldr	r2, [pc, #596]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002cca:	e003      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002cd0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	d03b      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cfa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002cfe:	d01b      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8002d00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d04:	d814      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002d06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d0a:	d017      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8002d0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d10:	d80e      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d014      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8002d16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d1a:	d109      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d20:	3330      	adds	r3, #48	@ 0x30
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fe7e 	bl	8005a24 <RCCEx_PLL3_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002d2e:	e008      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002d36:	e004      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002d38:	bf00      	nop
 8002d3a:	e002      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d42:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002d4a:	4b73      	ldr	r3, [pc, #460]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d50:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002d54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002d62:	e003      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002d78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002d86:	460b      	mov	r3, r1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	d03d      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d98:	d01b      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8002d9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d9e:	d814      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002da4:	d017      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8002da6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002daa:	d80e      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d014      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8002db0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002db4:	d109      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dba:	3330      	adds	r3, #48	@ 0x30
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fe31 	bl	8005a24 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002dc8:	e008      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002de4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002de6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002df6:	4a48      	ldr	r2, [pc, #288]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002dfe:	e003      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002e08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002e22:	460b      	mov	r3, r1
 8002e24:	4313      	orrs	r3, r2
 8002e26:	d035      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e34:	d015      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002e36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e3a:	d80e      	bhi.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e44:	d109      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e4a:	3330      	adds	r3, #48	@ 0x30
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fde9 	bl	8005a24 <RCCEx_PLL3_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002e70:	4b29      	ldr	r3, [pc, #164]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e76:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e82:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e84:	430b      	orrs	r3, r1
 8002e86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e8a:	e003      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002e94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002eaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	d037      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec0:	d015      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec6:	d80e      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8002ecc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ed6:	3330      	adds	r3, #48	@ 0x30
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fda3 	bl	8005a24 <RCCEx_PLL3_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002eec:	e002      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002ef2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002ef4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002efe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f02:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	4a02      	ldr	r2, [pc, #8]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f16:	e005      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8002f18:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002f40:	4bb8      	ldr	r3, [pc, #736]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4ab7      	ldr	r2, [pc, #732]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f4a:	61d3      	str	r3, [r2, #28]
 8002f4c:	4bb5      	ldr	r3, [pc, #724]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f54:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002f58:	4ab2      	ldr	r2, [pc, #712]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002f6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002f74:	460b      	mov	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	d055      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f82:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002f86:	d031      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8002f88:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002f8c:	d82a      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f92:	d02d      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8002f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f98:	d824      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f9e:	d029      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8002fa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fa4:	d81e      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002faa:	d011      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d818      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fba:	d113      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 fc96 	bl	80058f4 <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002fce:	e014      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fd4:	3330      	adds	r3, #48	@ 0x30
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fd24 	bl	8005a24 <RCCEx_PLL3_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002fea:	e006      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002fec:	bf00      	nop
 8002fee:	e004      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002ff0:	bf00      	nop
 8002ff2:	e002      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003002:	4b88      	ldr	r3, [pc, #544]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003004:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003008:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800300c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003014:	4a83      	ldr	r2, [pc, #524]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003016:	430b      	orrs	r3, r1
 8003018:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800301c:	e003      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003022:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003032:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003034:	2300      	movs	r3, #0
 8003036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003038:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800303c:	460b      	mov	r3, r1
 800303e:	4313      	orrs	r3, r2
 8003040:	d055      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800304e:	d031      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8003050:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003054:	d82a      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800305a:	d02d      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800305c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003060:	d824      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003062:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003066:	d029      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800306c:	d81e      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003072:	d011      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003078:	d818      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800307e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003082:	d113      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003088:	3308      	adds	r3, #8
 800308a:	4618      	mov	r0, r3
 800308c:	f002 fc32 	bl	80058f4 <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003096:	e014      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800309c:	3330      	adds	r3, #48	@ 0x30
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 fcc0 	bl	8005a24 <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80030aa:	e00a      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030b2:	e006      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80030b4:	bf00      	nop
 80030b6:	e004      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80030b8:	bf00      	nop
 80030ba:	e002      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80030c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80030ca:	4b56      	ldr	r3, [pc, #344]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80030d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	4a51      	ldr	r2, [pc, #324]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80030e4:	e003      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030ea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80030ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80030fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80030fc:	2300      	movs	r3, #0
 80030fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003100:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003104:	460b      	mov	r3, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	d032      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800310a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003112:	2b05      	cmp	r3, #5
 8003114:	d80f      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003116:	2b03      	cmp	r3, #3
 8003118:	d211      	bcs.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800311a:	2b01      	cmp	r3, #1
 800311c:	d911      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800311e:	2b02      	cmp	r3, #2
 8003120:	d109      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003126:	3308      	adds	r3, #8
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fbe3 	bl	80058f4 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800314c:	4b35      	ldr	r3, [pc, #212]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800314e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003152:	f023 0107 	bic.w	r1, r3, #7
 8003156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800315a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800315e:	4a31      	ldr	r2, [pc, #196]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003160:	430b      	orrs	r3, r1
 8003162:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003166:	e003      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800316c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	2100      	movs	r1, #0
 800317a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800317c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003182:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003186:	460b      	mov	r3, r1
 8003188:	4313      	orrs	r3, r2
 800318a:	d024      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800318c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003198:	2b08      	cmp	r3, #8
 800319a:	d005      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80031a2:	e002      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80031a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80031b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b8:	f023 0108 	bic.w	r1, r3, #8
 80031bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031c4:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031c6:	430b      	orrs	r3, r1
 80031c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031d2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80031e4:	2300      	movs	r3, #0
 80031e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80031e8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80031ec:	460b      	mov	r3, r1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f000 80b9 	beq.w	8003366 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003200:	f7fd ffa0 	bl	8001144 <HAL_GetTick>
 8003204:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003208:	e010      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fd ff9b 	bl	8001144 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d908      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003220:	e00a      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8003222:	bf00      	nop
 8003224:	44020c00 	.word	0x44020c00
 8003228:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800322c:	4bba      	ldr	r3, [pc, #744]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0e8      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8003238:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 808e 	bne.w	800335e <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003242:	4bb6      	ldr	r3, [pc, #728]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800324c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d023      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800325c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003264:	4293      	cmp	r3, r2
 8003266:	d01b      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003268:	4bac      	ldr	r3, [pc, #688]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800326a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800326e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4ba9      	ldr	r3, [pc, #676]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800327c:	4aa7      	ldr	r2, [pc, #668]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003282:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003286:	4ba5      	ldr	r3, [pc, #660]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800328c:	4aa3      	ldr	r2, [pc, #652]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003292:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003296:	4aa1      	ldr	r2, [pc, #644]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d019      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fd ff4a 	bl	8001144 <HAL_GetTick>
 80032b0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b4:	e00d      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd ff45 	bl	8001144 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d903      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d2:	4b92      	ldr	r3, [pc, #584]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ea      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80032e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d135      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80032e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80032f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032f8:	d110      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80032fa:	4b88      	ldr	r3, [pc, #544]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003306:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003310:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003314:	4a81      	ldr	r2, [pc, #516]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003316:	430b      	orrs	r3, r1
 8003318:	61d3      	str	r3, [r2, #28]
 800331a:	e005      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800331c:	4b7f      	ldr	r3, [pc, #508]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a7e      	ldr	r2, [pc, #504]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003322:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003326:	61d3      	str	r3, [r2, #28]
 8003328:	4b7c      	ldr	r3, [pc, #496]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800332a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800332e:	4a7b      	ldr	r2, [pc, #492]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003334:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003338:	4b78      	ldr	r3, [pc, #480]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800333a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800333e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003342:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	4a74      	ldr	r2, [pc, #464]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800334c:	430b      	orrs	r3, r1
 800334e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003354:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003358:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800335c:	e003      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003362:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003374:	2300      	movs	r3, #0
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003378:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800337c:	460b      	mov	r3, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	d035      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800338a:	2b30      	cmp	r3, #48	@ 0x30
 800338c:	d014      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800338e:	2b30      	cmp	r3, #48	@ 0x30
 8003390:	d80e      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8003392:	2b20      	cmp	r3, #32
 8003394:	d012      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8003396:	2b20      	cmp	r3, #32
 8003398:	d80a      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d106      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a2:	4b5e      	ldr	r3, [pc, #376]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	4a5d      	ldr	r2, [pc, #372]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80033ae:	e008      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80033c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80033ca:	4b54      	ldr	r3, [pc, #336]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80033d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033dc:	4a4f      	ldr	r2, [pc, #316]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033de:	430b      	orrs	r3, r1
 80033e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033ea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80033fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80033fc:	2300      	movs	r3, #0
 80033fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003400:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003404:	460b      	mov	r3, r1
 8003406:	4313      	orrs	r3, r2
 8003408:	d033      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800340a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8003416:	2b40      	cmp	r3, #64	@ 0x40
 8003418:	d007      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800341a:	e010      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341c:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800341e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003420:	4a3e      	ldr	r2, [pc, #248]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003426:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003428:	e00d      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800342a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800342e:	3308      	adds	r3, #8
 8003430:	4618      	mov	r0, r3
 8003432:	f002 fa5f 	bl	80058f4 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800343c:	e003      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003446:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800344e:	4b33      	ldr	r3, [pc, #204]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003454:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800345c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003460:	4a2e      	ldr	r2, [pc, #184]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003462:	430b      	orrs	r3, r1
 8003464:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800346e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800347e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003480:	2300      	movs	r3, #0
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003484:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003488:	460b      	mov	r3, r1
 800348a:	4313      	orrs	r3, r2
 800348c:	d04c      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800348e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003496:	2b04      	cmp	r3, #4
 8003498:	d827      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800349a:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034c3 	.word	0x080034c3
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034f3 	.word	0x080034f3
 80034b0:	080034f3 	.word	0x080034f3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	4a18      	ldr	r2, [pc, #96]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80034c0:	e018      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034c6:	3308      	adds	r3, #8
 80034c8:	4618      	mov	r0, r3
 80034ca:	f002 fa13 	bl	80058f4 <RCCEx_PLL2_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80034d4:	e00e      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034da:	3330      	adds	r3, #48	@ 0x30
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 faa1 	bl	8005a24 <RCCEx_PLL3_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80034f0:	e000      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80034f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d111      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80034fc:	4b07      	ldr	r3, [pc, #28]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003502:	f023 0107 	bic.w	r1, r3, #7
 8003506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800350a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800350e:	4a03      	ldr	r2, [pc, #12]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003510:	430b      	orrs	r3, r1
 8003512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003516:	e007      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8003518:	44020800 	.word	0x44020800
 800351c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003524:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003528:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003534:	633b      	str	r3, [r7, #48]	@ 0x30
 8003536:	2300      	movs	r3, #0
 8003538:	637b      	str	r3, [r7, #52]	@ 0x34
 800353a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800353e:	460b      	mov	r3, r1
 8003540:	4313      	orrs	r3, r2
 8003542:	f000 8081 	beq.w	8003648 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800354a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800354e:	2b20      	cmp	r3, #32
 8003550:	d85f      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8003552:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	080035dd 	.word	0x080035dd
 800355c:	08003613 	.word	0x08003613
 8003560:	08003613 	.word	0x08003613
 8003564:	08003613 	.word	0x08003613
 8003568:	08003613 	.word	0x08003613
 800356c:	08003613 	.word	0x08003613
 8003570:	08003613 	.word	0x08003613
 8003574:	08003613 	.word	0x08003613
 8003578:	080035eb 	.word	0x080035eb
 800357c:	08003613 	.word	0x08003613
 8003580:	08003613 	.word	0x08003613
 8003584:	08003613 	.word	0x08003613
 8003588:	08003613 	.word	0x08003613
 800358c:	08003613 	.word	0x08003613
 8003590:	08003613 	.word	0x08003613
 8003594:	08003613 	.word	0x08003613
 8003598:	080035ff 	.word	0x080035ff
 800359c:	08003613 	.word	0x08003613
 80035a0:	08003613 	.word	0x08003613
 80035a4:	08003613 	.word	0x08003613
 80035a8:	08003613 	.word	0x08003613
 80035ac:	08003613 	.word	0x08003613
 80035b0:	08003613 	.word	0x08003613
 80035b4:	08003613 	.word	0x08003613
 80035b8:	0800361b 	.word	0x0800361b
 80035bc:	08003613 	.word	0x08003613
 80035c0:	08003613 	.word	0x08003613
 80035c4:	08003613 	.word	0x08003613
 80035c8:	08003613 	.word	0x08003613
 80035cc:	08003613 	.word	0x08003613
 80035d0:	08003613 	.word	0x08003613
 80035d4:	08003613 	.word	0x08003613
 80035d8:	0800361b 	.word	0x0800361b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4bb9      	ldr	r3, [pc, #740]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	4ab8      	ldr	r2, [pc, #736]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80035e8:	e018      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ee:	3308      	adds	r3, #8
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 f97f 	bl	80058f4 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80035fc:	e00e      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003602:	3330      	adds	r3, #48	@ 0x30
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fa0d 	bl	8005a24 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003610:	e004      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800361a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003624:	4ba7      	ldr	r3, [pc, #668]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800362e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003636:	4aa3      	ldr	r2, [pc, #652]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003638:	430b      	orrs	r3, r1
 800363a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800363e:	e003      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003644:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	d04e      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003668:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800366c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003670:	d02e      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003676:	d827      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003678:	2bc0      	cmp	r3, #192	@ 0xc0
 800367a:	d02b      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800367c:	2bc0      	cmp	r3, #192	@ 0xc0
 800367e:	d823      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003680:	2b80      	cmp	r3, #128	@ 0x80
 8003682:	d017      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8003684:	2b80      	cmp	r3, #128	@ 0x80
 8003686:	d81f      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 800368c:	2b40      	cmp	r3, #64	@ 0x40
 800368e:	d007      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8003690:	e01a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003692:	4b8c      	ldr	r3, [pc, #560]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	4a8b      	ldr	r2, [pc, #556]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800369c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800369e:	e01a      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036a4:	3308      	adds	r3, #8
 80036a6:	4618      	mov	r0, r3
 80036a8:	f002 f924 	bl	80058f4 <RCCEx_PLL2_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80036b2:	e010      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b8:	3330      	adds	r3, #48	@ 0x30
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 f9b2 	bl	8005a24 <RCCEx_PLL3_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80036c6:	e006      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036ce:	e002      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80036d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80036de:	4b79      	ldr	r3, [pc, #484]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80036e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036e4:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80036e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036f0:	4974      	ldr	r1, [pc, #464]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
 8003714:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003718:	460b      	mov	r3, r1
 800371a:	4313      	orrs	r3, r2
 800371c:	d055      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800371e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003722:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003726:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800372a:	d031      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 800372c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003730:	d82a      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003736:	d02d      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800373c:	d824      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800373e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003742:	d029      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8003744:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003748:	d81e      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374e:	d011      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8003750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003754:	d818      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d020      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800375a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800375e:	d113      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003764:	3308      	adds	r3, #8
 8003766:	4618      	mov	r0, r3
 8003768:	f002 f8c4 	bl	80058f4 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003772:	e014      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003778:	3330      	adds	r3, #48	@ 0x30
 800377a:	4618      	mov	r0, r3
 800377c:	f002 f952 	bl	8005a24 <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003786:	e00a      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800378e:	e006      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003790:	bf00      	nop
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10d      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80037a6:	4b47      	ldr	r3, [pc, #284]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ac:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80037b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80037b8:	4942      	ldr	r1, [pc, #264]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	2100      	movs	r1, #0
 80037d4:	61b9      	str	r1, [r7, #24]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d03c      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80037e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d81b      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80037f2:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	08003833 	.word	0x08003833
 80037fc:	08003809 	.word	0x08003809
 8003800:	08003817 	.word	0x08003817
 8003804:	08003833 	.word	0x08003833
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003808:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	4a2d      	ldr	r2, [pc, #180]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800380e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003812:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003814:	e00e      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800381a:	3308      	adds	r3, #8
 800381c:	4618      	mov	r0, r3
 800381e:	f002 f869 	bl	80058f4 <RCCEx_PLL2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003828:	e004      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8003832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003834:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800383c:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800383e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800384a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800384e:	491d      	ldr	r1, [pc, #116]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800385c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003860:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	2100      	movs	r1, #0
 800386a:	6139      	str	r1, [r7, #16]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003876:	460b      	mov	r3, r1
 8003878:	4313      	orrs	r3, r2
 800387a:	d03c      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800387c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003888:	d00e      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800388a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388e:	d815      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d019      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8003894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003898:	d110      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389a:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389e:	4a09      	ldr	r2, [pc, #36]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80038a6:	e010      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ac:	3308      	adds	r3, #8
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 f820 	bl	80058f4 <RCCEx_PLL2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80038ba:	e006      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80038c2:	e002      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80038c4:	44020c00 	.word	0x44020c00
        break;
 80038c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80038d2:	4b3d      	ldr	r3, [pc, #244]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80038d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e4:	4938      	ldr	r1, [pc, #224]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	2100      	movs	r1, #0
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d038      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003916:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800391a:	2b30      	cmp	r3, #48	@ 0x30
 800391c:	d01b      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 800391e:	2b30      	cmp	r3, #48	@ 0x30
 8003920:	d815      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8003922:	2b10      	cmp	r3, #16
 8003924:	d002      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8003926:	2b20      	cmp	r3, #32
 8003928:	d007      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800392a:	e010      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	4a25      	ldr	r2, [pc, #148]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003936:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003938:	e00e      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800393a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800393e:	3330      	adds	r3, #48	@ 0x30
 8003940:	4618      	mov	r0, r3
 8003942:	f002 f86f 	bl	8005a24 <RCCEx_PLL3_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800394c:	e004      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8003956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003958:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003960:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003966:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800396a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800396e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003972:	4915      	ldr	r1, [pc, #84]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800397a:	e003      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003980:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	2100      	movs	r1, #0
 800398e:	6039      	str	r1, [r7, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	e9d7 1200 	ldrd	r1, r2, [r7]
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d00c      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80039a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80039b2:	4905      	ldr	r1, [pc, #20]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80039ba:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80039be:	4618      	mov	r0, r3
 80039c0:	37e8      	adds	r7, #232	@ 0xe8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c8:	44020c00 	.word	0x44020c00

080039cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b08b      	sub	sp, #44	@ 0x2c
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80039d4:	4bae      	ldr	r3, [pc, #696]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039dc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039de:	4bac      	ldr	r3, [pc, #688]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80039e8:	4ba9      	ldr	r3, [pc, #676]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039f2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039f4:	4ba6      	ldr	r3, [pc, #664]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a00:	4ba3      	ldr	r3, [pc, #652]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	08db      	lsrs	r3, r3, #3
 8003a06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a18:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8126 	beq.w	8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d053      	beq.n	8003ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d86f      	bhi.n	8003b10 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d02b      	beq.n	8003a94 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003a3c:	e068      	b.n	8003b10 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a3e:	4b94      	ldr	r3, [pc, #592]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	08db      	lsrs	r3, r3, #3
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	4a92      	ldr	r2, [pc, #584]	@ (8003c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a72:	ed97 6a04 	vldr	s12, [r7, #16]
 8003a76:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003a92:	e068      	b.n	8003b66 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ab4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003acc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003ad0:	e049      	b.n	8003b66 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003adc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aee:	ed97 6a04 	vldr	s12, [r7, #16]
 8003af2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003b0e:	e02a      	b.n	8003b66 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b10:	4b5f      	ldr	r3, [pc, #380]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	08db      	lsrs	r3, r3, #3
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b44:	ed97 6a04 	vldr	s12, [r7, #16]
 8003b48:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003b64:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b66:	4b4a      	ldr	r3, [pc, #296]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b72:	d121      	bne.n	8003bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003b74:	4b46      	ldr	r3, [pc, #280]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d017      	beq.n	8003bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b80:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b84:	0a5b      	lsrs	r3, r3, #9
 8003b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003b92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b96:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003b9a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ba6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e006      	b.n	8003bbe <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e002      	b.n	8003bbe <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003bbe:	4b34      	ldr	r3, [pc, #208]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bca:	d121      	bne.n	8003c10 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003bcc:	4b30      	ldr	r3, [pc, #192]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d017      	beq.n	8003c08 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003bf2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	e006      	b.n	8003c16 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e002      	b.n	8003c16 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c16:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c22:	d121      	bne.n	8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c24:	4b1a      	ldr	r3, [pc, #104]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d017      	beq.n	8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c30:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c34:	0e1b      	lsrs	r3, r3, #24
 8003c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c46:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003c4a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c56:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c5e:	e010      	b.n	8003c82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	e00c      	b.n	8003c82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	e008      	b.n	8003c82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
}
 8003c82:	bf00      	nop
 8003c84:	372c      	adds	r7, #44	@ 0x2c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	44020c00 	.word	0x44020c00
 8003c94:	03d09000 	.word	0x03d09000
 8003c98:	46000000 	.word	0x46000000
 8003c9c:	4a742400 	.word	0x4a742400
 8003ca0:	4bbebc20 	.word	0x4bbebc20

08003ca4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b08b      	sub	sp, #44	@ 0x2c
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003cac:	4bae      	ldr	r3, [pc, #696]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003cb6:	4bac      	ldr	r3, [pc, #688]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003cc0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cca:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003ccc:	4ba6      	ldr	r3, [pc, #664]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003cd8:	4ba3      	ldr	r3, [pc, #652]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8126 	beq.w	8003f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d053      	beq.n	8003daa <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d86f      	bhi.n	8003de8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d02b      	beq.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003d14:	e068      	b.n	8003de8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d16:	4b94      	ldr	r3, [pc, #592]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	08db      	lsrs	r3, r3, #3
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	4a92      	ldr	r2, [pc, #584]	@ (8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d4e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003d6a:	e068      	b.n	8003e3e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d88:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d8c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003da8:	e049      	b.n	8003e3e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc6:	ed97 6a04 	vldr	s12, [r7, #16]
 8003dca:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003de6:	e02a      	b.n	8003e3e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003de8:	4b5f      	ldr	r3, [pc, #380]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	ee07 3a90 	vmov	s15, r3
 8003e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e20:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003e3c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e4a:	d121      	bne.n	8003e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003e4c:	4b46      	ldr	r3, [pc, #280]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d017      	beq.n	8003e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e58:	4b43      	ldr	r3, [pc, #268]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	0a5b      	lsrs	r3, r3, #9
 8003e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003e72:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e006      	b.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e002      	b.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e96:	4b34      	ldr	r3, [pc, #208]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea2:	d121      	bne.n	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003ea4:	4b30      	ldr	r3, [pc, #192]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003eca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	e006      	b.n	8003eee <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	e002      	b.n	8003eee <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003eee:	4b1e      	ldr	r3, [pc, #120]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efa:	d121      	bne.n	8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003efc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d017      	beq.n	8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f08:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	0e1b      	lsrs	r3, r3, #24
 8003f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003f22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f36:	e010      	b.n	8003f5a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
}
 8003f3e:	e00c      	b.n	8003f5a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	e008      	b.n	8003f5a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	372c      	adds	r7, #44	@ 0x2c
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	44020c00 	.word	0x44020c00
 8003f6c:	03d09000 	.word	0x03d09000
 8003f70:	46000000 	.word	0x46000000
 8003f74:	4a742400 	.word	0x4a742400
 8003f78:	4bbebc20 	.word	0x4bbebc20

08003f7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b08b      	sub	sp, #44	@ 0x2c
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003f84:	4bae      	ldr	r3, [pc, #696]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003f8e:	4bac      	ldr	r3, [pc, #688]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8003f98:	4ba9      	ldr	r3, [pc, #676]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fa2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003fa4:	4ba6      	ldr	r3, [pc, #664]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003fb0:	4ba3      	ldr	r3, [pc, #652]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8126 	beq.w	8004220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d053      	beq.n	8004082 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d86f      	bhi.n	80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d003      	beq.n	8003fee <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d02b      	beq.n	8004044 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003fec:	e068      	b.n	80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fee:	4b94      	ldr	r3, [pc, #592]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	08db      	lsrs	r3, r3, #3
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	4a92      	ldr	r2, [pc, #584]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004022:	ed97 6a04 	vldr	s12, [r7, #16]
 8004026:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004042:	e068      	b.n	8004116 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004060:	ed97 6a04 	vldr	s12, [r7, #16]
 8004064:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004080:	e049      	b.n	8004116 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004250 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8004090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409e:	ed97 6a04 	vldr	s12, [r7, #16]
 80040a2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80040be:	e02a      	b.n	8004116 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80040f8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80040fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004104:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004110:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004114:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004116:	4b4a      	ldr	r3, [pc, #296]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800411e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004122:	d121      	bne.n	8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004124:	4b46      	ldr	r3, [pc, #280]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d017      	beq.n	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004130:	4b43      	ldr	r3, [pc, #268]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	0a5b      	lsrs	r3, r3, #9
 8004136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004146:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800414a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800414e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004156:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e006      	b.n	800416e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e002      	b.n	800416e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800416e:	4b34      	ldr	r3, [pc, #208]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800417a:	d121      	bne.n	80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800417c:	4b30      	ldr	r3, [pc, #192]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004188:	4b2d      	ldr	r3, [pc, #180]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800418a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800419a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800419e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80041a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ae:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	e006      	b.n	80041c6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e002      	b.n	80041c6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d2:	d121      	bne.n	8004218 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80041d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041e0:	4b17      	ldr	r3, [pc, #92]	@ (8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	0e1b      	lsrs	r3, r3, #24
 80041e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80041f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041f6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80041fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004206:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800420e:	e010      	b.n	8004232 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
}
 8004216:	e00c      	b.n	8004232 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]
}
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	bf00      	nop
 8004234:	372c      	adds	r7, #44	@ 0x2c
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	44020c00 	.word	0x44020c00
 8004244:	03d09000 	.word	0x03d09000
 8004248:	46000000 	.word	0x46000000
 800424c:	4a742400 	.word	0x4a742400
 8004250:	4bbebc20 	.word	0x4bbebc20

08004254 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b08f      	sub	sp, #60	@ 0x3c
 8004258:	af00      	add	r7, sp, #0
 800425a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800425e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004262:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8004266:	4321      	orrs	r1, r4
 8004268:	d150      	bne.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800426a:	4b26      	ldr	r3, [pc, #152]	@ (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800426c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004270:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004274:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004276:	4b23      	ldr	r3, [pc, #140]	@ (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b02      	cmp	r3, #2
 8004282:	d108      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428a:	d104      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800428c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004290:	637b      	str	r3, [r7, #52]	@ 0x34
 8004292:	f001 bb20 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004296:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800429c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042a4:	d108      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ac:	d104      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80042ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b4:	f001 bb0f 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80042b8:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c4:	d119      	bne.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042cc:	d115      	bne.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80042d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042da:	d30a      	bcc.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80042ee:	f001 baf2 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80042f6:	f001 baee 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042fe:	f001 baea 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004302:	bf00      	nop
 8004304:	44020c00 	.word	0x44020c00
 8004308:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800430c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004310:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8004314:	ea50 0104 	orrs.w	r1, r0, r4
 8004318:	f000 8615 	beq.w	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 800431c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004320:	2801      	cmp	r0, #1
 8004322:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8004326:	f081 82d3 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800432a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800432e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8004332:	ea50 0104 	orrs.w	r1, r0, r4
 8004336:	f000 84d8 	beq.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800433a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800433e:	2801      	cmp	r0, #1
 8004340:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8004344:	f081 82c4 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800434c:	f1a1 0410 	sub.w	r4, r1, #16
 8004350:	ea50 0104 	orrs.w	r1, r0, r4
 8004354:	f001 8288 	beq.w	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8004358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800435c:	2801      	cmp	r0, #1
 800435e:	f171 0110 	sbcs.w	r1, r1, #16
 8004362:	f081 82b5 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800436a:	f1a1 0408 	sub.w	r4, r1, #8
 800436e:	ea50 0104 	orrs.w	r1, r0, r4
 8004372:	f001 81fe 	beq.w	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8004376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800437a:	2801      	cmp	r0, #1
 800437c:	f171 0108 	sbcs.w	r1, r1, #8
 8004380:	f081 82a6 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004388:	1f0c      	subs	r4, r1, #4
 800438a:	ea50 0104 	orrs.w	r1, r0, r4
 800438e:	f000 8753 	beq.w	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8004392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004396:	2801      	cmp	r0, #1
 8004398:	f171 0104 	sbcs.w	r1, r1, #4
 800439c:	f081 8298 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043a4:	1e8c      	subs	r4, r1, #2
 80043a6:	ea50 0104 	orrs.w	r1, r0, r4
 80043aa:	f001 8173 	beq.w	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80043ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b2:	2801      	cmp	r0, #1
 80043b4:	f171 0102 	sbcs.w	r1, r1, #2
 80043b8:	f081 828a 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043c0:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80043c4:	4321      	orrs	r1, r4
 80043c6:	f001 80fe 	beq.w	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80043ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043ce:	4ccb      	ldr	r4, [pc, #812]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80043d0:	42a0      	cmp	r0, r4
 80043d2:	f171 0100 	sbcs.w	r1, r1, #0
 80043d6:	f081 827b 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043de:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80043e2:	4321      	orrs	r1, r4
 80043e4:	f001 8076 	beq.w	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 80043e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043ec:	4cc4      	ldr	r4, [pc, #784]	@ (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80043ee:	42a0      	cmp	r0, r4
 80043f0:	f171 0100 	sbcs.w	r1, r1, #0
 80043f4:	f081 826c 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043fc:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8004400:	4321      	orrs	r1, r4
 8004402:	f000 87b5 	beq.w	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8004406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440a:	4cbe      	ldr	r4, [pc, #760]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 800440c:	42a0      	cmp	r0, r4
 800440e:	f171 0100 	sbcs.w	r1, r1, #0
 8004412:	f081 825d 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800441a:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800441e:	4321      	orrs	r1, r4
 8004420:	f000 8738 	beq.w	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8004424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004428:	4cb7      	ldr	r4, [pc, #732]	@ (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800442a:	42a0      	cmp	r0, r4
 800442c:	f171 0100 	sbcs.w	r1, r1, #0
 8004430:	f081 824e 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004438:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800443c:	4321      	orrs	r1, r4
 800443e:	f001 81cd 	beq.w	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8004442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004446:	4cb1      	ldr	r4, [pc, #708]	@ (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8004448:	42a0      	cmp	r0, r4
 800444a:	f171 0100 	sbcs.w	r1, r1, #0
 800444e:	f081 823f 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004456:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800445a:	4321      	orrs	r1, r4
 800445c:	f000 80d9 	beq.w	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004464:	4caa      	ldr	r4, [pc, #680]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8004466:	42a0      	cmp	r0, r4
 8004468:	f171 0100 	sbcs.w	r1, r1, #0
 800446c:	f081 8230 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004474:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8004478:	4321      	orrs	r1, r4
 800447a:	f000 83da 	beq.w	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800447e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004482:	4ca4      	ldr	r4, [pc, #656]	@ (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8004484:	42a0      	cmp	r0, r4
 8004486:	f171 0100 	sbcs.w	r1, r1, #0
 800448a:	f081 8221 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800448e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004492:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8004496:	4321      	orrs	r1, r4
 8004498:	f000 8627 	beq.w	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 800449c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044a0:	4c9d      	ldr	r4, [pc, #628]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80044a2:	42a0      	cmp	r0, r4
 80044a4:	f171 0100 	sbcs.w	r1, r1, #0
 80044a8:	f081 8212 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044b0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80044b4:	4321      	orrs	r1, r4
 80044b6:	f000 857a 	beq.w	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80044ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044be:	4c97      	ldr	r4, [pc, #604]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	f171 0100 	sbcs.w	r1, r1, #0
 80044c6:	f081 8203 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044ce:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80044d2:	4321      	orrs	r1, r4
 80044d4:	f000 84fb 	beq.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80044d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044dc:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80044e0:	f171 0100 	sbcs.w	r1, r1, #0
 80044e4:	f081 81f4 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044ec:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80044f0:	4321      	orrs	r1, r4
 80044f2:	f000 84a9 	beq.w	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80044f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044fa:	f248 0401 	movw	r4, #32769	@ 0x8001
 80044fe:	42a0      	cmp	r0, r4
 8004500:	f171 0100 	sbcs.w	r1, r1, #0
 8004504:	f081 81e4 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800450c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8004510:	4321      	orrs	r1, r4
 8004512:	f000 8456 	beq.w	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8004516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800451a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800451e:	42a0      	cmp	r0, r4
 8004520:	f171 0100 	sbcs.w	r1, r1, #0
 8004524:	f081 81d4 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800452c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8004530:	4321      	orrs	r1, r4
 8004532:	f000 8403 	beq.w	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800453a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800453e:	42a0      	cmp	r0, r4
 8004540:	f171 0100 	sbcs.w	r1, r1, #0
 8004544:	f081 81c4 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800454c:	2821      	cmp	r0, #33	@ 0x21
 800454e:	f171 0100 	sbcs.w	r1, r1, #0
 8004552:	d255      	bcs.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004558:	4301      	orrs	r1, r0
 800455a:	f001 81b9 	beq.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800455e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004562:	1e42      	subs	r2, r0, #1
 8004564:	f141 33ff 	adc.w	r3, r1, #4294967295
 8004568:	2a20      	cmp	r2, #32
 800456a:	f173 0100 	sbcs.w	r1, r3, #0
 800456e:	f081 81af 	bcs.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004572:	2a1f      	cmp	r2, #31
 8004574:	f201 81ac 	bhi.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004578:	a101      	add	r1, pc, #4	@ (adr r1, 8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800457a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800457e:	bf00      	nop
 8004580:	08004657 	.word	0x08004657
 8004584:	08004755 	.word	0x08004755
 8004588:	080058d1 	.word	0x080058d1
 800458c:	08004815 	.word	0x08004815
 8004590:	080058d1 	.word	0x080058d1
 8004594:	080058d1 	.word	0x080058d1
 8004598:	080058d1 	.word	0x080058d1
 800459c:	080048e5 	.word	0x080048e5
 80045a0:	080058d1 	.word	0x080058d1
 80045a4:	080058d1 	.word	0x080058d1
 80045a8:	080058d1 	.word	0x080058d1
 80045ac:	080058d1 	.word	0x080058d1
 80045b0:	080058d1 	.word	0x080058d1
 80045b4:	080058d1 	.word	0x080058d1
 80045b8:	080058d1 	.word	0x080058d1
 80045bc:	080049c9 	.word	0x080049c9
 80045c0:	080058d1 	.word	0x080058d1
 80045c4:	080058d1 	.word	0x080058d1
 80045c8:	080058d1 	.word	0x080058d1
 80045cc:	080058d1 	.word	0x080058d1
 80045d0:	080058d1 	.word	0x080058d1
 80045d4:	080058d1 	.word	0x080058d1
 80045d8:	080058d1 	.word	0x080058d1
 80045dc:	080058d1 	.word	0x080058d1
 80045e0:	080058d1 	.word	0x080058d1
 80045e4:	080058d1 	.word	0x080058d1
 80045e8:	080058d1 	.word	0x080058d1
 80045ec:	080058d1 	.word	0x080058d1
 80045f0:	080058d1 	.word	0x080058d1
 80045f4:	080058d1 	.word	0x080058d1
 80045f8:	080058d1 	.word	0x080058d1
 80045fc:	08004a9f 	.word	0x08004a9f
 8004600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004604:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004608:	430b      	orrs	r3, r1
 800460a:	f000 82b3 	beq.w	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800460e:	f001 b95f 	b.w	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004612:	4b43      	ldr	r3, [pc, #268]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004614:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004624:	f107 0320 	add.w	r3, r7, #32
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff f9cf 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004632:	f001 b950 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d108      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fb2f 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800464a:	f001 b944 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004652:	f001 b940 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004656:	4b32      	ldr	r3, [pc, #200]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004668:	f7fd ffc4 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 800466c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800466e:	f001 b932 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004672:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800467a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800467e:	d10a      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	2b01      	cmp	r3, #1
 8004684:	d107      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004686:	f107 0314 	add.w	r3, r7, #20
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fb0a 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
 8004694:	e05c      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8004696:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800469e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a2:	d10a      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d107      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fc64 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b8:	e04a      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80046ba:	4b19      	ldr	r3, [pc, #100]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d109      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046cc:	4b14      	ldr	r3, [pc, #80]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	08db      	lsrs	r3, r3, #3
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	4a13      	ldr	r2, [pc, #76]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046de:	e037      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80046e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ec:	d11e      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d11b      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f8:	e02a      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80046fa:	bf00      	nop
 80046fc:	40000001 	.word	0x40000001
 8004700:	20000001 	.word	0x20000001
 8004704:	10000001 	.word	0x10000001
 8004708:	08000001 	.word	0x08000001
 800470c:	04000001 	.word	0x04000001
 8004710:	00400001 	.word	0x00400001
 8004714:	00200001 	.word	0x00200001
 8004718:	00040001 	.word	0x00040001
 800471c:	00020001 	.word	0x00020001
 8004720:	44020c00 	.word	0x44020c00
 8004724:	03d09000 	.word	0x03d09000
 8004728:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800472c:	4ba3      	ldr	r3, [pc, #652]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800472e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b02      	cmp	r3, #2
 8004738:	d106      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	2b05      	cmp	r3, #5
 800473e:	d103      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8004740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004744:	637b      	str	r3, [r7, #52]	@ 0x34
 8004746:	e003      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800474c:	f001 b8c3 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004750:	f001 b8c1 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004754:	4b99      	ldr	r3, [pc, #612]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800475a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004766:	f7fd ff2f 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 800476a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800476c:	f001 b8b3 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004770:	4b92      	ldr	r3, [pc, #584]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800477c:	d10a      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	2b08      	cmp	r3, #8
 8004782:	d107      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fa8b 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
 8004792:	e03d      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	2b10      	cmp	r3, #16
 8004798:	d108      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fbec 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047a8:	f001 b895 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80047ac:	4b83      	ldr	r3, [pc, #524]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d10c      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	2b18      	cmp	r3, #24
 80047bc:	d109      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047be:	4b7f      	ldr	r3, [pc, #508]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	08db      	lsrs	r3, r3, #3
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	4a7d      	ldr	r2, [pc, #500]	@ (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d0:	e01e      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80047d2:	4b7a      	ldr	r3, [pc, #488]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d102      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80047e6:	4b77      	ldr	r3, [pc, #476]	@ (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80047e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ea:	e011      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80047ec:	4b73      	ldr	r3, [pc, #460]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d106      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	2b28      	cmp	r3, #40	@ 0x28
 80047fe:	d103      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8004800:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
 8004806:	e003      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800480c:	f001 b863 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004810:	f001 b861 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004814:	4b69      	ldr	r3, [pc, #420]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004816:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800481a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800481e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004826:	f7fd fecf 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 800482a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800482c:	f001 b853 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004830:	4b62      	ldr	r3, [pc, #392]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483c:	d10a      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d107      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fa2b 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34
 8004852:	e045      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8004854:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004860:	d10a      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	2b80      	cmp	r3, #128	@ 0x80
 8004866:	d107      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fb85 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	637b      	str	r3, [r7, #52]	@ 0x34
 8004876:	e033      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004878:	4b50      	ldr	r3, [pc, #320]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d10c      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	2bc0      	cmp	r3, #192	@ 0xc0
 8004888:	d109      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800488a:	4b4c      	ldr	r3, [pc, #304]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	08db      	lsrs	r3, r3, #3
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	4a4a      	ldr	r2, [pc, #296]	@ (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
 800489c:	e020      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800489e:	4b47      	ldr	r3, [pc, #284]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048aa:	d106      	bne.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b2:	d102      	bne.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80048b4:	4b43      	ldr	r3, [pc, #268]	@ (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b8:	e012      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80048ba:	4b40      	ldr	r3, [pc, #256]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d107      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80048ce:	d103      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80048d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048dc:	f000 bffb 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80048e0:	f000 bff9 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80048e4:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048ea:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80048ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048f6:	f7fd fe67 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80048fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80048fc:	f000 bfeb 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8004900:	4b2e      	ldr	r3, [pc, #184]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800490c:	d10b      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004914:	d107      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004916:	f107 0314 	add.w	r3, r7, #20
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff f9c2 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	637b      	str	r3, [r7, #52]	@ 0x34
 8004924:	e047      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8004926:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800492e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004932:	d10b      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d107      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fb1b 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
 800494a:	e034      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d10d      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800495e:	d109      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004960:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	4a15      	ldr	r2, [pc, #84]	@ (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	637b      	str	r3, [r7, #52]	@ 0x34
 8004972:	e020      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800497c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004980:	d106      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004988:	d102      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800498a:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800498c:	637b      	str	r3, [r7, #52]	@ 0x34
 800498e:	e012      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004990:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d107      	bne.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80049a4:	d103      	bne.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049b2:	f000 bf90 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80049b6:	f000 bf8e 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80049ba:	bf00      	nop
 80049bc:	44020c00 	.word	0x44020c00
 80049c0:	03d09000 	.word	0x03d09000
 80049c4:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80049c8:	4ba5      	ldr	r3, [pc, #660]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80049ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80049d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80049da:	f7fd fdf5 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80049de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80049e0:	f000 bf79 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80049e4:	4b9e      	ldr	r3, [pc, #632]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049f0:	d10b      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f8:	d107      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff f950 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a08:	e047      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8004a0a:	4b95      	ldr	r3, [pc, #596]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff faa9 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a2e:	e034      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004a30:	4b8b      	ldr	r3, [pc, #556]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a42:	d109      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a44:	4b86      	ldr	r3, [pc, #536]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	4a85      	ldr	r2, [pc, #532]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a56:	e020      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8004a58:	4b81      	ldr	r3, [pc, #516]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a64:	d106      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8004a6e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a72:	e012      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004a74:	4b7a      	ldr	r3, [pc, #488]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d107      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004a88:	d103      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a96:	f000 bf1e 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a9a:	f000 bf1c 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004a9e:	4b70      	ldr	r3, [pc, #448]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004aa4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8004aa8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7fd fd8a 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ab6:	f000 bf0e 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8004aba:	4b69      	ldr	r3, [pc, #420]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff f8e5 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ade:	e047      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8004ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aec:	d10b      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af4:	d107      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fa3e 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b04:	e034      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004b06:	4b56      	ldr	r3, [pc, #344]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d10d      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8004b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b14:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004b18:	d109      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b1a:	4b51      	ldr	r3, [pc, #324]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	08db      	lsrs	r3, r3, #3
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	4a4f      	ldr	r2, [pc, #316]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b2c:	e020      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8004b2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b42:	d102      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8004b44:	4b48      	ldr	r3, [pc, #288]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b48:	e012      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004b4a:	4b45      	ldr	r3, [pc, #276]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d107      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004b5e:	d103      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8004b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b66:	e003      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b6c:	f000 beb3 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004b70:	f000 beb1 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004b74:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b7a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004b86:	f7fd fd4b 	bl	8002620 <HAL_RCC_GetPCLK3Freq>
 8004b8a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b8c:	f000 bea3 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b96:	d108      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff f881 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ba6:	f000 be96 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bb0:	d108      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff f9e0 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bc0:	f000 be89 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004bc4:	4b26      	ldr	r3, [pc, #152]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d10d      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bd6:	d109      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bd8:	4b21      	ldr	r3, [pc, #132]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	4a20      	ldr	r2, [pc, #128]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bea:	e020      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004bec:	4b1c      	ldr	r3, [pc, #112]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c00:	d102      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8004c02:	4b19      	ldr	r3, [pc, #100]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c06:	e012      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004c08:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d107      	bne.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c1c:	d103      	bne.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c24:	e003      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c2a:	f000 be54 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004c2e:	f000 be52 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004c44:	f7fd fca4 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 8004c48:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004c4a:	f000 be44 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d10b      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c54:	f7fd fb70 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8004c58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c5a:	f000 be3c 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004c5e:	bf00      	nop
 8004c60:	44020c00 	.word	0x44020c00
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d108      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c72:	f107 0314 	add.w	r3, r7, #20
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff f814 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c80:	f000 be29 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004c84:	4b9f      	ldr	r3, [pc, #636]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c90:	d105      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d102      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8004c98:	4b9b      	ldr	r3, [pc, #620]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c9c:	e023      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004c9e:	4b99      	ldr	r3, [pc, #612]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cb0:	4b94      	ldr	r3, [pc, #592]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	4a94      	ldr	r2, [pc, #592]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc2:	e010      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd0:	d105      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d102      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8004cd8:	4b8d      	ldr	r3, [pc, #564]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ce2:	f000 bdf8 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ce6:	f000 bdf6 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004cea:	4b86      	ldr	r3, [pc, #536]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004cf6:	4b83      	ldr	r3, [pc, #524]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d106      	bne.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8004d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d10:	e012      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004d12:	4b7c      	ldr	r3, [pc, #496]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d20:	d106      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d103      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8004d28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d2e:	e003      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004d34:	f000 bdcf 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004d38:	f000 bdcd 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004d3c:	4b71      	ldr	r3, [pc, #452]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d4e:	f7fd fc3b 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8004d52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d54:	f000 bdbf 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d5e:	d108      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d60:	f107 0308 	add.w	r3, r7, #8
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff f909 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d6e:	f000 bdb2 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004d72:	4b64      	ldr	r3, [pc, #400]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d10d      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d84:	d109      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d86:	4b5f      	ldr	r3, [pc, #380]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	08db      	lsrs	r3, r3, #3
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	4a5e      	ldr	r2, [pc, #376]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d98:	e011      	b.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da6:	d106      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dae:	d102      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8004db0:	4b57      	ldr	r3, [pc, #348]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db4:	e003      	b.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dba:	f000 bd8c 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004dbe:	f000 bd8a 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004dc2:	4b50      	ldr	r3, [pc, #320]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dc8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fd fbf8 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004dda:	f000 bd7c 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004de4:	d108      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff f8c6 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004df4:	f000 bd6f 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004df8:	4b42      	ldr	r3, [pc, #264]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d10d      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e0a:	d109      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	08db      	lsrs	r3, r3, #3
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	4a3d      	ldr	r2, [pc, #244]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1e:	e011      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004e20:	4b38      	ldr	r3, [pc, #224]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e34:	d102      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8004e36:	4b36      	ldr	r3, [pc, #216]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3a:	e003      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e40:	f000 bd49 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e44:	f000 bd47 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004e48:	4b2e      	ldr	r3, [pc, #184]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e4e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004e52:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004e5a:	f7fd fbe1 	bl	8002620 <HAL_RCC_GetPCLK3Freq>
 8004e5e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004e60:	f000 bd39 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e6a:	d108      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e6c:	f107 0308 	add.w	r3, r7, #8
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff f883 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e7a:	f000 bd2c 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8004e7e:	4b21      	ldr	r3, [pc, #132]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d10d      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e90:	d109      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e92:	4b1c      	ldr	r3, [pc, #112]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea4:	e011      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8004ea6:	4b17      	ldr	r3, [pc, #92]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8004ebc:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec0:	e003      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ec6:	f000 bd06 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004eca:	f000 bd04 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ed4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004ed8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d104      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ee0:	f7fd fb72 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8004ee4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ee6:	f000 bcf6 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ef0:	d110      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff f840 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f00:	f000 bce9 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f04:	44020c00 	.word	0x44020c00
 8004f08:	017d7840 	.word	0x017d7840
 8004f0c:	03d09000 	.word	0x03d09000
 8004f10:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004f14:	4ba4      	ldr	r3, [pc, #656]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d10e      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f26:	d10a      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f28:	4b9f      	ldr	r3, [pc, #636]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	4a9e      	ldr	r2, [pc, #632]	@ (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
 8004f38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f3a:	f000 bccc 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f42:	f000 bcc8 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004f46:	4b98      	ldr	r3, [pc, #608]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f4c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004f50:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004f58:	f7fd fb62 	bl	8002620 <HAL_RCC_GetPCLK3Freq>
 8004f5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f5e:	f000 bcba 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f68:	d108      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff f804 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f78:	f000 bcad 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004f7c:	4b8a      	ldr	r3, [pc, #552]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d10e      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f8e:	d10a      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f90:	4b85      	ldr	r3, [pc, #532]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	08db      	lsrs	r3, r3, #3
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	4a84      	ldr	r2, [pc, #528]	@ (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fa2:	f000 bc98 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004faa:	f000 bc94 	b.w	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004fae:	4b7e      	ldr	r3, [pc, #504]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004fb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004fc0:	d056      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004fc8:	f200 808b 	bhi.w	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd2:	d03e      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fda:	f200 8082 	bhi.w	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe4:	d027      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fec:	d879      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff4:	d017      	beq.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ffc:	d871      	bhi.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800500a:	d004      	beq.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 800500c:	e069      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800500e:	f7fd fb07 	bl	8002620 <HAL_RCC_GetPCLK3Freq>
 8005012:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005014:	e068      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fe42 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005024:	e060      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005026:	f107 0308 	add.w	r3, r7, #8
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe ffa6 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005034:	e058      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005036:	4b5c      	ldr	r3, [pc, #368]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d103      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8005044:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800504a:	e04d      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005050:	e04a      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005052:	4b55      	ldr	r3, [pc, #340]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800505c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005060:	d103      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8005062:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005066:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005068:	e03e      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800506e:	e03b      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005070:	4b4d      	ldr	r3, [pc, #308]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005076:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800507a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800507c:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d10c      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8005088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800508e:	4b46      	ldr	r3, [pc, #280]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	4a44      	ldr	r2, [pc, #272]	@ (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a0:	e01e      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050a2:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ae:	d106      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80050b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b6:	d102      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80050b8:	4b3d      	ldr	r3, [pc, #244]	@ (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80050bc:	e010      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050be:	4b3a      	ldr	r3, [pc, #232]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80050cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050d2:	d102      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80050d4:	4b37      	ldr	r3, [pc, #220]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d8:	e002      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80050e0:	e002      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050e6:	bf00      	nop
          }
        }
        break;
 80050e8:	e3f5      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80050ea:	4b2f      	ldr	r3, [pc, #188]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80050f0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80050f4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050fc:	d05f      	beq.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005104:	f200 8094 	bhi.w	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800510e:	d03f      	beq.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005116:	f200 808b 	bhi.w	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005120:	d028      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005128:	f200 8082 	bhi.w	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005132:	d017      	beq.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513a:	d879      	bhi.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005148:	d004      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800514a:	e071      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fd fa3c 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8005150:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005152:	e070      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	4618      	mov	r0, r3
 800515a:	f7fe fda3 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005162:	e068      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005164:	f107 0308 	add.w	r3, r7, #8
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe ff07 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005172:	e060      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005174:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d103      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8005182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005188:	e055      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800518e:	e052      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005196:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800519a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519e:	d10b      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80051a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80051a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80051a6:	e046      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80051a8:	44020c00 	.word	0x44020c00
 80051ac:	03d09000 	.word	0x03d09000
 80051b0:	003d0900 	.word	0x003d0900
 80051b4:	017d7840 	.word	0x017d7840
              frequency = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051bc:	e03b      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051be:	4bae      	ldr	r3, [pc, #696]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80051c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051ca:	4bab      	ldr	r3, [pc, #684]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 80051d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051dc:	4ba6      	ldr	r3, [pc, #664]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	08db      	lsrs	r3, r3, #3
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	4aa5      	ldr	r2, [pc, #660]	@ (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ee:	e01e      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051fc:	d106      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005204:	d102      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005206:	4b9e      	ldr	r3, [pc, #632]	@ (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
 800520a:	e010      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800520c:	4b9a      	ldr	r3, [pc, #616]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005218:	d106      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005220:	d102      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005222:	4b98      	ldr	r3, [pc, #608]	@ (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005224:	637b      	str	r3, [r7, #52]	@ 0x34
 8005226:	e002      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800522e:	e002      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005234:	bf00      	nop
          }
        }
        break;
 8005236:	e34e      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005238:	4b8f      	ldr	r3, [pc, #572]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800523a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800523e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005242:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005244:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005250:	d105      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8005258:	4b8a      	ldr	r3, [pc, #552]	@ (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800525c:	e33b      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005264:	d107      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005266:	f107 0320 	add.w	r3, r7, #32
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fbae 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005274:	e32f      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800527c:	d107      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800527e:	f107 0314 	add.w	r3, r7, #20
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fd0e 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800528c:	e323      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005292:	e320      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005294:	4b78      	ldr	r3, [pc, #480]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d860      	bhi.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80052a6:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052c1 	.word	0x080052c1
 80052b0:	080052d1 	.word	0x080052d1
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f1 	.word	0x080052f1
 80052bc:	080052f7 	.word	0x080052f7
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052c0:	f107 0320 	add.w	r3, r7, #32
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe fb81 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052ce:	e04e      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fce5 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052de:	e046      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052e0:	f107 0308 	add.w	r3, r7, #8
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fe49 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052ee:	e03e      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80052f0:	4b65      	ldr	r3, [pc, #404]	@ (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052f4:	e03b      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052f6:	4b60      	ldr	r3, [pc, #384]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80052f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052fc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005300:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005302:	4b5d      	ldr	r3, [pc, #372]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d10c      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005314:	4b58      	ldr	r3, [pc, #352]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	4a57      	ldr	r2, [pc, #348]	@ (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	637b      	str	r3, [r7, #52]	@ 0x34
 8005326:	e01e      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005328:	4b53      	ldr	r3, [pc, #332]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005334:	d106      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533c:	d102      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800533e:	4b50      	ldr	r3, [pc, #320]	@ (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
 8005342:	e010      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005344:	4b4c      	ldr	r3, [pc, #304]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005350:	d106      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8005352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005358:	d102      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800535a:	4b4a      	ldr	r3, [pc, #296]	@ (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800535c:	637b      	str	r3, [r7, #52]	@ 0x34
 800535e:	e002      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005364:	e003      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8005366:	e002      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800536c:	bf00      	nop
          }
        }
        break;
 800536e:	e2b2      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005370:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800537a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	2b20      	cmp	r3, #32
 8005380:	f200 80a4 	bhi.w	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8005384:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	08005411 	.word	0x08005411
 8005390:	080054cd 	.word	0x080054cd
 8005394:	080054cd 	.word	0x080054cd
 8005398:	080054cd 	.word	0x080054cd
 800539c:	080054cd 	.word	0x080054cd
 80053a0:	080054cd 	.word	0x080054cd
 80053a4:	080054cd 	.word	0x080054cd
 80053a8:	080054cd 	.word	0x080054cd
 80053ac:	08005421 	.word	0x08005421
 80053b0:	080054cd 	.word	0x080054cd
 80053b4:	080054cd 	.word	0x080054cd
 80053b8:	080054cd 	.word	0x080054cd
 80053bc:	080054cd 	.word	0x080054cd
 80053c0:	080054cd 	.word	0x080054cd
 80053c4:	080054cd 	.word	0x080054cd
 80053c8:	080054cd 	.word	0x080054cd
 80053cc:	08005431 	.word	0x08005431
 80053d0:	080054cd 	.word	0x080054cd
 80053d4:	080054cd 	.word	0x080054cd
 80053d8:	080054cd 	.word	0x080054cd
 80053dc:	080054cd 	.word	0x080054cd
 80053e0:	080054cd 	.word	0x080054cd
 80053e4:	080054cd 	.word	0x080054cd
 80053e8:	080054cd 	.word	0x080054cd
 80053ec:	08005441 	.word	0x08005441
 80053f0:	080054cd 	.word	0x080054cd
 80053f4:	080054cd 	.word	0x080054cd
 80053f8:	080054cd 	.word	0x080054cd
 80053fc:	080054cd 	.word	0x080054cd
 8005400:	080054cd 	.word	0x080054cd
 8005404:	080054cd 	.word	0x080054cd
 8005408:	080054cd 	.word	0x080054cd
 800540c:	08005447 	.word	0x08005447
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005410:	f107 0320 	add.w	r3, r7, #32
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fad9 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800541e:	e058      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005420:	f107 0314 	add.w	r3, r7, #20
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe fc3d 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800542e:	e050      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005430:	f107 0308 	add.w	r3, r7, #8
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe fda1 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800543e:	e048      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005440:	4b11      	ldr	r3, [pc, #68]	@ (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005444:	e045      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005446:	4b0c      	ldr	r3, [pc, #48]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800544c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005452:	4b09      	ldr	r3, [pc, #36]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b02      	cmp	r3, #2
 800545c:	d116      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 800545e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d113      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005464:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	08db      	lsrs	r3, r3, #3
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	4a03      	ldr	r2, [pc, #12]	@ (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
 8005474:	637b      	str	r3, [r7, #52]	@ 0x34
 8005476:	e028      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005478:	44020c00 	.word	0x44020c00
 800547c:	03d09000 	.word	0x03d09000
 8005480:	003d0900 	.word	0x003d0900
 8005484:	017d7840 	.word	0x017d7840
 8005488:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800548c:	4b95      	ldr	r3, [pc, #596]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005498:	d106      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a0:	d102      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80054a2:	4b91      	ldr	r3, [pc, #580]	@ (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a6:	e010      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054a8:	4b8e      	ldr	r3, [pc, #568]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054b4:	d106      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80054b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054bc:	d102      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80054be:	4b8b      	ldr	r3, [pc, #556]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c2:	e002      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80054ca:	e002      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054d0:	bf00      	nop
          }
        }
        break;
 80054d2:	e200      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80054d4:	4b83      	ldr	r3, [pc, #524]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80054d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80054de:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e6:	d031      	beq.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ee:	d866      	bhi.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054f4:	d027      	beq.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80054fa:	d860      	bhi.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	2b80      	cmp	r3, #128	@ 0x80
 8005500:	d019      	beq.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	2b80      	cmp	r3, #128	@ 0x80
 8005506:	d85a      	bhi.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d008      	beq.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8005514:	e053      	b.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005516:	f107 0320 	add.w	r3, r7, #32
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fa56 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005524:	e04e      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005526:	f107 0314 	add.w	r3, r7, #20
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fbba 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005534:	e046      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fd1e 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005544:	e03e      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005546:	4b6a      	ldr	r3, [pc, #424]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8005548:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800554a:	e03b      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800554c:	4b65      	ldr	r3, [pc, #404]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800554e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005552:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005558:	4b62      	ldr	r3, [pc, #392]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b02      	cmp	r3, #2
 8005562:	d10c      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800556a:	4b5e      	ldr	r3, [pc, #376]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	4a5f      	ldr	r2, [pc, #380]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
 800557c:	e01e      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800557e:	4b59      	ldr	r3, [pc, #356]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800558a:	d106      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005592:	d102      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005594:	4b54      	ldr	r3, [pc, #336]	@ (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005596:	637b      	str	r3, [r7, #52]	@ 0x34
 8005598:	e010      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800559a:	4b52      	ldr	r3, [pc, #328]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a6:	d106      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ae:	d102      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80055b0:	4b4e      	ldr	r3, [pc, #312]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80055b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b4:	e002      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80055ba:	e003      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055c2:	bf00      	nop
          }
        }
        break;
 80055c4:	e187      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80055c6:	4b47      	ldr	r3, [pc, #284]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055cc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80055d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80055d8:	f7fd f80c 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 80055dc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80055de:	e17a      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80055e0:	4b40      	ldr	r3, [pc, #256]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ec:	d10b      	bne.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055f4:	d107      	bne.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f6:	f107 0314 	add.w	r3, r7, #20
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fb52 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
 8005604:	e045      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8005606:	4b37      	ldr	r3, [pc, #220]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800560e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005612:	d10b      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800561a:	d107      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe fcab 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
 800562a:	e032      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800562c:	4b2d      	ldr	r3, [pc, #180]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d10d      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800563e:	d109      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005640:	4b28      	ldr	r3, [pc, #160]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	08db      	lsrs	r3, r3, #3
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	4a2a      	ldr	r2, [pc, #168]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
 8005650:	637b      	str	r3, [r7, #52]	@ 0x34
 8005652:	e01e      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005654:	4b23      	ldr	r3, [pc, #140]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800565c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005660:	d106      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005668:	d102      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800566a:	4b1f      	ldr	r3, [pc, #124]	@ (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800566c:	637b      	str	r3, [r7, #52]	@ 0x34
 800566e:	e010      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8005670:	4b1c      	ldr	r3, [pc, #112]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800567c:	d106      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005684:	d102      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8005686:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
 800568a:	e002      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005690:	e121      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005692:	e120      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005694:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005696:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d861      	bhi.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80056a6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056c5 	.word	0x080056c5
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	080056f9 	.word	0x080056f9
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80056bc:	f7fc ff68 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80056c0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80056c2:	e055      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c4:	f107 0320 	add.w	r3, r7, #32
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe f97f 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056d2:	e04d      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d4:	f107 0314 	add.w	r3, r7, #20
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe fae3 	bl	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056e2:	e045      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80056e4:	44020c00 	.word	0x44020c00
 80056e8:	003d0900 	.word	0x003d0900
 80056ec:	017d7840 	.word	0x017d7840
 80056f0:	00bb8000 	.word	0x00bb8000
 80056f4:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056f8:	4b79      	ldr	r3, [pc, #484]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80056fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005704:	4b76      	ldr	r3, [pc, #472]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b02      	cmp	r3, #2
 800570e:	d10c      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005716:	4b72      	ldr	r3, [pc, #456]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	08db      	lsrs	r3, r3, #3
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	4a70      	ldr	r2, [pc, #448]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8005722:	fa22 f303 	lsr.w	r3, r2, r3
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
 8005728:	e01e      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800572a:	4b6d      	ldr	r3, [pc, #436]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005736:	d106      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573e:	d102      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005740:	4b69      	ldr	r3, [pc, #420]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
 8005744:	e010      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005746:	4b66      	ldr	r3, [pc, #408]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005752:	d106      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800575a:	d102      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800575c:	4b63      	ldr	r3, [pc, #396]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005766:	e003      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800576e:	bf00      	nop
          }
        }
        break;
 8005770:	e0b1      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005772:	4b5b      	ldr	r3, [pc, #364]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005778:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800577e:	4b58      	ldr	r3, [pc, #352]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d106      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
 8005798:	e01f      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800579a:	4b51      	ldr	r3, [pc, #324]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800579c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a8:	d106      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	2b40      	cmp	r3, #64	@ 0x40
 80057ae:	d103      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80057b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b6:	e010      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80057b8:	4b49      	ldr	r3, [pc, #292]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c4:	d106      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d103      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80057cc:	f248 0312 	movw	r3, #32786	@ 0x8012
 80057d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d2:	e002      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80057d8:	e07d      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80057da:	e07c      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80057dc:	4b40      	ldr	r3, [pc, #256]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057e6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80057e8:	4b3d      	ldr	r3, [pc, #244]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f4:	d105      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d102      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80057fc:	4b3c      	ldr	r3, [pc, #240]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80057fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005800:	e031      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005802:	4b37      	ldr	r3, [pc, #220]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800580e:	d10a      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	2b10      	cmp	r3, #16
 8005814:	d107      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005816:	f107 0320 	add.w	r3, r7, #32
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe f8d6 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	637b      	str	r3, [r7, #52]	@ 0x34
 8005824:	e01f      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005826:	4b2e      	ldr	r3, [pc, #184]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b02      	cmp	r3, #2
 8005832:	d106      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	2b20      	cmp	r3, #32
 8005838:	d103      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005840:	e011      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005842:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800584c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005850:	d106      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d103      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8005858:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
 800585e:	e002      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005864:	e037      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005866:	e036      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005868:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800586a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800586e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005872:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	2b10      	cmp	r3, #16
 8005878:	d107      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800587a:	f107 0320 	add.w	r3, r7, #32
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe f8a4 	bl	80039cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005888:	e025      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800588a:	4b15      	ldr	r3, [pc, #84]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005896:	d10a      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	2b20      	cmp	r3, #32
 800589c:	d107      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fb6a 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ac:	e00f      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80058ae:	4b0c      	ldr	r3, [pc, #48]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ba:	d105      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	2b30      	cmp	r3, #48	@ 0x30
 80058c0:	d102      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80058c2:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80058c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c6:	e002      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80058cc:	e003      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80058ce:	e002      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058d4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80058d8:	4618      	mov	r0, r3
 80058da:	373c      	adds	r7, #60	@ 0x3c
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd90      	pop	{r4, r7, pc}
 80058e0:	44020c00 	.word	0x44020c00
 80058e4:	03d09000 	.word	0x03d09000
 80058e8:	003d0900 	.word	0x003d0900
 80058ec:	017d7840 	.word	0x017d7840
 80058f0:	02dc6c00 	.word	0x02dc6c00

080058f4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80058fc:	4b48      	ldr	r3, [pc, #288]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a47      	ldr	r2, [pc, #284]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005902:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005906:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005908:	f7fb fc1c 	bl	8001144 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800590e:	e008      	b.n	8005922 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005910:	f7fb fc18 	bl	8001144 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e07a      	b.n	8005a18 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005922:	4b3f      	ldr	r3, [pc, #252]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800592e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6852      	ldr	r2, [r2, #4]
 8005942:	0212      	lsls	r2, r2, #8
 8005944:	430a      	orrs	r2, r1
 8005946:	4936      	ldr	r1, [pc, #216]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	3b01      	subs	r3, #1
 8005952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	3b01      	subs	r3, #1
 800595c:	025b      	lsls	r3, r3, #9
 800595e:	b29b      	uxth	r3, r3
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	3b01      	subs	r3, #1
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	3b01      	subs	r3, #1
 8005976:	061b      	lsls	r3, r3, #24
 8005978:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800597c:	4928      	ldr	r1, [pc, #160]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005982:	4b27      	ldr	r3, [pc, #156]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	f023 020c 	bic.w	r2, r3, #12
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	4924      	ldr	r1, [pc, #144]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005990:	4313      	orrs	r3, r2
 8005992:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005994:	4b22      	ldr	r3, [pc, #136]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	f023 0220 	bic.w	r2, r3, #32
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	491f      	ldr	r1, [pc, #124]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80059a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ae:	491c      	ldr	r1, [pc, #112]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80059b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	4a19      	ldr	r2, [pc, #100]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80059c0:	4b17      	ldr	r3, [pc, #92]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6a12      	ldr	r2, [r2, #32]
 80059d0:	00d2      	lsls	r2, r2, #3
 80059d2:	4913      	ldr	r1, [pc, #76]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80059d8:	4b11      	ldr	r3, [pc, #68]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	4a10      	ldr	r2, [pc, #64]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059de:	f043 0310 	orr.w	r3, r3, #16
 80059e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80059e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 80059ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059f0:	f7fb fba8 	bl	8001144 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059f6:	e008      	b.n	8005a0a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059f8:	f7fb fba4 	bl	8001144 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e006      	b.n	8005a18 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a0a:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <RCCEx_PLL2_Config+0x12c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0

}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	44020c00 	.word	0x44020c00

08005a24 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005a2c:	4b48      	ldr	r3, [pc, #288]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a47      	ldr	r2, [pc, #284]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a38:	f7fb fb84 	bl	8001144 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a3e:	e008      	b.n	8005a52 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a40:	f7fb fb80 	bl	8001144 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e07a      	b.n	8005b48 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a52:	4b3f      	ldr	r3, [pc, #252]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6811      	ldr	r1, [r2, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6852      	ldr	r2, [r2, #4]
 8005a72:	0212      	lsls	r2, r2, #8
 8005a74:	430a      	orrs	r2, r1
 8005a76:	4936      	ldr	r1, [pc, #216]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	630b      	str	r3, [r1, #48]	@ 0x30
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	025b      	lsls	r3, r3, #9
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005aac:	4928      	ldr	r1, [pc, #160]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ab2:	4b27      	ldr	r3, [pc, #156]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab6:	f023 020c 	bic.w	r2, r3, #12
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	4924      	ldr	r1, [pc, #144]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005ac4:	4b22      	ldr	r3, [pc, #136]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	f023 0220 	bic.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	491f      	ldr	r1, [pc, #124]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	491c      	ldr	r1, [pc, #112]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	4a19      	ldr	r2, [pc, #100]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005aea:	f023 0310 	bic.w	r3, r3, #16
 8005aee:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005af0:	4b17      	ldr	r3, [pc, #92]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005af8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6a12      	ldr	r2, [r2, #32]
 8005b00:	00d2      	lsls	r2, r2, #3
 8005b02:	4913      	ldr	r1, [pc, #76]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005b08:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	4a10      	ldr	r2, [pc, #64]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005b0e:	f043 0310 	orr.w	r3, r3, #16
 8005b12:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005b14:	4b0e      	ldr	r3, [pc, #56]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a0d      	ldr	r2, [pc, #52]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b20:	f7fb fb10 	bl	8001144 <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b28:	f7fb fb0c 	bl	8001144 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e006      	b.n	8005b48 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b3a:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <RCCEx_PLL3_Config+0x12c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	44020c00 	.word	0x44020c00

08005b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e042      	b.n	8005bec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fb f8f3 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2224      	movs	r2, #36	@ 0x24
 8005b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fa74 	bl	800608c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f8c3 	bl	8005d30 <UART_SetConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e01b      	b.n	8005bec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 faf3 	bl	80061d0 <UART_CheckIdleState>
 8005bea:	4603      	mov	r3, r0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08a      	sub	sp, #40	@ 0x28
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	f040 808b 	bne.w	8005d26 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_UART_Transmit+0x28>
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e083      	b.n	8005d28 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2a:	2b80      	cmp	r3, #128	@ 0x80
 8005c2c:	d107      	bne.n	8005c3e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c3c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2221      	movs	r2, #33	@ 0x21
 8005c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c4e:	f7fb fa79 	bl	8001144 <HAL_GetTick>
 8005c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6c:	d108      	bne.n	8005c80 <HAL_UART_Transmit+0x8c>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	e003      	b.n	8005c88 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c88:	e030      	b.n	8005cec <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2180      	movs	r1, #128	@ 0x80
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fb45 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e03d      	b.n	8005d28 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	61bb      	str	r3, [r7, #24]
 8005cc8:	e007      	b.n	8005cda <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1c8      	bne.n	8005c8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2140      	movs	r1, #64	@ 0x40
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fb0e 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e006      	b.n	8005d28 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e000      	b.n	8005d28 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005d26:	2302      	movs	r3, #2
  }
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d34:	b094      	sub	sp, #80	@ 0x50
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b83      	ldr	r3, [pc, #524]	@ (8005f54 <UART_SetConfig+0x224>)
 8005d46:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	497c      	ldr	r1, [pc, #496]	@ (8005f58 <UART_SetConfig+0x228>)
 8005d68:	4019      	ands	r1, r3
 8005d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d80:	68d9      	ldr	r1, [r3, #12]
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	ea40 0301 	orr.w	r3, r0, r1
 8005d8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b6f      	ldr	r3, [pc, #444]	@ (8005f54 <UART_SetConfig+0x224>)
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d009      	beq.n	8005db0 <UART_SetConfig+0x80>
 8005d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b6e      	ldr	r3, [pc, #440]	@ (8005f5c <UART_SetConfig+0x22c>)
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d004      	beq.n	8005db0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dac:	4313      	orrs	r3, r2
 8005dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005dba:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	f023 000f 	bic.w	r0, r3, #15
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	ea40 0301 	orr.w	r3, r0, r1
 8005dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	4b5e      	ldr	r3, [pc, #376]	@ (8005f60 <UART_SetConfig+0x230>)
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d102      	bne.n	8005df0 <UART_SetConfig+0xc0>
 8005dea:	2301      	movs	r3, #1
 8005dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dee:	e032      	b.n	8005e56 <UART_SetConfig+0x126>
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	4b5b      	ldr	r3, [pc, #364]	@ (8005f64 <UART_SetConfig+0x234>)
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d102      	bne.n	8005e00 <UART_SetConfig+0xd0>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dfe:	e02a      	b.n	8005e56 <UART_SetConfig+0x126>
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b58      	ldr	r3, [pc, #352]	@ (8005f68 <UART_SetConfig+0x238>)
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d102      	bne.n	8005e10 <UART_SetConfig+0xe0>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0e:	e022      	b.n	8005e56 <UART_SetConfig+0x126>
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b55      	ldr	r3, [pc, #340]	@ (8005f6c <UART_SetConfig+0x23c>)
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d102      	bne.n	8005e20 <UART_SetConfig+0xf0>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e1e:	e01a      	b.n	8005e56 <UART_SetConfig+0x126>
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b52      	ldr	r3, [pc, #328]	@ (8005f70 <UART_SetConfig+0x240>)
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d102      	bne.n	8005e30 <UART_SetConfig+0x100>
 8005e2a:	2310      	movs	r3, #16
 8005e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e2e:	e012      	b.n	8005e56 <UART_SetConfig+0x126>
 8005e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b4f      	ldr	r3, [pc, #316]	@ (8005f74 <UART_SetConfig+0x244>)
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d102      	bne.n	8005e40 <UART_SetConfig+0x110>
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3e:	e00a      	b.n	8005e56 <UART_SetConfig+0x126>
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b43      	ldr	r3, [pc, #268]	@ (8005f54 <UART_SetConfig+0x224>)
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d103      	bne.n	8005e52 <UART_SetConfig+0x122>
 8005e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e50:	e001      	b.n	8005e56 <UART_SetConfig+0x126>
 8005e52:	2300      	movs	r3, #0
 8005e54:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f54 <UART_SetConfig+0x224>)
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d005      	beq.n	8005e6c <UART_SetConfig+0x13c>
 8005e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b3d      	ldr	r3, [pc, #244]	@ (8005f5c <UART_SetConfig+0x22c>)
 8005e66:	429a      	cmp	r2, r3
 8005e68:	f040 8088 	bne.w	8005f7c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e6e:	2200      	movs	r2, #0
 8005e70:	623b      	str	r3, [r7, #32]
 8005e72:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e78:	f7fe f9ec 	bl	8004254 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e7c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 80eb 	beq.w	800605c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8005f78 <UART_SetConfig+0x248>)
 8005e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e98:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d305      	bcc.n	8005eb6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d903      	bls.n	8005ebe <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ebc:	e048      	b.n	8005f50 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	61fa      	str	r2, [r7, #28]
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	4a2b      	ldr	r2, [pc, #172]	@ (8005f78 <UART_SetConfig+0x248>)
 8005ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	617a      	str	r2, [r7, #20]
 8005ed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005edc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005ee0:	f7fa f9e0 	bl	80002a4 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4619      	mov	r1, r3
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	020b      	lsls	r3, r1, #8
 8005ef6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005efa:	0202      	lsls	r2, r0, #8
 8005efc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005efe:	6849      	ldr	r1, [r1, #4]
 8005f00:	0849      	lsrs	r1, r1, #1
 8005f02:	2000      	movs	r0, #0
 8005f04:	460c      	mov	r4, r1
 8005f06:	4605      	mov	r5, r0
 8005f08:	eb12 0804 	adds.w	r8, r2, r4
 8005f0c:	eb43 0905 	adc.w	r9, r3, r5
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	60fa      	str	r2, [r7, #12]
 8005f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4649      	mov	r1, r9
 8005f22:	f7fa f9bf 	bl	80002a4 <__aeabi_uldivmod>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f34:	d308      	bcc.n	8005f48 <UART_SetConfig+0x218>
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f3c:	d204      	bcs.n	8005f48 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8005f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	e003      	b.n	8005f50 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8005f4e:	e085      	b.n	800605c <UART_SetConfig+0x32c>
 8005f50:	e084      	b.n	800605c <UART_SetConfig+0x32c>
 8005f52:	bf00      	nop
 8005f54:	44002400 	.word	0x44002400
 8005f58:	cfff69f3 	.word	0xcfff69f3
 8005f5c:	54002400 	.word	0x54002400
 8005f60:	40013800 	.word	0x40013800
 8005f64:	40004400 	.word	0x40004400
 8005f68:	40004800 	.word	0x40004800
 8005f6c:	40004c00 	.word	0x40004c00
 8005f70:	40005000 	.word	0x40005000
 8005f74:	40006400 	.word	0x40006400
 8005f78:	08006e44 	.word	0x08006e44
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f84:	d13c      	bne.n	8006000 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f88:	2200      	movs	r2, #0
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f92:	f7fe f95f 	bl	8004254 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f96:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d05e      	beq.n	800605c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	4a39      	ldr	r2, [pc, #228]	@ (8006088 <UART_SetConfig+0x358>)
 8005fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb0:	005a      	lsls	r2, r3, #1
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	085b      	lsrs	r3, r3, #1
 8005fb8:	441a      	add	r2, r3
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc6:	2b0f      	cmp	r3, #15
 8005fc8:	d916      	bls.n	8005ff8 <UART_SetConfig+0x2c8>
 8005fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd0:	d212      	bcs.n	8005ff8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f023 030f 	bic.w	r3, r3, #15
 8005fda:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005fea:	4313      	orrs	r3, r2
 8005fec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	e031      	b.n	800605c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ffe:	e02d      	b.n	800605c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006002:	2200      	movs	r2, #0
 8006004:	469a      	mov	sl, r3
 8006006:	4693      	mov	fp, r2
 8006008:	4650      	mov	r0, sl
 800600a:	4659      	mov	r1, fp
 800600c:	f7fe f922 	bl	8004254 <HAL_RCCEx_GetPeriphCLKFreq>
 8006010:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d021      	beq.n	800605c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	4a1a      	ldr	r2, [pc, #104]	@ (8006088 <UART_SetConfig+0x358>)
 800601e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006022:	461a      	mov	r2, r3
 8006024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006026:	fbb3 f2f2 	udiv	r2, r3, r2
 800602a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	441a      	add	r2, r3
 8006032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	fbb2 f3f3 	udiv	r3, r2, r3
 800603a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800603e:	2b0f      	cmp	r3, #15
 8006040:	d909      	bls.n	8006056 <UART_SetConfig+0x326>
 8006042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006048:	d205      	bcs.n	8006056 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800604a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604c:	b29a      	uxth	r2, r3
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	e002      	b.n	800605c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605e:	2201      	movs	r2, #1
 8006060:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	2201      	movs	r2, #1
 8006068:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	2200      	movs	r2, #0
 8006070:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	2200      	movs	r2, #0
 8006076:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006078:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800607c:	4618      	mov	r0, r3
 800607e:	3750      	adds	r7, #80	@ 0x50
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006086:	bf00      	nop
 8006088:	08006e44 	.word	0x08006e44

0800608c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800618a:	d10a      	bne.n	80061a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b098      	sub	sp, #96	@ 0x60
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e0:	f7fa ffb0 	bl	8001144 <HAL_GetTick>
 80061e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d12f      	bne.n	8006254 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f88e 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d022      	beq.n	8006254 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800621c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006222:	653b      	str	r3, [r7, #80]	@ 0x50
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800623a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e6      	bne.n	800620e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e063      	b.n	800631c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d149      	bne.n	80062f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006262:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800626a:	2200      	movs	r2, #0
 800626c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f857 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d03c      	beq.n	80062f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	623b      	str	r3, [r7, #32]
   return(result);
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800629a:	633b      	str	r3, [r7, #48]	@ 0x30
 800629c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e6      	bne.n	800627c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062ce:	61fa      	str	r2, [r7, #28]
 80062d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	69b9      	ldr	r1, [r7, #24]
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	617b      	str	r3, [r7, #20]
   return(result);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e5      	bne.n	80062ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e012      	b.n	800631c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3758      	adds	r7, #88	@ 0x58
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006334:	e04f      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d04b      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633e:	f7fa ff01 	bl	8001144 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	429a      	cmp	r2, r3
 800634c:	d302      	bcc.n	8006354 <UART_WaitOnFlagUntilTimeout+0x30>
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e04e      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d037      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b80      	cmp	r3, #128	@ 0x80
 800636a:	d034      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b40      	cmp	r3, #64	@ 0x40
 8006370:	d031      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b08      	cmp	r3, #8
 800637e:	d110      	bne.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f838 	bl	80063fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2208      	movs	r2, #8
 8006392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e029      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b0:	d111      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f81e 	bl	80063fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e00f      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4013      	ands	r3, r2
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d0a0      	beq.n	8006336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063fe:	b480      	push	{r7}
 8006400:	b095      	sub	sp, #84	@ 0x54
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006424:	643b      	str	r3, [r7, #64]	@ 0x40
 8006426:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800642a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	61fb      	str	r3, [r7, #28]
   return(result);
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800645c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800645e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e3      	bne.n	8006438 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d118      	bne.n	80064aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	60bb      	str	r3, [r7, #8]
   return(result);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f023 0310 	bic.w	r3, r3, #16
 800648c:	647b      	str	r3, [r7, #68]	@ 0x44
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	613b      	str	r3, [r7, #16]
   return(result);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e6      	bne.n	8006478 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80064be:	bf00      	nop
 80064c0:	3754      	adds	r7, #84	@ 0x54
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80064dc:	2302      	movs	r3, #2
 80064de:	e027      	b.n	8006530 <HAL_UARTEx_DisableFifoMode+0x66>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2224      	movs	r2, #36	@ 0x24
 80064ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800650e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006550:	2302      	movs	r3, #2
 8006552:	e02d      	b.n	80065b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2224      	movs	r2, #36	@ 0x24
 8006560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f84f 	bl	8006634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e02d      	b.n	800662c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2224      	movs	r2, #36	@ 0x24
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f811 	bl	8006634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006640:	2b00      	cmp	r3, #0
 8006642:	d108      	bne.n	8006656 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006654:	e031      	b.n	80066ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006656:	2308      	movs	r3, #8
 8006658:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800665a:	2308      	movs	r3, #8
 800665c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	0e5b      	lsrs	r3, r3, #25
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	0f5b      	lsrs	r3, r3, #29
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	7b3a      	ldrb	r2, [r7, #12]
 8006682:	4911      	ldr	r1, [pc, #68]	@ (80066c8 <UARTEx_SetNbDataToProcess+0x94>)
 8006684:	5c8a      	ldrb	r2, [r1, r2]
 8006686:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800668a:	7b3a      	ldrb	r2, [r7, #12]
 800668c:	490f      	ldr	r1, [pc, #60]	@ (80066cc <UARTEx_SetNbDataToProcess+0x98>)
 800668e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006690:	fb93 f3f2 	sdiv	r3, r3, r2
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	7b7a      	ldrb	r2, [r7, #13]
 80066a0:	4909      	ldr	r1, [pc, #36]	@ (80066c8 <UARTEx_SetNbDataToProcess+0x94>)
 80066a2:	5c8a      	ldrb	r2, [r1, r2]
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066a8:	7b7a      	ldrb	r2, [r7, #13]
 80066aa:	4908      	ldr	r1, [pc, #32]	@ (80066cc <UARTEx_SetNbDataToProcess+0x98>)
 80066ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	08006e5c 	.word	0x08006e5c
 80066cc:	08006e64 	.word	0x08006e64

080066d0 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80066dc:	f7fa fd32 	bl	8001144 <HAL_GetTick>
 80066e0:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e0bc      	b.n	8006868 <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a60      	ldr	r2, [pc, #384]	@ (8006874 <HAL_XSPI_Init+0x1a4>)
 80066f4:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006700:	2b00      	cmp	r3, #0
 8006702:	f040 80b1 	bne.w	8006868 <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fa fa5e 	bl	8000bc8 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800670c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f945 	bl	80069a0 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	4b56      	ldr	r3, [pc, #344]	@ (8006878 <HAL_XSPI_Init+0x1a8>)
 800671e:	4013      	ands	r3, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	68d1      	ldr	r1, [r2, #12]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6912      	ldr	r2, [r2, #16]
 8006728:	0412      	lsls	r2, r2, #16
 800672a:	4311      	orrs	r1, r2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6952      	ldr	r2, [r2, #20]
 8006730:	3a01      	subs	r2, #1
 8006732:	0212      	lsls	r2, r2, #8
 8006734:	4311      	orrs	r1, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	69d2      	ldr	r2, [r2, #28]
 800673a:	4311      	orrs	r1, r2
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	430b      	orrs	r3, r1
 8006742:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a4a      	ldr	r2, [pc, #296]	@ (8006874 <HAL_XSPI_Init+0x1a4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_XSPI_Init+0x88>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a4a      	ldr	r2, [pc, #296]	@ (800687c <HAL_XSPI_Init+0x1ac>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d10a      	bne.n	800676e <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f023 0108 	bic.w	r1, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006792:	041a      	lsls	r2, r3, #16
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80067a4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	021a      	lsls	r2, r3, #8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2120      	movs	r1, #32
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8f6 	bl	80069be <XSPI_WaitFlagStateUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d145      	bne.n	8006868 <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006810:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d107      	bne.n	8006850 <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0202 	orr.w	r2, r2, #2
 800684e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006858:	d103      	bne.n	8006862 <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006860:	e002      	b.n	8006868 <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	47001400 	.word	0x47001400
 8006878:	f8e0c0fc 	.word	0xf8e0c0fc
 800687c:	57001400 	.word	0x57001400

08006880 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	@ 0x28
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800688c:	f7fa fc5a 	bl	8001144 <HAL_GetTick>
 8006890:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800689c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d104      	bne.n	80068ae <HAL_XSPI_Command+0x2e>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068ac:	d115      	bne.n	80068da <HAL_XSPI_Command+0x5a>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b14      	cmp	r3, #20
 80068b2:	d107      	bne.n	80068c4 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d00e      	beq.n	80068da <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d00a      	beq.n	80068da <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b24      	cmp	r3, #36	@ 0x24
 80068c8:	d15e      	bne.n	8006988 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d003      	beq.n	80068da <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d156      	bne.n	8006988 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2120      	movs	r1, #32
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f86a 	bl	80069be <XSPI_WaitFlagStateUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80068ee:	7ffb      	ldrb	r3, [r7, #31]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d146      	bne.n	8006982 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f895 	bl	8006a2c <XSPI_ConfigCmd>
 8006902:	4603      	mov	r3, r0
 8006904:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8006906:	7ffb      	ldrb	r3, [r7, #31]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d143      	bne.n	8006994 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10e      	bne.n	8006932 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2200      	movs	r2, #0
 800691c:	2120      	movs	r1, #32
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f84d 	bl	80069be <XSPI_WaitFlagStateUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2202      	movs	r2, #2
 800692e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006930:	e030      	b.n	8006994 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2204      	movs	r2, #4
 800693e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006940:	e028      	b.n	8006994 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10b      	bne.n	8006962 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694e:	2b24      	cmp	r3, #36	@ 0x24
 8006950:	d103      	bne.n	800695a <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2204      	movs	r2, #4
 8006956:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006958:	e01c      	b.n	8006994 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2214      	movs	r2, #20
 800695e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006960:	e018      	b.n	8006994 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d114      	bne.n	8006994 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696e:	2b14      	cmp	r3, #20
 8006970:	d103      	bne.n	800697a <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2204      	movs	r2, #4
 8006976:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006978:	e00c      	b.n	8006994 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2224      	movs	r2, #36	@ 0x24
 800697e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006980:	e008      	b.n	8006994 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8006982:	2302      	movs	r3, #2
 8006984:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8006986:	e005      	b.n	8006994 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2210      	movs	r2, #16
 8006990:	655a      	str	r2, [r3, #84]	@ 0x54
 8006992:	e000      	b.n	8006996 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8006994:	bf00      	nop
  }

  return status;
 8006996:	7ffb      	ldrb	r3, [r7, #31]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80069ce:	e019      	b.n	8006a04 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d015      	beq.n	8006a04 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d8:	f7fa fbb4 	bl	8001144 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d302      	bcc.n	80069ee <XSPI_WaitFlagStateUntilTimeout+0x30>
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2202      	movs	r2, #2
 80069f2:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f8:	f043 0201 	orr.w	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e00e      	b.n	8006a22 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a1a      	ldr	r2, [r3, #32]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bf14      	ite	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	2300      	moveq	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d1d7      	bne.n	80069d0 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	@ 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a48:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d114      	bne.n	8006a9a <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006a78:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006a82:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006a8c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e02c      	b.n	8006af4 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d114      	bne.n	8006acc <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006aaa:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006ab4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006abe:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e013      	b.n	8006af4 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006ad4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006ade:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006ae8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006af2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afc:	431a      	orrs	r2, r3
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d105      	bne.n	8006b16 <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d012      	beq.n	8006b44 <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b36:	4319      	orrs	r1, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f023 021f 	bic.w	r2, r3, #31
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b50:	431a      	orrs	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d105      	bne.n	8006b72 <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d01e      	beq.n	8006bb8 <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b82:	d10a      	bne.n	8006b9a <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8006b94:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006b98:	e00e      	b.n	8006bb8 <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba2:	d109      	bne.n	8006bb8 <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006bb4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8099 	beq.w	8006cf4 <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d055      	beq.n	8006c76 <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01e      	beq.n	8006c10 <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b68      	ldr	r3, [pc, #416]	@ (8006d78 <XSPI_ConfigCmd+0x34c>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68d1      	ldr	r1, [r2, #12]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	6952      	ldr	r2, [r2, #20]
 8006be2:	4311      	orrs	r1, r2
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	6912      	ldr	r2, [r2, #16]
 8006be8:	4311      	orrs	r1, r2
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	69d2      	ldr	r2, [r2, #28]
 8006bee:	4311      	orrs	r1, r2
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bf4:	4311      	orrs	r1, r2
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	6a12      	ldr	r2, [r2, #32]
 8006bfa:	4311      	orrs	r1, r2
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c00:	4311      	orrs	r1, r2
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c06:	430a      	orrs	r2, r1
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	e028      	b.n	8006c62 <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	68d1      	ldr	r1, [r2, #12]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	6952      	ldr	r2, [r2, #20]
 8006c24:	4311      	orrs	r1, r2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	6912      	ldr	r2, [r2, #16]
 8006c2a:	4311      	orrs	r1, r2
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	69d2      	ldr	r2, [r2, #28]
 8006c30:	4311      	orrs	r1, r2
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c36:	4311      	orrs	r1, r2
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	6a12      	ldr	r2, [r2, #32]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c4c:	d109      	bne.n	8006c62 <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d105      	bne.n	8006c62 <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	6992      	ldr	r2, [r2, #24]
 8006c72:	649a      	str	r2, [r3, #72]	@ 0x48
 8006c74:	e078      	b.n	8006d68 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d017      	beq.n	8006cae <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006c86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	68d1      	ldr	r1, [r2, #12]
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	6952      	ldr	r2, [r2, #20]
 8006c92:	4311      	orrs	r1, r2
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	6912      	ldr	r2, [r2, #16]
 8006c98:	4311      	orrs	r1, r2
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c9e:	4311      	orrs	r1, r2
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e01d      	b.n	8006cea <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68d9      	ldr	r1, [r3, #12]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	4319      	orrs	r1, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cd4:	d109      	bne.n	8006cea <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d105      	bne.n	8006cea <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e039      	b.n	8006d68 <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d030      	beq.n	8006d5e <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d017      	beq.n	8006d34 <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006d0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	69d1      	ldr	r1, [r2, #28]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d18:	4311      	orrs	r1, r2
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	6a12      	ldr	r2, [r2, #32]
 8006d1e:	4311      	orrs	r1, r2
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d24:	4311      	orrs	r1, r2
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e00e      	b.n	8006d52 <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	69d9      	ldr	r1, [r3, #28]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	4319      	orrs	r1, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	6992      	ldr	r2, [r2, #24]
 8006d5a:	649a      	str	r2, [r3, #72]	@ 0x48
 8006d5c:	e004      	b.n	8006d68 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2208      	movs	r2, #8
 8006d66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8006d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3724      	adds	r7, #36	@ 0x24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	f0ffc0c0 	.word	0xf0ffc0c0

08006d7c <memset>:
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <__libc_init_array>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006dc4 <__libc_init_array+0x38>)
 8006d90:	2600      	movs	r6, #0
 8006d92:	4c0d      	ldr	r4, [pc, #52]	@ (8006dc8 <__libc_init_array+0x3c>)
 8006d94:	1b64      	subs	r4, r4, r5
 8006d96:	10a4      	asrs	r4, r4, #2
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	d109      	bne.n	8006db0 <__libc_init_array+0x24>
 8006d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006dcc <__libc_init_array+0x40>)
 8006d9e:	2600      	movs	r6, #0
 8006da0:	4c0b      	ldr	r4, [pc, #44]	@ (8006dd0 <__libc_init_array+0x44>)
 8006da2:	f000 f817 	bl	8006dd4 <_init>
 8006da6:	1b64      	subs	r4, r4, r5
 8006da8:	10a4      	asrs	r4, r4, #2
 8006daa:	42a6      	cmp	r6, r4
 8006dac:	d105      	bne.n	8006dba <__libc_init_array+0x2e>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db4:	3601      	adds	r6, #1
 8006db6:	4798      	blx	r3
 8006db8:	e7ee      	b.n	8006d98 <__libc_init_array+0xc>
 8006dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	4798      	blx	r3
 8006dc2:	e7f2      	b.n	8006daa <__libc_init_array+0x1e>
 8006dc4:	08006e74 	.word	0x08006e74
 8006dc8:	08006e74 	.word	0x08006e74
 8006dcc:	08006e74 	.word	0x08006e74
 8006dd0:	08006e78 	.word	0x08006e78

08006dd4 <_init>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr

08006de0 <_fini>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr
