
BP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006efc  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007150  08007150  00008150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007278  08007278  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007278  08007278  00008278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007280  08007280  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007280  08007280  00008280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007284  08007284  00008284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007288  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  080072e4  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080072e4  000092b8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011682  00000000  00000000  00009092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002029  00000000  00000000  0001a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0001c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ed  00000000  00000000  0001d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2b1  00000000  00000000  0001dbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe78  00000000  00000000  00048e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e381  00000000  00000000  00058cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003344  00000000  00000000  001670bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0016a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000005c 	.word	0x2000005c
 8000270:	00000000 	.word	0x00000000
 8000274:	08007138 	.word	0x08007138

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000060 	.word	0x20000060
 8000290:	08007138 	.word	0x08007138

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b9b0 	b.w	800061c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	4688      	mov	r8, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	468e      	mov	lr, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d95f      	bls.n	80003aa <__udivmoddi4+0xd6>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	40b4      	lsls	r4, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	ea43 0e0e 	orr.w	lr, r3, lr
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fbbe f1f8 	udiv	r1, lr, r8
 8000312:	fb08 ee11 	mls	lr, r8, r1, lr
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x5e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x5c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 8154 	bhi.w	80005d8 <__udivmoddi4+0x304>
 8000330:	4601      	mov	r1, r0
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b2a2      	uxth	r2, r4
 8000336:	fbb3 f0f8 	udiv	r0, r3, r8
 800033a:	fb08 3310 	mls	r3, r8, r0, r3
 800033e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000346:	4594      	cmp	ip, r2
 8000348:	d90b      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034a:	18ba      	adds	r2, r7, r2
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	bf2c      	ite	cs
 8000352:	2401      	movcs	r4, #1
 8000354:	2400      	movcc	r4, #0
 8000356:	4594      	cmp	ip, r2
 8000358:	d902      	bls.n	8000360 <__udivmoddi4+0x8c>
 800035a:	2c00      	cmp	r4, #0
 800035c:	f000 813f 	beq.w	80005de <__udivmoddi4+0x30a>
 8000360:	4618      	mov	r0, r3
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba2 020c 	sub.w	r2, r2, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f2      	lsrs	r2, r6
 8000370:	2300      	movs	r3, #0
 8000372:	e9c5 2300 	strd	r2, r3, [r5]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14e      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000392:	4543      	cmp	r3, r8
 8000394:	f0c0 8112 	bcc.w	80005bc <__udivmoddi4+0x2e8>
 8000398:	4282      	cmp	r2, r0
 800039a:	f240 810f 	bls.w	80005bc <__udivmoddi4+0x2e8>
 800039e:	4608      	mov	r0, r1
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d0e8      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a8:	e7e5      	b.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	f000 80ac 	beq.w	8000508 <__udivmoddi4+0x234>
 80003b0:	fab2 f682 	clz	r6, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	f040 80bb 	bne.w	8000530 <__udivmoddi4+0x25c>
 80003ba:	1a8b      	subs	r3, r1, r2
 80003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c0:	b2bc      	uxth	r4, r7
 80003c2:	2101      	movs	r1, #1
 80003c4:	0c02      	lsrs	r2, r0, #16
 80003c6:	b280      	uxth	r0, r0
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d4:	fb04 f20c 	mul.w	r2, r4, ip
 80003d8:	429a      	cmp	r2, r3
 80003da:	d90e      	bls.n	80003fa <__udivmoddi4+0x126>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80ec 	beq.w	80005d0 <__udivmoddi4+0x2fc>
 80003f8:	46c4      	mov	ip, r8
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000400:	fb0e 3318 	mls	r3, lr, r8, r3
 8000404:	fb04 f408 	mul.w	r4, r4, r8
 8000408:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800040c:	4294      	cmp	r4, r2
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x154>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295
 8000416:	bf2c      	ite	cs
 8000418:	2001      	movcs	r0, #1
 800041a:	2000      	movcc	r0, #0
 800041c:	4294      	cmp	r4, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x152>
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80d1 	beq.w	80005c8 <__udivmoddi4+0x2f4>
 8000426:	4698      	mov	r8, r3
 8000428:	1b12      	subs	r2, r2, r4
 800042a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa08 f401 	lsl.w	r4, r8, r1
 800043a:	fa00 f901 	lsl.w	r9, r0, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa28 f806 	lsr.w	r8, r8, r6
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f306 	lsr.w	r3, r0, r6
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fbb8 fef0 	udiv	lr, r8, r0
 800045c:	fb00 881e 	mls	r8, r0, lr, r8
 8000460:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000464:	fb0e f80c 	mul.w	r8, lr, ip
 8000468:	45a0      	cmp	r8, r4
 800046a:	d90e      	bls.n	800048a <__udivmoddi4+0x1b6>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000472:	bf2c      	ite	cs
 8000474:	f04f 0b01 	movcs.w	fp, #1
 8000478:	f04f 0b00 	movcc.w	fp, #0
 800047c:	45a0      	cmp	r8, r4
 800047e:	d903      	bls.n	8000488 <__udivmoddi4+0x1b4>
 8000480:	f1bb 0f00 	cmp.w	fp, #0
 8000484:	f000 80b8 	beq.w	80005f8 <__udivmoddi4+0x324>
 8000488:	46d6      	mov	lr, sl
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fa1f f883 	uxth.w	r8, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d90e      	bls.n	80004c4 <__udivmoddi4+0x1f0>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	bf2c      	ite	cs
 80004ae:	f04f 0801 	movcs.w	r8, #1
 80004b2:	f04f 0800 	movcc.w	r8, #0
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d903      	bls.n	80004c2 <__udivmoddi4+0x1ee>
 80004ba:	f1b8 0f00 	cmp.w	r8, #0
 80004be:	f000 809f 	beq.w	8000600 <__udivmoddi4+0x32c>
 80004c2:	4603      	mov	r3, r0
 80004c4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c8:	eba4 040c 	sub.w	r4, r4, ip
 80004cc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d0:	4564      	cmp	r4, ip
 80004d2:	4673      	mov	r3, lr
 80004d4:	46e0      	mov	r8, ip
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0x20a>
 80004d8:	d107      	bne.n	80004ea <__udivmoddi4+0x216>
 80004da:	45f1      	cmp	r9, lr
 80004dc:	d205      	bcs.n	80004ea <__udivmoddi4+0x216>
 80004de:	ebbe 0302 	subs.w	r3, lr, r2
 80004e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e6:	3801      	subs	r0, #1
 80004e8:	46e0      	mov	r8, ip
 80004ea:	b15d      	cbz	r5, 8000504 <__udivmoddi4+0x230>
 80004ec:	ebb9 0203 	subs.w	r2, r9, r3
 80004f0:	eb64 0408 	sbc.w	r4, r4, r8
 80004f4:	fa04 f606 	lsl.w	r6, r4, r6
 80004f8:	fa22 f301 	lsr.w	r3, r2, r1
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e736      	b.n	8000376 <__udivmoddi4+0xa2>
 8000508:	fbb1 fcf2 	udiv	ip, r1, r2
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4614      	mov	r4, r2
 8000510:	b280      	uxth	r0, r0
 8000512:	4696      	mov	lr, r2
 8000514:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000518:	2620      	movs	r6, #32
 800051a:	4690      	mov	r8, r2
 800051c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000520:	4610      	mov	r0, r2
 8000522:	fbb1 f1f2 	udiv	r1, r1, r2
 8000526:	eba3 0308 	sub.w	r3, r3, r8
 800052a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052e:	e74b      	b.n	80003c8 <__udivmoddi4+0xf4>
 8000530:	40b7      	lsls	r7, r6
 8000532:	f1c6 0320 	rsb	r3, r6, #32
 8000536:	fa01 f206 	lsl.w	r2, r1, r6
 800053a:	fa21 f803 	lsr.w	r8, r1, r3
 800053e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000542:	fa20 f303 	lsr.w	r3, r0, r3
 8000546:	b2bc      	uxth	r4, r7
 8000548:	40b0      	lsls	r0, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	0c02      	lsrs	r2, r0, #16
 800054e:	0c19      	lsrs	r1, r3, #16
 8000550:	b280      	uxth	r0, r0
 8000552:	fbb8 f9fe 	udiv	r9, r8, lr
 8000556:	fb0e 8819 	mls	r8, lr, r9, r8
 800055a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	4588      	cmp	r8, r1
 8000564:	d951      	bls.n	800060a <__udivmoddi4+0x336>
 8000566:	1879      	adds	r1, r7, r1
 8000568:	f109 3cff 	add.w	ip, r9, #4294967295
 800056c:	bf2c      	ite	cs
 800056e:	f04f 0a01 	movcs.w	sl, #1
 8000572:	f04f 0a00 	movcc.w	sl, #0
 8000576:	4588      	cmp	r8, r1
 8000578:	d902      	bls.n	8000580 <__udivmoddi4+0x2ac>
 800057a:	f1ba 0f00 	cmp.w	sl, #0
 800057e:	d031      	beq.n	80005e4 <__udivmoddi4+0x310>
 8000580:	eba1 0108 	sub.w	r1, r1, r8
 8000584:	fbb1 f9fe 	udiv	r9, r1, lr
 8000588:	fb09 f804 	mul.w	r8, r9, r4
 800058c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000590:	b29b      	uxth	r3, r3
 8000592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000596:	4543      	cmp	r3, r8
 8000598:	d235      	bcs.n	8000606 <__udivmoddi4+0x332>
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a0:	bf2c      	ite	cs
 80005a2:	f04f 0a01 	movcs.w	sl, #1
 80005a6:	f04f 0a00 	movcc.w	sl, #0
 80005aa:	4543      	cmp	r3, r8
 80005ac:	d2bb      	bcs.n	8000526 <__udivmoddi4+0x252>
 80005ae:	f1ba 0f00 	cmp.w	sl, #0
 80005b2:	d1b8      	bne.n	8000526 <__udivmoddi4+0x252>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e7b4      	b.n	8000526 <__udivmoddi4+0x252>
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb68 0203 	sbc.w	r2, r8, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	4696      	mov	lr, r2
 80005c6:	e6eb      	b.n	80003a0 <__udivmoddi4+0xcc>
 80005c8:	443a      	add	r2, r7
 80005ca:	f1a8 0802 	sub.w	r8, r8, #2
 80005ce:	e72b      	b.n	8000428 <__udivmoddi4+0x154>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	e710      	b.n	80003fa <__udivmoddi4+0x126>
 80005d8:	3902      	subs	r1, #2
 80005da:	443b      	add	r3, r7
 80005dc:	e6a9      	b.n	8000332 <__udivmoddi4+0x5e>
 80005de:	443a      	add	r2, r7
 80005e0:	3802      	subs	r0, #2
 80005e2:	e6be      	b.n	8000362 <__udivmoddi4+0x8e>
 80005e4:	eba7 0808 	sub.w	r8, r7, r8
 80005e8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005ec:	4441      	add	r1, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c9      	b.n	800058c <__udivmoddi4+0x2b8>
 80005f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005fc:	443c      	add	r4, r7
 80005fe:	e744      	b.n	800048a <__udivmoddi4+0x1b6>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e75e      	b.n	80004c4 <__udivmoddi4+0x1f0>
 8000606:	4649      	mov	r1, r9
 8000608:	e78d      	b.n	8000526 <__udivmoddi4+0x252>
 800060a:	eba1 0108 	sub.w	r1, r1, r8
 800060e:	46cc      	mov	ip, r9
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7b8      	b.n	800058c <__udivmoddi4+0x2b8>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b0a1      	sub	sp, #132	@ 0x84
 8000624:	af00      	add	r7, sp, #0
#ifdef READ_WRITE_SEQ_2
	char *spi_buf_2 = malloc(4 * sizeof(char));
#endif
	uint8_t uart_buf[16];
	uint8_t spi_buf[16];
	char *dummy_buf = malloc(16 * sizeof(char));
 8000626:	2010      	movs	r0, #16
 8000628:	f006 fc76 	bl	8006f18 <malloc>
 800062c:	4603      	mov	r3, r0
 800062e:	67bb      	str	r3, [r7, #120]	@ 0x78
	HAL_StatusTypeDef octo_spi_return = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	XSPI_RegularCmdTypeDef spi_command = {
 8000636:	4a3b      	ldr	r2, [pc, #236]	@ (8000724 <main+0x104>)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4611      	mov	r1, r2
 800063c:	2250      	movs	r2, #80	@ 0x50
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fd6c 	bl	800711c <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fd10 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f880 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f968 	bl	8000920 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f91a 	bl	8000888 <MX_USART2_UART_Init>
  MX_OCTOSPI1_Init();
 8000654:	f000 f8da 	bl	800080c <MX_OCTOSPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_print(uart_buf, "Initializing\r\n", &huart2);
 8000658:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800065c:	4a32      	ldr	r2, [pc, #200]	@ (8000728 <main+0x108>)
 800065e:	4933      	ldr	r1, [pc, #204]	@ (800072c <main+0x10c>)
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f99b 	bl	800099c <uart_print>
  HAL_Delay(5000);
 8000666:	f241 3088 	movw	r0, #5000	@ 0x1388
 800066a:	f000 fdbb 	bl	80011e4 <HAL_Delay>

  if(hospi1.State == HAL_XSPI_STATE_READY){
 800066e:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <main+0x110>)
 8000670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000672:	2b02      	cmp	r3, #2
 8000674:	d107      	bne.n	8000686 <main+0x66>
	  uart_print(uart_buf, "HAL OK\r\n", &huart2);
 8000676:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800067a:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <main+0x108>)
 800067c:	492d      	ldr	r1, [pc, #180]	@ (8000734 <main+0x114>)
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f98c 	bl	800099c <uart_print>
 8000684:	e006      	b.n	8000694 <main+0x74>
  }else{
	  uart_print(uart_buf, "HAL NOT OK\r\n", &huart2);
 8000686:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800068a:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <main+0x108>)
 800068c:	492a      	ldr	r1, [pc, #168]	@ (8000738 <main+0x118>)
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f984 	bl	800099c <uart_print>
  /*octo_spi_return = HAL_XSPI_Command(&hospi1, &spi_command, 60000);

  uart_print(uart_buf, "Cmd Init\r\n", &huart2);
  get_HAL_error(octo_spi_return, &huart2);*/

  int j = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	67fb      	str	r3, [r7, #124]	@ 0x7c
  strcpy((char *)spi_buf, "AAAAAAAAAAAAAAA");
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <main+0x11c>)
 800069a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800069e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  while (1)
  {
	  j++;
 80006a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006a6:	3301      	adds	r3, #1
 80006a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  	  if(j == 5){
 80006aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ac:	2b05      	cmp	r3, #5
 80006ae:	d108      	bne.n	80006c2 <main+0xa2>
	  		  j = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  		  uart_print(uart_buf, "...\r\n", &huart2);
 80006b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <main+0x108>)
 80006ba:	4921      	ldr	r1, [pc, #132]	@ (8000740 <main+0x120>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f96d 	bl	800099c <uart_print>
	  //HAL_Delay(1000);
#ifdef WRITE_READ_SEQ_1

#endif
#ifdef READ_DEVICE_INFO // Code for reading device id
	  uart_print(uart_buf, "\r\nSignature\r\n", &huart2);
 80006c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006c6:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <main+0x108>)
 80006c8:	491e      	ldr	r1, [pc, #120]	@ (8000744 <main+0x124>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f966 	bl	800099c <uart_print>
	  octo_spi_return = read_electronic_signature((char *)spi_buf, &hospi1);
 80006d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006d4:	4916      	ldr	r1, [pc, #88]	@ (8000730 <main+0x110>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fa44 	bl	8000b64 <read_electronic_signature>
 80006dc:	4603      	mov	r3, r0
 80006de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  get_HAL_error(octo_spi_return, &huart2);
 80006e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80006e6:	4910      	ldr	r1, [pc, #64]	@ (8000728 <main+0x108>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f971 	bl	80009d0 <get_HAL_error>
	  uart_print(uart_buf, "\r\nDevice_id\r\n", &huart2);
 80006ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <main+0x108>)
 80006f4:	4914      	ldr	r1, [pc, #80]	@ (8000748 <main+0x128>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f950 	bl	800099c <uart_print>
	  octo_spi_return = read_device_id((char *)spi_buf, &hospi1);
 80006fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000700:	490b      	ldr	r1, [pc, #44]	@ (8000730 <main+0x110>)
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f9f4 	bl	8000af0 <read_device_id>
 8000708:	4603      	mov	r3, r0
 800070a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  get_HAL_error(octo_spi_return, &huart2);
 800070e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000712:	4905      	ldr	r1, [pc, #20]	@ (8000728 <main+0x108>)
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f95b 	bl	80009d0 <get_HAL_error>

#endif
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	  //hospi1.State = HAL_XSPI_STATE_CMD_CFG;
	  HAL_Delay(1000);
 800071a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071e:	f000 fd61 	bl	80011e4 <HAL_Delay>
	  j++;
 8000722:	e7bf      	b.n	80006a4 <main+0x84>
 8000724:	080071b4 	.word	0x080071b4
 8000728:	200000d4 	.word	0x200000d4
 800072c:	08007150 	.word	0x08007150
 8000730:	20000078 	.word	0x20000078
 8000734:	08007160 	.word	0x08007160
 8000738:	0800716c 	.word	0x0800716c
 800073c:	0800717c 	.word	0x0800717c
 8000740:	0800718c 	.word	0x0800718c
 8000744:	08007194 	.word	0x08007194
 8000748:	080071a4 	.word	0x080071a4

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b09c      	sub	sp, #112	@ 0x70
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2250      	movs	r2, #80	@ 0x50
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fc92 	bl	8007084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <SystemClock_Config+0xb8>)
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <SystemClock_Config+0xb8>)
 8000778:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800077c:	6113      	str	r3, [r2, #16]
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <SystemClock_Config+0xb8>)
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078a:	bf00      	nop
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <SystemClock_Config+0xb8>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	2b08      	cmp	r3, #8
 8000796:	d1f9      	bne.n	800078c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80007a0:	2308      	movs	r3, #8
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2340      	movs	r3, #64	@ 0x40
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fffd 	bl	80017b0 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007bc:	f000 f8e8 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	231f      	movs	r3, #31
 80007c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fc1e 	bl	8002020 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007ea:	f000 f8d1 	bl	8000990 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <SystemClock_Config+0xbc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a05      	ldr	r2, [pc, #20]	@ (8000808 <SystemClock_Config+0xbc>)
 80007f4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	bf00      	nop
 80007fc:	3770      	adds	r7, #112	@ 0x70
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	44020800 	.word	0x44020800
 8000808:	40022000 	.word	0x40022000

0800080c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_OCTOSPI1_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 31;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000818:	221f      	movs	r2, #31
 800081a:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000824:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000828:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_64MB;
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 800082c:	2216      	movs	r2, #22
 800082e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000832:	2201      	movs	r2, #1
 8000834:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 800083c:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 800084a:	2202      	movs	r2, #2
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_128MB;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 800085c:	2218      	movs	r2, #24
 800085e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000862:	2208      	movs	r2, #8
 8000864:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_OCTOSPI1_Init+0x74>)
 800086e:	f005 ff5b 	bl	8006728 <HAL_XSPI_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 8000878:	f000 f88a 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000078 	.word	0x20000078
 8000884:	47001400 	.word	0x47001400

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <MX_USART2_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008d2:	f005 f96b 	bl	8005bac <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f858 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008e4:	f005 fe56 	bl	8006594 <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f84f 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008f6:	f005 fe8b 	bl	8006610 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f846 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000906:	f005 fe0c 	bl	8006522 <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f83e 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000d4 	.word	0x200000d4
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_GPIO_Init+0x6c>)
 8000928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <MX_GPIO_Init+0x6c>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_GPIO_Init+0x6c>)
 8000938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_GPIO_Init+0x6c>)
 8000946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094a:	4a10      	ldr	r2, [pc, #64]	@ (800098c <MX_GPIO_Init+0x6c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000954:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <MX_GPIO_Init+0x6c>)
 8000956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <MX_GPIO_Init+0x6c>)
 8000964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000968:	4a08      	ldr	r2, [pc, #32]	@ (800098c <MX_GPIO_Init+0x6c>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_GPIO_Init+0x6c>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	44020c00 	.word	0x44020c00

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <uart_print>:

#include "my_hal.h"



void uart_print(uint8_t *buf, char *text, UART_HandleTypeDef * husart){
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	strcpy((char*)buf, text);
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f006 fbae 	bl	800710c <strcpy>
	HAL_UART_Transmit(husart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff fc6f 	bl	8000294 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	68f9      	ldr	r1, [r7, #12]
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f005 f943 	bl	8005c4c <HAL_UART_Transmit>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <get_HAL_error>:


void get_HAL_error(HAL_StatusTypeDef return_value, UART_HandleTypeDef * husart){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[16];
	 switch(return_value){
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d82b      	bhi.n	8000a3a <get_HAL_error+0x6a>
 80009e2:	a201      	add	r2, pc, #4	@ (adr r2, 80009e8 <get_HAL_error+0x18>)
 80009e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e8:	080009f9 	.word	0x080009f9
 80009ec:	08000a09 	.word	0x08000a09
 80009f0:	08000a29 	.word	0x08000a29
 80009f4:	08000a19 	.word	0x08000a19
		  case HAL_OK:
			  uart_print(buf, "HAL_OK\r\n", husart);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	4911      	ldr	r1, [pc, #68]	@ (8000a44 <get_HAL_error+0x74>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffcb 	bl	800099c <uart_print>
			  break;
 8000a06:	e017      	b.n	8000a38 <get_HAL_error+0x68>
		  case HAL_ERROR:
			  uart_print(buf, "HAL ERROR\r\n", husart);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	490e      	ldr	r1, [pc, #56]	@ (8000a48 <get_HAL_error+0x78>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffc3 	bl	800099c <uart_print>
			  break;
 8000a16:	e00f      	b.n	8000a38 <get_HAL_error+0x68>
		  case HAL_TIMEOUT:
			  uart_print(buf, "HAL TIMEOUT\r\n", husart);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	490b      	ldr	r1, [pc, #44]	@ (8000a4c <get_HAL_error+0x7c>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffbb 	bl	800099c <uart_print>
			  break;
 8000a26:	e007      	b.n	8000a38 <get_HAL_error+0x68>
		  case HAL_BUSY:
			  uart_print(buf, "HAL BUSY\r\n", husart);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <get_HAL_error+0x80>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffb3 	bl	800099c <uart_print>
			  break;
 8000a36:	bf00      	nop
		  }
	 return;
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
}
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	08007204 	.word	0x08007204
 8000a48:	08007210 	.word	0x08007210
 8000a4c:	0800721c 	.word	0x0800721c
 8000a50:	0800722c 	.word	0x0800722c

08000a54 <set_spi_command>:

#include "my_spi.h"
#include "stm32h5xx_hal_xspi.h"

void set_spi_command(XSPI_RegularCmdTypeDef *command_struct, uint32_t instruction, uint32_t instruction_wires, uint32_t address, uint32_t address_wires, //
		uint32_t data_wires, uint8_t data_length, uint32_t dummy_cycles){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	603b      	str	r3, [r7, #0]
	command_struct->OperationType         = HAL_XSPI_OPTYPE_COMMON_CFG; 		// Constant.
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
	command_struct->IOSelect 		      = HAL_XSPI_SELECT_IO_3_0;				// Constant. Always the same pins
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
	command_struct->Instruction	          = instruction;						// Not constant.
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	609a      	str	r2, [r3, #8]
	// Use defined instructions
	command_struct->InstructionMode	      = instruction_wires;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	60da      	str	r2, [r3, #12]
	// Not constant. Number of wires for transferring instructions.
	command_struct->InstructionWidth 	  = HAL_XSPI_INSTRUCTION_8_BITS;		// Constant - always 1 byte
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	command_struct->InstructionDTRMode    = HAL_XSPI_INSTRUCTION_DTR_DISABLE;	// Constant - I don't know what this is.
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
	command_struct->Address 			  = address;							// Not constant
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	619a      	str	r2, [r3, #24]
	// Between 0x00 and 0xFFFFFFFF.
	command_struct->AddressMode           = address_wires;						// Not constant
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	61da      	str	r2, [r3, #28]
	// Number of wires for sending the address.
	command_struct->AddressWidth          = HAL_XSPI_INSTRUCTION_32_BITS;		// constant
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2230      	movs	r2, #48	@ 0x30
 8000a96:	621a      	str	r2, [r3, #32]
	command_struct->AddressDTRMode        = HAL_XSPI_ADDRESS_DTR_DISABLE;		// Constant - IDK
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
	command_struct->AlternateBytes        = 0xFFFF0000;							// I don't what alternate bytes are but it isn't used in the flash
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <set_spi_command+0x98>)
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
	command_struct->AlternateBytesMode    = HAL_XSPI_ALT_BYTES_NONE;			// ---
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	command_struct->AlternateBytesWidth   = HAL_XSPI_ALT_BYTES_32_BITS;			// ---
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000ab0:	631a      	str	r2, [r3, #48]	@ 0x30
	command_struct->AlternateBytesDTRMode = HAL_XSPI_ALT_BYTES_DTR_DISABLE;		// ---
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	635a      	str	r2, [r3, #52]	@ 0x34
	command_struct->DataMode 			  = data_wires;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	639a      	str	r2, [r3, #56]	@ 0x38
	// Number of wires for sending and receiving data.
	command_struct->DataLength 		      = data_length;
 8000abe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Length in bytes
	command_struct->DataDTRMode 		  = HAL_XSPI_DATA_DTR_DISABLE;			// Constant
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	641a      	str	r2, [r3, #64]	@ 0x40
	command_struct->DummyCycles 		  = dummy_cycles;						// Not constant
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad0:	645a      	str	r2, [r3, #68]	@ 0x44
	// Enter number of dummy cycles.
	command_struct->DQSMode 			  = HAL_XSPI_DQS_ENABLE;				// Constant - IDK
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ad8:	649a      	str	r2, [r3, #72]	@ 0x48
	command_struct->SIOOMode 			  = HAL_XSPI_SIOO_INST_EVERY_CMD;		// Constant - IDK
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2200      	movs	r2, #0
 8000ade:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	ffff0000 	.word	0xffff0000

08000af0 <read_device_id>:
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	set_spi_command(&spi_command, MY_WREN, INST_1_WIRE, 0, ADDR_NONE, DATA_NONE, 0, 0);

}
HAL_StatusTypeDef read_device_id(char *read_buffer,XSPI_HandleTypeDef *octo_spi_handle){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b09c      	sub	sp, #112	@ 0x70
 8000af4:	af04      	add	r7, sp, #16
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	// Set command.
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	set_spi_command(&spi_command, MY_RDID, INST_1_WIRE, 0, ADDR_NONE, DATA_1_WIRE, THREE_BYTES, 0);
 8000afa:	f107 000c 	add.w	r0, r7, #12
 8000afe:	2300      	movs	r3, #0
 8000b00:	9303      	str	r3, [sp, #12]
 8000b02:	2303      	movs	r3, #3
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2201      	movs	r2, #1
 8000b14:	219f      	movs	r1, #159	@ 0x9f
 8000b16:	f7ff ff9d 	bl	8000a54 <set_spi_command>
	// Set XSPI ready for read
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b22:	4619      	mov	r1, r3
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f005 fed7 	bl	80068d8 <HAL_XSPI_Command>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(octo_spi_return != HAL_OK){
 8000b30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <read_device_id+0x4e>
		return octo_spi_return;
 8000b38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000b3c:	e00e      	b.n	8000b5c <read_device_id+0x6c>
	}
	// Read
	octo_spi_return = HAL_XSPI_Receive(octo_spi_handle, read_buffer, ONE_MINUTE);
 8000b3e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	6838      	ldr	r0, [r7, #0]
 8000b46:	f005 ff57 	bl	80069f8 <HAL_XSPI_Receive>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	read_buffer[3] = '\0';
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3303      	adds	r3, #3
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
	return octo_spi_return;
 8000b58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3760      	adds	r7, #96	@ 0x60
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <read_electronic_signature>:

HAL_StatusTypeDef read_electronic_signature(char *read_buffer,XSPI_HandleTypeDef *octo_spi_handle){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09c      	sub	sp, #112	@ 0x70
 8000b68:	af04      	add	r7, sp, #16
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	// Set command.
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	set_spi_command(&spi_command, MY_RES, INST_1_WIRE, 0, ADDR_NONE, DATA_1_WIRE, ONE_BYTE, 3);
 8000b6e:	f107 000c 	add.w	r0, r7, #12
 8000b72:	2303      	movs	r3, #3
 8000b74:	9303      	str	r3, [sp, #12]
 8000b76:	2301      	movs	r3, #1
 8000b78:	9302      	str	r3, [sp, #8]
 8000b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2300      	movs	r3, #0
 8000b86:	2201      	movs	r2, #1
 8000b88:	21ab      	movs	r1, #171	@ 0xab
 8000b8a:	f7ff ff63 	bl	8000a54 <set_spi_command>
	// Set XSPI ready for read
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000b96:	4619      	mov	r1, r3
 8000b98:	6838      	ldr	r0, [r7, #0]
 8000b9a:	f005 fe9d 	bl	80068d8 <HAL_XSPI_Command>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(octo_spi_return != HAL_OK){
 8000ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <read_electronic_signature+0x4e>
		return octo_spi_return;
 8000bac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000bb0:	e00e      	b.n	8000bd0 <read_electronic_signature+0x6c>
	}
	// Read
	octo_spi_return = HAL_XSPI_Receive(octo_spi_handle, read_buffer, ONE_MINUTE);
 8000bb2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	6838      	ldr	r0, [r7, #0]
 8000bba:	f005 ff1d 	bl	80069f8 <HAL_XSPI_Receive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	read_buffer[1] = '\0';
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	return octo_spi_return;
 8000bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3760      	adds	r7, #96	@ 0x60
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0c0      	sub	sp, #256	@ 0x100
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	22d0      	movs	r2, #208	@ 0xd0
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f006 fa3b 	bl	8007084 <memset>
  if(hxspi->Instance==OCTOSPI1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a56      	ldr	r2, [pc, #344]	@ (8000d6c <HAL_XSPI_MspInit+0x184>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f040 80a4 	bne.w	8000d62 <HAL_XSPI_MspInit+0x17a>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000c1a:	f04f 0200 	mov.w	r2, #0
 8000c1e:	f04f 0302 	mov.w	r3, #2
 8000c22:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_HCLK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fd37 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_XSPI_MspInit+0x58>
    {
      Error_Handler();
 8000c3c:	f7ff fea8 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000c40:	4b4b      	ldr	r3, [pc, #300]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c46:	4a4a      	ldr	r2, [pc, #296]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c50:	4b47      	ldr	r3, [pc, #284]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b44      	ldr	r3, [pc, #272]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c64:	4a42      	ldr	r2, [pc, #264]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c6e:	4b40      	ldr	r3, [pc, #256]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c82:	4a3b      	ldr	r2, [pc, #236]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c8c:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b35      	ldr	r3, [pc, #212]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca0:	4a33      	ldr	r2, [pc, #204]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000caa:	4b31      	ldr	r3, [pc, #196]	@ (8000d70 <HAL_XSPI_MspInit+0x188>)
 8000cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> OCTOSPI1_IO3
    PB0     ------> OCTOSPI1_IO1
    PB2     ------> OCTOSPI1_CLK
    PB10     ------> OCTOSPI1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000cd0:	2309      	movs	r3, #9
 8000cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4825      	ldr	r0, [pc, #148]	@ (8000d74 <HAL_XSPI_MspInit+0x18c>)
 8000cde:	f000 fc09 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000cfa:	2309      	movs	r3, #9
 8000cfc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d04:	4619      	mov	r1, r3
 8000d06:	481c      	ldr	r0, [pc, #112]	@ (8000d78 <HAL_XSPI_MspInit+0x190>)
 8000d08:	f000 fbf4 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI1;
 8000d24:	2306      	movs	r3, #6
 8000d26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <HAL_XSPI_MspInit+0x194>)
 8000d32:	f000 fbdf 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000d36:	f240 4304 	movw	r3, #1028	@ 0x404
 8000d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000d50:	2309      	movs	r3, #9
 8000d52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <HAL_XSPI_MspInit+0x194>)
 8000d5e:	f000 fbc9 	bl	80014f4 <HAL_GPIO_Init>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8000d62:	bf00      	nop
 8000d64:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	47001400 	.word	0x47001400
 8000d70:	44020c00 	.word	0x44020c00
 8000d74:	42020800 	.word	0x42020800
 8000d78:	42020000 	.word	0x42020000
 8000d7c:	42020400 	.word	0x42020400

08000d80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0be      	sub	sp, #248	@ 0xf8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	22d0      	movs	r2, #208	@ 0xd0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 f96f 	bl	8007084 <memset>
  if(huart->Instance==USART2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a26      	ldr	r2, [pc, #152]	@ (8000e44 <HAL_UART_MspInit+0xc4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d144      	bne.n	8000e3a <HAL_UART_MspInit+0xba>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db0:	f04f 0202 	mov.w	r2, #2
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fc6d 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000dd0:	f7ff fdde 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <HAL_UART_MspInit+0xc8>)
 8000dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dda:	4a1b      	ldr	r2, [pc, #108]	@ (8000e48 <HAL_UART_MspInit+0xc8>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_UART_MspInit+0xc8>)
 8000de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_MspInit+0xc8>)
 8000df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df8:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <HAL_UART_MspInit+0xc8>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <HAL_UART_MspInit+0xc8>)
 8000e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e10:	230c      	movs	r3, #12
 8000e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <HAL_UART_MspInit+0xcc>)
 8000e36:	f000 fb5d 	bl	80014f4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e3a:	bf00      	nop
 8000e3c:	37f8      	adds	r7, #248	@ 0xf8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	44020c00 	.word	0x44020c00
 8000e4c:	42020000 	.word	0x42020000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f97d 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f006 f8e8 	bl	80070b4 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20044000 	.word	0x20044000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	20000168 	.word	0x20000168
 8000f18:	200002b8 	.word	0x200002b8

08000f1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f22:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <SystemInit+0xdc>)
 8000f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f28:	4a33      	ldr	r2, [pc, #204]	@ (8000ff8 <SystemInit+0xdc>)
 8000f2a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000f32:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <SystemInit+0xe0>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f38:	4b30      	ldr	r3, [pc, #192]	@ (8000ffc <SystemInit+0xe0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ffc <SystemInit+0xe0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000f44:	4b2d      	ldr	r3, [pc, #180]	@ (8000ffc <SystemInit+0xe0>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	492c      	ldr	r1, [pc, #176]	@ (8000ffc <SystemInit+0xe0>)
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <SystemInit+0xe4>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f50:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <SystemInit+0xe0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000f56:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <SystemInit+0xe0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <SystemInit+0xe0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000f62:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <SystemInit+0xe0>)
 8000f64:	4a27      	ldr	r2, [pc, #156]	@ (8001004 <SystemInit+0xe8>)
 8000f66:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <SystemInit+0xe0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <SystemInit+0xe0>)
 8000f70:	4a24      	ldr	r2, [pc, #144]	@ (8001004 <SystemInit+0xe8>)
 8000f72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <SystemInit+0xe0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <SystemInit+0xe0>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <SystemInit+0xe8>)
 8000f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <SystemInit+0xe0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <SystemInit+0xe0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <SystemInit+0xe0>)
 8000f8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <SystemInit+0xe0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <SystemInit+0xdc>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f9e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <SystemInit+0xec>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000fa8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000fb0:	d003      	beq.n	8000fba <SystemInit+0x9e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000fb8:	d117      	bne.n	8000fea <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <SystemInit+0xec>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <SystemInit+0xec>)
 8000fc8:	4a10      	ldr	r2, [pc, #64]	@ (800100c <SystemInit+0xf0>)
 8000fca:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <SystemInit+0xec>)
 8000fce:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <SystemInit+0xf4>)
 8000fd0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <SystemInit+0xec>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <SystemInit+0xec>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <SystemInit+0xec>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a09      	ldr	r2, [pc, #36]	@ (8001008 <SystemInit+0xec>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	eae2eae3 	.word	0xeae2eae3
 8001004:	01010280 	.word	0x01010280
 8001008:	40022000 	.word	0x40022000
 800100c:	08192a3b 	.word	0x08192a3b
 8001010:	4c5d6e7f 	.word	0x4c5d6e7f

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff ff80 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001042:	f006 f83d 	bl	80070c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff faeb 	bl	8000620 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001058:	08007288 	.word	0x08007288
  ldr r2, =_sbss
 800105c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001060:	200002b8 	.word	0x200002b8

08001064 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_IRQHandler>
	...

08001068 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f96c 	bl	800134a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001072:	f001 f98d 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8001076:	4602      	mov	r2, r0
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <HAL_Init+0x44>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	490b      	ldr	r1, [pc, #44]	@ (80010b0 <HAL_Init+0x48>)
 8001082:	5ccb      	ldrb	r3, [r1, r3]
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <HAL_Init+0x4c>)
 800108a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800108c:	2004      	movs	r0, #4
 800108e:	f000 f9a3 	bl	80013d8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f810 	bl	80010b8 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e002      	b.n	80010a8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a2:	f7ff fd99 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	44020c00 	.word	0x44020c00
 80010b0:	08007238 	.word	0x08007238
 80010b4:	20000000 	.word	0x20000000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010c4:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <HAL_InitTick+0xdc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e05c      	b.n	800118a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80010d0:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <HAL_InitTick+0xe0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d10c      	bne.n	80010f6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80010dc:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <HAL_InitTick+0xe4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <HAL_InitTick+0xdc>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e037      	b.n	8001166 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80010f6:	f000 f9c7 	bl	8001488 <HAL_SYSTICK_GetCLKSourceConfig>
 80010fa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d023      	beq.n	800114a <HAL_InitTick+0x92>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d82d      	bhi.n	8001164 <HAL_InitTick+0xac>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_InitTick+0x5e>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d00d      	beq.n	8001130 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001114:	e026      	b.n	8001164 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <HAL_InitTick+0xe4>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <HAL_InitTick+0xdc>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001124:	fbb3 f3f1 	udiv	r3, r3, r1
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	60fb      	str	r3, [r7, #12]
        break;
 800112e:	e01a      	b.n	8001166 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <HAL_InitTick+0xdc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	fbb3 f3f2 	udiv	r3, r3, r2
 800113e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	60fb      	str	r3, [r7, #12]
        break;
 8001148:	e00d      	b.n	8001166 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_InitTick+0xdc>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001154:	fbb3 f3f2 	udiv	r3, r3, r2
 8001158:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800115c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001160:	60fb      	str	r3, [r7, #12]
        break;
 8001162:	e000      	b.n	8001166 <HAL_InitTick+0xae>
        break;
 8001164:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 f914 	bl	8001394 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e009      	b.n	800118a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001176:	2200      	movs	r2, #0
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	f000 f8ef 	bl	8001360 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001182:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_InitTick+0xe8>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	e000e010 	.word	0xe000e010
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	2000016c 	.word	0x2000016c

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000016c 	.word	0x2000016c

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	@ (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff6a 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136e:	f7ff ff81 	bl	8001274 <__NVIC_GetPriorityGrouping>
 8001372:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	6978      	ldr	r0, [r7, #20]
 800137a:	f7ff ffb3 	bl	80012e4 <NVIC_EncodePriority>
 800137e:	4602      	mov	r2, r0
 8001380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff82 	bl	8001290 <__NVIC_SetPriority>
}
 800138c:	bf00      	nop
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00d      	b.n	80013c6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_SYSTICK_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_SYSTICK_Config+0x40>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_SYSTICK_Config+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <HAL_SYSTICK_Config+0x40>)
 80013be:	f043 0303 	orr.w	r3, r3, #3
 80013c2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d844      	bhi.n	8001470 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80013e6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	0800140f 	.word	0x0800140f
 80013f0:	0800142d 	.word	0x0800142d
 80013f4:	0800144f 	.word	0x0800144f
 80013f8:	08001471 	.word	0x08001471
 80013fc:	08001401 	.word	0x08001401
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6013      	str	r3, [r2, #0]
      break;
 800140c:	e031      	b.n	8001472 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800141c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001420:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001422:	f023 030c 	bic.w	r3, r3, #12
 8001426:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800142a:	e022      	b.n	8001472 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800143a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800143e:	f023 030c 	bic.w	r3, r3, #12
 8001442:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800144c:	e011      	b.n	8001472 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800145c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001460:	f023 030c 	bic.w	r3, r3, #12
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800146e:	e000      	b.n	8001472 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001470:	bf00      	nop
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010
 8001484:	44020c00 	.word	0x44020c00

08001488 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800149a:	2304      	movs	r3, #4
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e01e      	b.n	80014de <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80014a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d00f      	beq.n	80014d2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d80f      	bhi.n	80014d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d003      	beq.n	80014cc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80014c4:	e008      	b.n	80014d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
        break;
 80014ca:	e008      	b.n	80014de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
        break;
 80014d0:	e005      	b.n	80014de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80014d2:	2302      	movs	r3, #2
 80014d4:	607b      	str	r3, [r7, #4]
        break;
 80014d6:	e002      	b.n	80014de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
        break;
 80014dc:	bf00      	nop
    }
  }
  return systick_source;
 80014de:	687b      	ldr	r3, [r7, #4]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e010 	.word	0xe000e010
 80014f0:	44020c00 	.word	0x44020c00

080014f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001502:	e142      	b.n	800178a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8134 	beq.w	8001784 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x38>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b12      	cmp	r3, #18
 800152a:	d125      	bne.n	8001578 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4013      	ands	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	f003 020f 	and.w	r2, r3, #15
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	4313      	orrs	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	6979      	ldr	r1, [r7, #20]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4013      	ands	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d00b      	beq.n	80015cc <HAL_GPIO_Init+0xd8>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c0:	2b11      	cmp	r3, #17
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4013      	ands	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	4013      	ands	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d109      	bne.n	800164e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001642:	2b03      	cmp	r3, #3
 8001644:	d11b      	bne.n	800167e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d017      	beq.n	800167e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4013      	ands	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d07c      	beq.n	8001784 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800168a:	4a47      	ldr	r2, [pc, #284]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3318      	adds	r3, #24
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4013      	ands	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0a9a      	lsrs	r2, r3, #10
 80016b2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <HAL_GPIO_Init+0x2b8>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	00d2      	lsls	r2, r2, #3
 80016be:	4093      	lsls	r3, r2
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80016c6:	4938      	ldr	r1, [pc, #224]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3318      	adds	r3, #24
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016d4:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4013      	ands	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80016f8:	4a2b      	ldr	r2, [pc, #172]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	4013      	ands	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001722:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 800172a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800172e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4013      	ands	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800174e:	4a16      	ldr	r2, [pc, #88]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 8001758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800175c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4013      	ands	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800177c:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_GPIO_Init+0x2b4>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	3301      	adds	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f aeb5 	bne.w	8001504 <HAL_GPIO_Init+0x10>
  }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	44022000 	.word	0x44022000
 80017ac:	002f7f7f 	.word	0x002f7f7f

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f000 bc28 	b.w	8002014 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c4:	4b94      	ldr	r3, [pc, #592]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f003 0318 	and.w	r3, r3, #24
 80017cc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80017ce:	4b92      	ldr	r3, [pc, #584]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80017d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d05b      	beq.n	800189c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b18      	cmp	r3, #24
 80017ee:	d114      	bne.n	800181a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d111      	bne.n	800181a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	f000 bc08 	b.w	8002014 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001804:	4b84      	ldr	r3, [pc, #528]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	4981      	ldr	r1, [pc, #516]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001814:	4313      	orrs	r3, r2
 8001816:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001818:	e040      	b.n	800189c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d023      	beq.n	800186a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001822:	4b7d      	ldr	r3, [pc, #500]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7c      	ldr	r2, [pc, #496]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff fccd 	bl	80011cc <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001836:	f7ff fcc9 	bl	80011cc <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e3e5      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001848:	4b73      	ldr	r3, [pc, #460]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001854:	4b70      	ldr	r3, [pc, #448]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	496d      	ldr	r1, [pc, #436]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001864:	4313      	orrs	r3, r2
 8001866:	618b      	str	r3, [r1, #24]
 8001868:	e018      	b.n	800189c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800186a:	4b6b      	ldr	r3, [pc, #428]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6a      	ldr	r2, [pc, #424]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fca9 	bl	80011cc <HAL_GetTick>
 800187a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800187e:	f7ff fca5 	bl	80011cc <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e3c1      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001890:	4b61      	ldr	r3, [pc, #388]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a0 	beq.w	80019ea <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_OscConfig+0x10c>
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b18      	cmp	r3, #24
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 8092 	bne.w	80019ea <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e3a4      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x132>
 80018d4:	4b50      	ldr	r3, [pc, #320]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e058      	b.n	8001994 <HAL_RCC_OscConfig+0x1e4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d112      	bne.n	8001910 <HAL_RCC_OscConfig+0x160>
 80018ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b48      	ldr	r3, [pc, #288]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a47      	ldr	r2, [pc, #284]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80018fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a44      	ldr	r2, [pc, #272]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e041      	b.n	8001994 <HAL_RCC_OscConfig+0x1e4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x190>
 800191a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b3c      	ldr	r3, [pc, #240]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800192c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e029      	b.n	8001994 <HAL_RCC_OscConfig+0x1e4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001948:	d112      	bne.n	8001970 <HAL_RCC_OscConfig+0x1c0>
 800194a:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a32      	ldr	r2, [pc, #200]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b30      	ldr	r3, [pc, #192]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800195c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2c      	ldr	r2, [pc, #176]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e011      	b.n	8001994 <HAL_RCC_OscConfig+0x1e4>
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a28      	ldr	r2, [pc, #160]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a25      	ldr	r2, [pc, #148]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 800198e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fc16 	bl	80011cc <HAL_GetTick>
 80019a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fc12 	bl	80011cc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e32e      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x1f4>
 80019c2:	e012      	b.n	80019ea <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fc02 	bl	80011cc <HAL_GetTick>
 80019c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fbfe 	bl	80011cc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	@ 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e31a      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 809a 	beq.w	8001b2c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x25a>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b18      	cmp	r3, #24
 8001a02:	d149      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d146      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d104      	bne.n	8001a1c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e2fe      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
 8001a16:	bf00      	nop
 8001a18:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001a22:	4b9a      	ldr	r3, [pc, #616]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0218 	and.w	r2, r3, #24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d014      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a32:	4b96      	ldr	r3, [pc, #600]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0218 	bic.w	r2, r3, #24
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4993      	ldr	r1, [pc, #588]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001a44:	f000 fdd0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a48:	4b91      	ldr	r3, [pc, #580]	@ (8001c90 <HAL_RCC_OscConfig+0x4e0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fb33 	bl	80010b8 <HAL_InitTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e2db      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fbb6 	bl	80011cc <HAL_GetTick>
 8001a60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a64:	f7ff fbb2 	bl	80011cc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e2ce      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a76:	4b85      	ldr	r3, [pc, #532]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a82:	4b82      	ldr	r3, [pc, #520]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	497e      	ldr	r1, [pc, #504]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a96:	e049      	b.n	8001b2c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02c      	beq.n	8001afa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001aa0:	4b7a      	ldr	r3, [pc, #488]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 0218 	bic.w	r2, r3, #24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	4977      	ldr	r1, [pc, #476]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001ab2:	4b76      	ldr	r3, [pc, #472]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a75      	ldr	r2, [pc, #468]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff fb85 	bl	80011cc <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fb81 	bl	80011cc <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e29d      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001ae4:	4b69      	ldr	r3, [pc, #420]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	4966      	ldr	r1, [pc, #408]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	610b      	str	r3, [r1, #16]
 8001af8:	e018      	b.n	8001b2c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afa:	4b64      	ldr	r3, [pc, #400]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a63      	ldr	r2, [pc, #396]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff fb61 	bl	80011cc <HAL_GetTick>
 8001b0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fb5d 	bl	80011cc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e279      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b20:	4b5a      	ldr	r3, [pc, #360]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b40:	4b52      	ldr	r3, [pc, #328]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b46:	4a51      	ldr	r2, [pc, #324]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001b48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff fb3c 	bl	80011cc <HAL_GetTick>
 8001b54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b58:	f7ff fb38 	bl	80011cc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e254      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b6a:	4b48      	ldr	r3, [pc, #288]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ef      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3a8>
 8001b78:	e01b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b44      	ldr	r3, [pc, #272]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b80:	4a42      	ldr	r2, [pc, #264]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001b82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001b86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fb1f 	bl	80011cc <HAL_GetTick>
 8001b8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b92:	f7ff fb1b 	bl	80011cc <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e237      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ba4:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001baa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ef      	bne.n	8001b92 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80d2 	beq.w	8001d64 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001bc0:	4b34      	ldr	r3, [pc, #208]	@ (8001c94 <HAL_RCC_OscConfig+0x4e4>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d118      	bne.n	8001bfe <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_OscConfig+0x4e4>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <HAL_RCC_OscConfig+0x4e4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff faf8 	bl	80011cc <HAL_GetTick>
 8001bdc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be0:	f7ff faf4 	bl	80011cc <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e210      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001bf2:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <HAL_RCC_OscConfig+0x4e4>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_OscConfig+0x468>
 8001c06:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c16:	e074      	b.n	8001d02 <HAL_RCC_OscConfig+0x552>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d118      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4a2>
 8001c20:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c26:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c36:	4a15      	ldr	r2, [pc, #84]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c46:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c50:	e057      	b.n	8001d02 <HAL_RCC_OscConfig+0x552>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d11e      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4e8>
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c60:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c70:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c7a:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c80:	4a02      	ldr	r2, [pc, #8]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x552>
 8001c8c:	44020c00 	.word	0x44020c00
 8001c90:	20000004 	.word	0x20000004
 8001c94:	44020800 	.word	0x44020800
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b85      	cmp	r3, #133	@ 0x85
 8001c9e:	d118      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x522>
 8001ca0:	4ba2      	ldr	r3, [pc, #648]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ca6:	4aa1      	ldr	r2, [pc, #644]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cb6:	4a9d      	ldr	r2, [pc, #628]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cc0:	4b9a      	ldr	r3, [pc, #616]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc6:	4a99      	ldr	r2, [pc, #612]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cd0:	e017      	b.n	8001d02 <HAL_RCC_OscConfig+0x552>
 8001cd2:	4b96      	ldr	r3, [pc, #600]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd8:	4a94      	ldr	r2, [pc, #592]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ce2:	4b92      	ldr	r3, [pc, #584]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce8:	4a90      	ldr	r2, [pc, #576]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cea:	f023 0304 	bic.w	r3, r3, #4
 8001cee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cf2:	4b8e      	ldr	r3, [pc, #568]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cf8:	4a8c      	ldr	r2, [pc, #560]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fa5f 	bl	80011cc <HAL_GetTick>
 8001d0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff fa5b 	bl	80011cc <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e175      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d28:	4b80      	ldr	r3, [pc, #512]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0ed      	beq.n	8001d12 <HAL_RCC_OscConfig+0x562>
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff fa48 	bl	80011cc <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff fa44 	bl	80011cc <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e15e      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d56:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ed      	bne.n	8001d40 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d036      	beq.n	8001dde <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d019      	beq.n	8001dac <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d78:	4b6c      	ldr	r3, [pc, #432]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001d7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa22 	bl	80011cc <HAL_GetTick>
 8001d88:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d8c:	f7ff fa1e 	bl	80011cc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e13a      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x5dc>
 8001daa:	e018      	b.n	8001dde <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dac:	4b5f      	ldr	r3, [pc, #380]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5e      	ldr	r2, [pc, #376]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fa08 	bl	80011cc <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001dc0:	f7ff fa04 	bl	80011cc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e120      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dd2:	4b56      	ldr	r3, [pc, #344]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8115 	beq.w	8002012 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b18      	cmp	r3, #24
 8001dec:	f000 80af 	beq.w	8001f4e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	f040 8086 	bne.w	8001f06 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a4b      	ldr	r2, [pc, #300]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f9e1 	bl	80011cc <HAL_GetTick>
 8001e0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f9dd 	bl	80011cc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0f9      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e20:	4b42      	ldr	r3, [pc, #264]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e34:	f023 0303 	bic.w	r3, r3, #3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e40:	0212      	lsls	r2, r2, #8
 8001e42:	430a      	orrs	r2, r1
 8001e44:	4939      	ldr	r1, [pc, #228]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	3b01      	subs	r3, #1
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	3b01      	subs	r3, #1
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e7a:	492c      	ldr	r1, [pc, #176]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001e80:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	4a29      	ldr	r2, [pc, #164]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e86:	f023 0310 	bic.w	r3, r3, #16
 8001e8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e90:	4a26      	ldr	r2, [pc, #152]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	f023 020c 	bic.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	491f      	ldr	r1, [pc, #124]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	f023 0220 	bic.w	r2, r3, #32
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec0:	491a      	ldr	r1, [pc, #104]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	4a18      	ldr	r2, [pc, #96]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a15      	ldr	r2, [pc, #84]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001ed8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f975 	bl	80011cc <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff f971 	bl	80011cc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e08d      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x736>
 8001f04:	e085      	b.n	8002012 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_RCC_OscConfig+0x77c>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff f95b 	bl	80011cc <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff f957 	bl	80011cc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d903      	bls.n	8001f30 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e073      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
 8001f2c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f30:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ee      	bne.n	8001f1a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001f3c:	4b37      	ldr	r3, [pc, #220]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	4a36      	ldr	r2, [pc, #216]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001f42:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	6293      	str	r3, [r2, #40]	@ 0x28
 8001f4c:	e061      	b.n	8002012 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001f4e:	4b33      	ldr	r3, [pc, #204]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f54:	4b31      	ldr	r3, [pc, #196]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f58:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d031      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d12a      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d122      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d11a      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d111      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d108      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0e1b      	lsrs	r3, r3, #24
 8001fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e024      	b.n	8002014 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001fca:	4b14      	ldr	r3, [pc, #80]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d01a      	beq.n	8002012 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8001fe2:	f023 0310 	bic.w	r3, r3, #16
 8001fe6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f8f0 	bl	80011cc <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001fee:	bf00      	nop
 8001ff0:	f7ff f8ec 	bl	80011cc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d0f9      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	4a06      	ldr	r2, [pc, #24]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_RCC_OscConfig+0x86c>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	44020c00 	.word	0x44020c00

08002020 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e19e      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b83      	ldr	r3, [pc, #524]	@ (8002244 <HAL_RCC_ClockConfig+0x224>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b80      	ldr	r3, [pc, #512]	@ (8002244 <HAL_RCC_ClockConfig+0x224>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 020f 	bic.w	r2, r3, #15
 800204a:	497e      	ldr	r1, [pc, #504]	@ (8002244 <HAL_RCC_ClockConfig+0x224>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b7c      	ldr	r3, [pc, #496]	@ (8002244 <HAL_RCC_ClockConfig+0x224>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e186      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	4b74      	ldr	r3, [pc, #464]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800207e:	429a      	cmp	r2, r3
 8002080:	d909      	bls.n	8002096 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002082:	4b71      	ldr	r3, [pc, #452]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	496d      	ldr	r1, [pc, #436]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002092:	4313      	orrs	r3, r2
 8002094:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	4b68      	ldr	r3, [pc, #416]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d909      	bls.n	80020c8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80020b4:	4b64      	ldr	r3, [pc, #400]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4961      	ldr	r1, [pc, #388]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d908      	bls.n	80020f6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80020e4:	4b58      	ldr	r3, [pc, #352]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4955      	ldr	r1, [pc, #340]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	4b50      	ldr	r3, [pc, #320]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	429a      	cmp	r2, r3
 8002110:	d908      	bls.n	8002124 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002112:	4b4d      	ldr	r3, [pc, #308]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	494a      	ldr	r1, [pc, #296]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002120:	4313      	orrs	r3, r2
 8002122:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8093 	beq.w	8002258 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800213a:	4b43      	ldr	r3, [pc, #268]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d121      	bne.n	800218a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e113      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002152:	4b3d      	ldr	r3, [pc, #244]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e107      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800216a:	4b37      	ldr	r3, [pc, #220]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0fb      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217a:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0f3      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800218a:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	492c      	ldr	r1, [pc, #176]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002198:	4313      	orrs	r3, r2
 800219a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800219c:	f7ff f816 	bl	80011cc <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d112      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff f80e 	bl	80011cc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0d7      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c2:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0318 	and.w	r3, r3, #24
 80021ca:	2b18      	cmp	r3, #24
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_ClockConfig+0x18c>
 80021ce:	e043      	b.n	8002258 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d112      	bne.n	80021fe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f7fe fff7 	bl	80011cc <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0c0      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f003 0318 	and.w	r3, r3, #24
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_ClockConfig+0x1ba>
 80021fc:	e02c      	b.n	8002258 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d122      	bne.n	800224c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe ffe0 	bl	80011cc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0a9      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_RCC_ClockConfig+0x228>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 0318 	and.w	r3, r3, #24
 8002226:	2b08      	cmp	r3, #8
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_ClockConfig+0x1e8>
 800222a:	e015      	b.n	8002258 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7fe ffce 	bl	80011cc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d906      	bls.n	800224c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e097      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000
 8002248:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800224c:	4b4b      	ldr	r3, [pc, #300]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 0318 	and.w	r3, r3, #24
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e9      	bne.n	800222c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	4b44      	ldr	r3, [pc, #272]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	429a      	cmp	r2, r3
 8002272:	d208      	bcs.n	8002286 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002274:	4b41      	ldr	r3, [pc, #260]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f023 020f 	bic.w	r2, r3, #15
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	493e      	ldr	r1, [pc, #248]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002286:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <HAL_RCC_ClockConfig+0x360>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d210      	bcs.n	80022b6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002294:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <HAL_RCC_ClockConfig+0x360>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 020f 	bic.w	r2, r3, #15
 800229c:	4938      	ldr	r1, [pc, #224]	@ (8002380 <HAL_RCC_ClockConfig+0x360>)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a4:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <HAL_RCC_ClockConfig+0x360>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e05d      	b.n	8002372 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d208      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80022d2:	4b2a      	ldr	r3, [pc, #168]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4927      	ldr	r1, [pc, #156]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022fe:	429a      	cmp	r2, r3
 8002300:	d209      	bcs.n	8002316 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002302:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	491a      	ldr	r1, [pc, #104]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002330:	429a      	cmp	r2, r3
 8002332:	d209      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	490e      	ldr	r1, [pc, #56]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002344:	4313      	orrs	r3, r2
 8002346:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002348:	f000 f822 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_ClockConfig+0x35c>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	490b      	ldr	r1, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x364>)
 8002358:	5ccb      	ldrb	r3, [r1, r3]
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x368>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_RCC_ClockConfig+0x36c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fea6 	bl	80010b8 <HAL_InitTick>
 800236c:	4603      	mov	r3, r0
 800236e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002370:	7afb      	ldrb	r3, [r7, #11]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	44020c00 	.word	0x44020c00
 8002380:	40022000 	.word	0x40022000
 8002384:	08007238 	.word	0x08007238
 8002388:	20000000 	.word	0x20000000
 800238c:	20000004 	.word	0x20000004

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002396:	4b8c      	ldr	r3, [pc, #560]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 0318 	and.w	r3, r3, #24
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023a2:	4b8a      	ldr	r3, [pc, #552]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x23c>)
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e107      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a8:	4b87      	ldr	r3, [pc, #540]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f003 0318 	and.w	r3, r3, #24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d112      	bne.n	80023da <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80023b4:	4b84      	ldr	r3, [pc, #528]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80023c0:	4b81      	ldr	r3, [pc, #516]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	4a81      	ldr	r2, [pc, #516]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e0f1      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80023d4:	4b7e      	ldr	r3, [pc, #504]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	e0ee      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023da:	4b7b      	ldr	r3, [pc, #492]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0318 	and.w	r3, r3, #24
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e6:	4b7b      	ldr	r3, [pc, #492]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x244>)
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e0e5      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ec:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f003 0318 	and.w	r3, r3, #24
 80023f4:	2b18      	cmp	r3, #24
 80023f6:	f040 80dd 	bne.w	80025b4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023fa:	4b73      	ldr	r3, [pc, #460]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002404:	4b70      	ldr	r3, [pc, #448]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800240e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002410:	4b6d      	ldr	r3, [pc, #436]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800241c:	4b6a      	ldr	r3, [pc, #424]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002434:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80b7 	beq.w	80025ae <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0xbe>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d056      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x16a>
 800244c:	e077      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800244e:	4b5e      	ldr	r3, [pc, #376]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d02d      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800245a:	4b5b      	ldr	r3, [pc, #364]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	4a5a      	ldr	r2, [pc, #360]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002484:	4b50      	ldr	r3, [pc, #320]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002494:	ed97 6a02 	vldr	s12, [r7, #8]
 8002498:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x248>
 800249c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80024b4:	e065      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80025dc <HAL_RCC_GetSysClockFreq+0x24c>
 80024c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c8:	4b3f      	ldr	r3, [pc, #252]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80024ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024dc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x248>
 80024e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80024e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80024f8:	e043      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002504:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80025e0 <HAL_RCC_GetSysClockFreq+0x250>
 8002508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800250e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800251c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002520:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x248>
 8002524:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002528:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800252c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002530:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800253c:	e021      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002548:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80025e4 <HAL_RCC_GetSysClockFreq+0x254>
 800254c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002560:	ed97 6a02 	vldr	s12, [r7, #8]
 8002564:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x248>
 8002568:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800256c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002574:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002580:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800258c:	3301      	adds	r3, #1
 800258e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800259a:	edd7 6a06 	vldr	s13, [r7, #24]
 800259e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a6:	ee17 3a90 	vmov	r3, s15
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	e004      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e001      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80025b6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80025b8:	69fb      	ldr	r3, [r7, #28]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	44020c00 	.word	0x44020c00
 80025cc:	003d0900 	.word	0x003d0900
 80025d0:	03d09000 	.word	0x03d09000
 80025d4:	017d7840 	.word	0x017d7840
 80025d8:	46000000 	.word	0x46000000
 80025dc:	4c742400 	.word	0x4c742400
 80025e0:	4bbebc20 	.word	0x4bbebc20
 80025e4:	4a742400 	.word	0x4a742400

080025e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025ec:	f7ff fed0 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_RCC_GetHCLKFreq+0x2c>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80025f6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80025fa:	4907      	ldr	r1, [pc, #28]	@ (8002618 <HAL_RCC_GetHCLKFreq+0x30>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80025fe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	4a05      	ldr	r2, [pc, #20]	@ (800261c <HAL_RCC_GetHCLKFreq+0x34>)
 8002608:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800260a:	4b04      	ldr	r3, [pc, #16]	@ (800261c <HAL_RCC_GetHCLKFreq+0x34>)
 800260c:	681b      	ldr	r3, [r3, #0]
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	44020c00 	.word	0x44020c00
 8002618:	08007238 	.word	0x08007238
 800261c:	20000000 	.word	0x20000000

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002624:	f7ff ffe0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4904      	ldr	r1, [pc, #16]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	44020c00 	.word	0x44020c00
 8002648:	08007248 	.word	0x08007248

0800264c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002650:	f7ff ffca 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4904      	ldr	r1, [pc, #16]	@ (8002674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	44020c00 	.word	0x44020c00
 8002674:	08007248 	.word	0x08007248

08002678 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800267c:	f7ff ffb4 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	0b1b      	lsrs	r3, r3, #12
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4904      	ldr	r1, [pc, #16]	@ (80026a0 <HAL_RCC_GetPCLK3Freq+0x28>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	44020c00 	.word	0x44020c00
 80026a0:	08007248 	.word	0x08007248

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80026a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a8:	b0ba      	sub	sp, #232	@ 0xe8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80026bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80026c8:	2500      	movs	r5, #0
 80026ca:	ea54 0305 	orrs.w	r3, r4, r5
 80026ce:	d00b      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80026d0:	4bcd      	ldr	r3, [pc, #820]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026d6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80026da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	4ac9      	ldr	r2, [pc, #804]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026e2:	430b      	orrs	r3, r1
 80026e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f002 0801 	and.w	r8, r2, #1
 80026f4:	f04f 0900 	mov.w	r9, #0
 80026f8:	ea58 0309 	orrs.w	r3, r8, r9
 80026fc:	d042      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80026fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	2b05      	cmp	r3, #5
 8002706:	d823      	bhi.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002708:	a201      	add	r2, pc, #4	@ (adr r2, 8002710 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002759 	.word	0x08002759
 8002714:	08002729 	.word	0x08002729
 8002718:	0800273d 	.word	0x0800273d
 800271c:	08002759 	.word	0x08002759
 8002720:	08002759 	.word	0x08002759
 8002724:	08002759 	.word	0x08002759
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800272c:	3308      	adds	r3, #8
 800272e:	4618      	mov	r0, r3
 8002730:	f003 f90c 	bl	800594c <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800273a:	e00e      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800273c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002740:	3330      	adds	r3, #48	@ 0x30
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f99a 	bl	8005a7c <RCCEx_PLL3_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800274e:	e004      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002756:	e000      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800275a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002762:	4ba9      	ldr	r3, [pc, #676]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002768:	f023 0107 	bic.w	r1, r3, #7
 800276c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002772:	4aa5      	ldr	r2, [pc, #660]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002774:	430b      	orrs	r3, r1
 8002776:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800277a:	e003      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002780:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f002 0a02 	and.w	sl, r2, #2
 8002790:	f04f 0b00 	mov.w	fp, #0
 8002794:	ea5a 030b 	orrs.w	r3, sl, fp
 8002798:	f000 8088 	beq.w	80028ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800279c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	2b28      	cmp	r3, #40	@ 0x28
 80027a4:	d868      	bhi.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	08002881 	.word	0x08002881
 80027b0:	08002879 	.word	0x08002879
 80027b4:	08002879 	.word	0x08002879
 80027b8:	08002879 	.word	0x08002879
 80027bc:	08002879 	.word	0x08002879
 80027c0:	08002879 	.word	0x08002879
 80027c4:	08002879 	.word	0x08002879
 80027c8:	08002879 	.word	0x08002879
 80027cc:	08002851 	.word	0x08002851
 80027d0:	08002879 	.word	0x08002879
 80027d4:	08002879 	.word	0x08002879
 80027d8:	08002879 	.word	0x08002879
 80027dc:	08002879 	.word	0x08002879
 80027e0:	08002879 	.word	0x08002879
 80027e4:	08002879 	.word	0x08002879
 80027e8:	08002879 	.word	0x08002879
 80027ec:	08002865 	.word	0x08002865
 80027f0:	08002879 	.word	0x08002879
 80027f4:	08002879 	.word	0x08002879
 80027f8:	08002879 	.word	0x08002879
 80027fc:	08002879 	.word	0x08002879
 8002800:	08002879 	.word	0x08002879
 8002804:	08002879 	.word	0x08002879
 8002808:	08002879 	.word	0x08002879
 800280c:	08002881 	.word	0x08002881
 8002810:	08002879 	.word	0x08002879
 8002814:	08002879 	.word	0x08002879
 8002818:	08002879 	.word	0x08002879
 800281c:	08002879 	.word	0x08002879
 8002820:	08002879 	.word	0x08002879
 8002824:	08002879 	.word	0x08002879
 8002828:	08002879 	.word	0x08002879
 800282c:	08002881 	.word	0x08002881
 8002830:	08002879 	.word	0x08002879
 8002834:	08002879 	.word	0x08002879
 8002838:	08002879 	.word	0x08002879
 800283c:	08002879 	.word	0x08002879
 8002840:	08002879 	.word	0x08002879
 8002844:	08002879 	.word	0x08002879
 8002848:	08002879 	.word	0x08002879
 800284c:	08002881 	.word	0x08002881
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002854:	3308      	adds	r3, #8
 8002856:	4618      	mov	r0, r3
 8002858:	f003 f878 	bl	800594c <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002862:	e00e      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002868:	3330      	adds	r3, #48	@ 0x30
 800286a:	4618      	mov	r0, r3
 800286c:	f003 f906 	bl	8005a7c <RCCEx_PLL3_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002876:	e004      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002882:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800288a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800288c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002890:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002894:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800289c:	430b      	orrs	r3, r1
 800289e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028a2:	e003      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80028a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f002 0304 	and.w	r3, r2, #4
 80028b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80028c6:	460b      	mov	r3, r1
 80028c8:	4313      	orrs	r3, r2
 80028ca:	d04e      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80028cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028d6:	d02c      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80028d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028dc:	d825      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80028de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e2:	d028      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e8:	d81f      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80028ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80028ec:	d025      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80028ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80028f0:	d81b      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80028f2:	2b80      	cmp	r3, #128	@ 0x80
 80028f4:	d00f      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80028f6:	2b80      	cmp	r3, #128	@ 0x80
 80028f8:	d817      	bhi.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01f      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80028fe:	2b40      	cmp	r3, #64	@ 0x40
 8002900:	d113      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002906:	3308      	adds	r3, #8
 8002908:	4618      	mov	r0, r3
 800290a:	f003 f81f 	bl	800594c <RCCEx_PLL2_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002914:	e014      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800291a:	3330      	adds	r3, #48	@ 0x30
 800291c:	4618      	mov	r0, r3
 800291e:	f003 f8ad 	bl	8005a7c <RCCEx_PLL3_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002928:	e00a      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002930:	e006      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002932:	bf00      	nop
 8002934:	e004      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002936:	bf00      	nop
 8002938:	e002      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800293e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002940:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002948:	4b2f      	ldr	r3, [pc, #188]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800294a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800294e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002958:	4a2b      	ldr	r2, [pc, #172]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800295a:	430b      	orrs	r3, r1
 800295c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002960:	e003      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002962:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002966:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800296a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f002 0308 	and.w	r3, r2, #8
 8002976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002984:	460b      	mov	r3, r1
 8002986:	4313      	orrs	r3, r2
 8002988:	d056      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800298a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800298e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002990:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002994:	d031      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002996:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800299a:	d82a      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029a0:	d02d      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029a6:	d824      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80029a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029ac:	d029      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80029ae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029b2:	d81e      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b8:	d011      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	d818      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d023      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c8:	d113      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029ce:	3308      	adds	r3, #8
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 ffbb 	bl	800594c <RCCEx_PLL2_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80029dc:	e017      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029e2:	3330      	adds	r3, #48	@ 0x30
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 f849 	bl	8005a7c <RCCEx_PLL3_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80029f0:	e00d      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80029f8:	e009      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80029fa:	bf00      	nop
 80029fc:	e007      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80029fe:	bf00      	nop
 8002a00:	e005      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002a02:	bf00      	nop
 8002a04:	e003      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002a06:	bf00      	nop
 8002a08:	44020c00 	.word	0x44020c00
        break;
 8002a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002a16:	4bb9      	ldr	r3, [pc, #740]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002a1c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002a20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a26:	4ab5      	ldr	r2, [pc, #724]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002a2e:	e003      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a34:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f002 0310 	and.w	r3, r2, #16
 8002a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002a52:	460b      	mov	r3, r1
 8002a54:	4313      	orrs	r3, r2
 8002a56:	d053      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a5e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002a62:	d031      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002a64:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002a68:	d82a      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a6e:	d02d      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a74:	d824      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a7a:	d029      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002a7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a80:	d81e      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a86:	d011      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a8c:	d818      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d020      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a96:	d113      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 ff54 	bl	800594c <RCCEx_PLL2_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ab0:	3330      	adds	r3, #48	@ 0x30
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 ffe2 	bl	8005a7c <RCCEx_PLL3_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002ac6:	e006      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002ac8:	bf00      	nop
 8002aca:	e004      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002acc:	bf00      	nop
 8002ace:	e002      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002ade:	4b87      	ldr	r3, [pc, #540]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ae4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aee:	4a83      	ldr	r2, [pc, #524]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002af6:	e003      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002afc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f002 0320 	and.w	r3, r2, #32
 8002b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	d053      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002b2a:	d031      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002b2c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002b30:	d82a      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b36:	d02d      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b3c:	d824      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002b3e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002b42:	d029      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002b44:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002b48:	d81e      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4e:	d011      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b54:	d818      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d020      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b5e:	d113      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b64:	3308      	adds	r3, #8
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fef0 	bl	800594c <RCCEx_PLL2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002b72:	e014      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b78:	3330      	adds	r3, #48	@ 0x30
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 ff7e 	bl	8005a7c <RCCEx_PLL3_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002b86:	e00a      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002b8e:	e006      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b90:	bf00      	nop
 8002b92:	e004      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b94:	bf00      	nop
 8002b96:	e002      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b98:	bf00      	nop
 8002b9a:	e000      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002ba6:	4b55      	ldr	r3, [pc, #340]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bac:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb6:	4a51      	ldr	r2, [pc, #324]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002bbe:	e003      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002bc4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bde:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002be2:	460b      	mov	r3, r1
 8002be4:	4313      	orrs	r3, r2
 8002be6:	d053      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002bf2:	d031      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002bf4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002bf8:	d82a      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002bfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bfe:	d02d      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c04:	d824      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002c06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c0a:	d029      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c10:	d81e      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002c12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c16:	d011      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002c18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c1c:	d818      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d020      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c26:	d113      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 fe8c 	bl	800594c <RCCEx_PLL2_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002c3a:	e014      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c40:	3330      	adds	r3, #48	@ 0x30
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 ff1a 	bl	8005a7c <RCCEx_PLL3_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002c56:	e006      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c58:	bf00      	nop
 8002c5a:	e004      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c5c:	bf00      	nop
 8002c5e:	e002      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002c6e:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c80:	430b      	orrs	r3, r1
 8002c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c86:	e003      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ca6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4313      	orrs	r3, r2
 8002cae:	d03d      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cba:	d01b      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002cbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cc0:	d814      	bhi.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cc6:	d017      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8002cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ccc:	d80e      	bhi.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d109      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cdc:	3330      	adds	r3, #48	@ 0x30
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fecc 	bl	8005a7c <RCCEx_PLL3_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002cea:	e00a      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002cf2:	e006      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002cf4:	bf00      	nop
 8002cf6:	e004      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002cf8:	bf00      	nop
 8002cfa:	e002      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8002cfc:	44020c00 	.word	0x44020c00
        break;
 8002d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002d0a:	4b99      	ldr	r3, [pc, #612]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d10:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d1a:	4a95      	ldr	r2, [pc, #596]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002d22:	e003      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002d46:	460b      	mov	r3, r1
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d56:	d01b      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8002d58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d5c:	d814      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002d5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d62:	d017      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8002d64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d68:	d80e      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d014      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8002d6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d72:	d109      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d78:	3330      	adds	r3, #48	@ 0x30
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fe7e 	bl	8005a7c <RCCEx_PLL3_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002d86:	e008      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002d8e:	e004      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002da2:	4b73      	ldr	r3, [pc, #460]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002da4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002da8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002db2:	4a6f      	ldr	r2, [pc, #444]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002db4:	430b      	orrs	r3, r1
 8002db6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002dba:	e003      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002dc0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002dd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002dde:	460b      	mov	r3, r1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	d03d      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002df0:	d01b      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8002df2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002df6:	d814      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dfc:	d017      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8002dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e02:	d80e      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d014      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8002e08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e12:	3330      	adds	r3, #48	@ 0x30
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fe31 	bl	8005a7c <RCCEx_PLL3_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002e20:	e008      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e28:	e004      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002e2a:	bf00      	nop
 8002e2c:	e002      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e4e:	4a48      	ldr	r2, [pc, #288]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e50:	430b      	orrs	r3, r1
 8002e52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e56:	e003      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	d035      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e8c:	d015      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e92:	d80e      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d012      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea2:	3330      	adds	r3, #48	@ 0x30
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 fde9 	bl	8005a7c <RCCEx_PLL3_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002eb0:	e006      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002eb8:	e002      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002ec8:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002eca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ece:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eda:	4a25      	ldr	r2, [pc, #148]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002edc:	430b      	orrs	r3, r1
 8002ede:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002ee2:	e003      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ee8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002efe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002f06:	460b      	mov	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	d037      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f18:	d015      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8002f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f1e:	d80e      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8002f24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f28:	d109      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f2e:	3330      	adds	r3, #48	@ 0x30
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 fda3 	bl	8005a7c <RCCEx_PLL3_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002f3c:	e006      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002f4a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002f4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10f      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f5a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	4a02      	ldr	r2, [pc, #8]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f6e:	e005      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8002f70:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	2100      	movs	r1, #0
 8002f86:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f8e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002f92:	460b      	mov	r3, r1
 8002f94:	4313      	orrs	r3, r2
 8002f96:	d00e      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002f98:	4bb8      	ldr	r3, [pc, #736]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4ab7      	ldr	r2, [pc, #732]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002f9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002fa2:	61d3      	str	r3, [r2, #28]
 8002fa4:	4bb5      	ldr	r3, [pc, #724]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002fa6:	69d9      	ldr	r1, [r3, #28]
 8002fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002fb0:	4ab2      	ldr	r2, [pc, #712]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	d055      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fda:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002fde:	d031      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8002fe0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002fe4:	d82a      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fea:	d02d      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff0:	d824      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ff6:	d029      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8002ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ffc:	d81e      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003002:	d011      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003008:	d818      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800300e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003012:	d113      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003018:	3308      	adds	r3, #8
 800301a:	4618      	mov	r0, r3
 800301c:	f002 fc96 	bl	800594c <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003026:	e014      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800302c:	3330      	adds	r3, #48	@ 0x30
 800302e:	4618      	mov	r0, r3
 8003030:	f002 fd24 	bl	8005a7c <RCCEx_PLL3_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800303a:	e00a      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003042:	e006      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003044:	bf00      	nop
 8003046:	e004      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003052:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800305a:	4b88      	ldr	r3, [pc, #544]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800305c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003060:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800306c:	4a83      	ldr	r2, [pc, #524]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800306e:	430b      	orrs	r3, r1
 8003070:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800307a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800307e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800308a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800308c:	2300      	movs	r3, #0
 800308e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003090:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003094:	460b      	mov	r3, r1
 8003096:	4313      	orrs	r3, r2
 8003098:	d055      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800309a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80030a6:	d031      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80030a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80030ac:	d82a      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80030ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030b2:	d02d      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80030b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030b8:	d824      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80030ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030be:	d029      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80030c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030c4:	d81e      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ca:	d011      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d0:	d818      	bhi.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d020      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030da:	d113      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030e0:	3308      	adds	r3, #8
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fc32 	bl	800594c <RCCEx_PLL2_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80030ee:	e014      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030f4:	3330      	adds	r3, #48	@ 0x30
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fcc0 	bl	8005a7c <RCCEx_PLL3_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003102:	e00a      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800310a:	e006      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800310c:	bf00      	nop
 800310e:	e004      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003110:	bf00      	nop
 8003112:	e002      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003122:	4b56      	ldr	r3, [pc, #344]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003124:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003128:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800312c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003134:	4a51      	ldr	r2, [pc, #324]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003136:	430b      	orrs	r3, r1
 8003138:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003142:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003152:	663b      	str	r3, [r7, #96]	@ 0x60
 8003154:	2300      	movs	r3, #0
 8003156:	667b      	str	r3, [r7, #100]	@ 0x64
 8003158:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800315c:	460b      	mov	r3, r1
 800315e:	4313      	orrs	r3, r2
 8003160:	d032      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800316a:	2b05      	cmp	r3, #5
 800316c:	d80f      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800316e:	2b03      	cmp	r3, #3
 8003170:	d211      	bcs.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8003172:	2b01      	cmp	r3, #1
 8003174:	d911      	bls.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003176:	2b02      	cmp	r3, #2
 8003178:	d109      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800317a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800317e:	3308      	adds	r3, #8
 8003180:	4618      	mov	r0, r3
 8003182:	f002 fbe3 	bl	800594c <RCCEx_PLL2_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003194:	e002      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800319a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80031a4:	4b35      	ldr	r3, [pc, #212]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031aa:	f023 0107 	bic.w	r1, r3, #7
 80031ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031b6:	4a31      	ldr	r2, [pc, #196]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031b8:	430b      	orrs	r3, r1
 80031ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031be:	e003      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80031c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	2100      	movs	r1, #0
 80031d2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d024      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80031e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d005      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80031fa:	e002      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8003200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003202:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800320a:	4b1c      	ldr	r3, [pc, #112]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800320c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003210:	f023 0108 	bic.w	r1, r3, #8
 8003214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800321c:	4a17      	ldr	r2, [pc, #92]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800321e:	430b      	orrs	r3, r1
 8003220:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003226:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800322a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800322e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800323a:	653b      	str	r3, [r7, #80]	@ 0x50
 800323c:	2300      	movs	r3, #0
 800323e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003240:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003244:	460b      	mov	r3, r1
 8003246:	4313      	orrs	r3, r2
 8003248:	f000 80b9 	beq.w	80033be <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	4a0b      	ldr	r2, [pc, #44]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003258:	f7fd ffb8 	bl	80011cc <HAL_GetTick>
 800325c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003260:	e010      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fd ffb3 	bl	80011cc <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d908      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003278:	e00a      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800327a:	bf00      	nop
 800327c:	44020c00 	.word	0x44020c00
 8003280:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003284:	4bba      	ldr	r3, [pc, #744]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0e8      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8003290:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 808e 	bne.w	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800329a:	4bb6      	ldr	r3, [pc, #728]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800329c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80032b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032b4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032bc:	4293      	cmp	r3, r2
 80032be:	d01b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c0:	4bac      	ldr	r3, [pc, #688]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	4ba9      	ldr	r3, [pc, #676]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032d4:	4aa7      	ldr	r2, [pc, #668]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032de:	4ba5      	ldr	r3, [pc, #660]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032e4:	4aa3      	ldr	r2, [pc, #652]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ee:	4aa1      	ldr	r2, [pc, #644]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d019      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd ff62 	bl	80011cc <HAL_GetTick>
 8003308:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330c:	e00d      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fd ff5d 	bl	80011cc <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003318:	1ad2      	subs	r2, r2, r3
 800331a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800331e:	429a      	cmp	r2, r3
 8003320:	d903      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332a:	4b92      	ldr	r3, [pc, #584]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800332c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ea      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8003338:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d135      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003344:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003350:	d110      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8003352:	4b88      	ldr	r3, [pc, #544]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800335a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800335e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003368:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800336c:	4a81      	ldr	r2, [pc, #516]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800336e:	430b      	orrs	r3, r1
 8003370:	61d3      	str	r3, [r2, #28]
 8003372:	e005      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003374:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4a7e      	ldr	r2, [pc, #504]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800337a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800337e:	61d3      	str	r3, [r2, #28]
 8003380:	4b7c      	ldr	r3, [pc, #496]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003386:	4a7b      	ldr	r2, [pc, #492]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003390:	4b78      	ldr	r3, [pc, #480]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003392:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800339a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800339e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a2:	4a74      	ldr	r2, [pc, #464]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033a4:	430b      	orrs	r3, r1
 80033a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033aa:	e008      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80033b4:	e003      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80033d4:	460b      	mov	r3, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	d035      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80033da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e2:	2b30      	cmp	r3, #48	@ 0x30
 80033e4:	d014      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80033e6:	2b30      	cmp	r3, #48	@ 0x30
 80033e8:	d80e      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d012      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d80a      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d106      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003404:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003406:	e008      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800340e:	e004      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003410:	bf00      	nop
 8003412:	e002      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003422:	4b54      	ldr	r3, [pc, #336]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003428:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800342c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003434:	4a4f      	ldr	r2, [pc, #316]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003436:	430b      	orrs	r3, r1
 8003438:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800343c:	e003      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003442:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003452:	643b      	str	r3, [r7, #64]	@ 0x40
 8003454:	2300      	movs	r3, #0
 8003456:	647b      	str	r3, [r7, #68]	@ 0x44
 8003458:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d033      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003466:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	d007      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003472:	e010      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003474:	4b3f      	ldr	r3, [pc, #252]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	4a3e      	ldr	r2, [pc, #248]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800347a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800347e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003480:	e00d      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003486:	3308      	adds	r3, #8
 8003488:	4618      	mov	r0, r3
 800348a:	f002 fa5f 	bl	800594c <RCCEx_PLL2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800349c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80034a6:	4b33      	ldr	r3, [pc, #204]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034ac:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80034b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034ba:	430b      	orrs	r3, r1
 80034bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80034ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80034d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034d8:	2300      	movs	r3, #0
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80034e0:	460b      	mov	r3, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	d04c      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80034e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d827      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	0800351b 	.word	0x0800351b
 8003500:	0800352f 	.word	0x0800352f
 8003504:	0800354b 	.word	0x0800354b
 8003508:	0800354b 	.word	0x0800354b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	4a18      	ldr	r2, [pc, #96]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003516:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003518:	e018      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800351a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800351e:	3308      	adds	r3, #8
 8003520:	4618      	mov	r0, r3
 8003522:	f002 fa13 	bl	800594c <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800352c:	e00e      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800352e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003532:	3330      	adds	r3, #48	@ 0x30
 8003534:	4618      	mov	r0, r3
 8003536:	f002 faa1 	bl	8005a7c <RCCEx_PLL3_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003540:	e004      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003548:	e000      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800354a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003554:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800355a:	f023 0107 	bic.w	r1, r3, #7
 800355e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003562:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003566:	4a03      	ldr	r2, [pc, #12]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003568:	430b      	orrs	r3, r1
 800356a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800356e:	e007      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8003570:	44020800 	.word	0x44020800
 8003574:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800357c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800358c:	633b      	str	r3, [r7, #48]	@ 0x30
 800358e:	2300      	movs	r3, #0
 8003590:	637b      	str	r3, [r7, #52]	@ 0x34
 8003592:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	f000 8081 	beq.w	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800359e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d85f      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80035aa:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	08003635 	.word	0x08003635
 80035b4:	0800366b 	.word	0x0800366b
 80035b8:	0800366b 	.word	0x0800366b
 80035bc:	0800366b 	.word	0x0800366b
 80035c0:	0800366b 	.word	0x0800366b
 80035c4:	0800366b 	.word	0x0800366b
 80035c8:	0800366b 	.word	0x0800366b
 80035cc:	0800366b 	.word	0x0800366b
 80035d0:	08003643 	.word	0x08003643
 80035d4:	0800366b 	.word	0x0800366b
 80035d8:	0800366b 	.word	0x0800366b
 80035dc:	0800366b 	.word	0x0800366b
 80035e0:	0800366b 	.word	0x0800366b
 80035e4:	0800366b 	.word	0x0800366b
 80035e8:	0800366b 	.word	0x0800366b
 80035ec:	0800366b 	.word	0x0800366b
 80035f0:	08003657 	.word	0x08003657
 80035f4:	0800366b 	.word	0x0800366b
 80035f8:	0800366b 	.word	0x0800366b
 80035fc:	0800366b 	.word	0x0800366b
 8003600:	0800366b 	.word	0x0800366b
 8003604:	0800366b 	.word	0x0800366b
 8003608:	0800366b 	.word	0x0800366b
 800360c:	0800366b 	.word	0x0800366b
 8003610:	08003673 	.word	0x08003673
 8003614:	0800366b 	.word	0x0800366b
 8003618:	0800366b 	.word	0x0800366b
 800361c:	0800366b 	.word	0x0800366b
 8003620:	0800366b 	.word	0x0800366b
 8003624:	0800366b 	.word	0x0800366b
 8003628:	0800366b 	.word	0x0800366b
 800362c:	0800366b 	.word	0x0800366b
 8003630:	08003673 	.word	0x08003673
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4bb9      	ldr	r3, [pc, #740]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	4ab8      	ldr	r2, [pc, #736]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003640:	e018      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003646:	3308      	adds	r3, #8
 8003648:	4618      	mov	r0, r3
 800364a:	f002 f97f 	bl	800594c <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003654:	e00e      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800365a:	3330      	adds	r3, #48	@ 0x30
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fa0d 	bl	8005a7c <RCCEx_PLL3_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003668:	e004      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8003672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003674:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10d      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800367c:	4ba7      	ldr	r3, [pc, #668]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800367e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003682:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800368a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800368e:	4aa3      	ldr	r2, [pc, #652]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003690:	430b      	orrs	r3, r1
 8003692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800369c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80036a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80036ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ae:	2300      	movs	r3, #0
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80036b6:	460b      	mov	r3, r1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	d04e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80036bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c8:	d02e      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ce:	d827      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80036d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d2:	d02b      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80036d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d6:	d823      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80036d8:	2b80      	cmp	r3, #128	@ 0x80
 80036da:	d017      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80036dc:	2b80      	cmp	r3, #128	@ 0x80
 80036de:	d81f      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80036e4:	2b40      	cmp	r3, #64	@ 0x40
 80036e6:	d007      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80036e8:	e01a      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ea:	4b8c      	ldr	r3, [pc, #560]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	4a8b      	ldr	r2, [pc, #556]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80036f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80036f6:	e01a      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036fc:	3308      	adds	r3, #8
 80036fe:	4618      	mov	r0, r3
 8003700:	f002 f924 	bl	800594c <RCCEx_PLL2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800370a:	e010      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800370c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003710:	3330      	adds	r3, #48	@ 0x30
 8003712:	4618      	mov	r0, r3
 8003714:	f002 f9b2 	bl	8005a7c <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800371e:	e006      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003736:	4b79      	ldr	r3, [pc, #484]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800373c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003748:	4974      	ldr	r1, [pc, #464]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003756:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800375a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003766:	623b      	str	r3, [r7, #32]
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
 800376c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003770:	460b      	mov	r3, r1
 8003772:	4313      	orrs	r3, r2
 8003774:	d055      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800377a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800377e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003782:	d031      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8003784:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003788:	d82a      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800378e:	d02d      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003794:	d824      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003796:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800379a:	d029      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 800379c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037a0:	d81e      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a6:	d011      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80037a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ac:	d818      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037b6:	d113      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037bc:	3308      	adds	r3, #8
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 f8c4 	bl	800594c <RCCEx_PLL2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80037ca:	e014      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037d0:	3330      	adds	r3, #48	@ 0x30
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 f952 	bl	8005a7c <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80037de:	e00a      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80037e6:	e006      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80037e8:	bf00      	nop
 80037ea:	e004      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80037fe:	4b47      	ldr	r3, [pc, #284]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003804:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8003808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800380c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003810:	4942      	ldr	r1, [pc, #264]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800381e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	2100      	movs	r1, #0
 800382c:	61b9      	str	r1, [r7, #24]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003838:	460b      	mov	r3, r1
 800383a:	4313      	orrs	r3, r2
 800383c:	d03c      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800383e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003846:	2b03      	cmp	r3, #3
 8003848:	d81b      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800384a:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	0800388b 	.word	0x0800388b
 8003854:	08003861 	.word	0x08003861
 8003858:	0800386f 	.word	0x0800386f
 800385c:	0800388b 	.word	0x0800388b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003860:	4b2e      	ldr	r3, [pc, #184]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	4a2d      	ldr	r2, [pc, #180]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800386c:	e00e      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800386e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003872:	3308      	adds	r3, #8
 8003874:	4618      	mov	r0, r3
 8003876:	f002 f869 	bl	800594c <RCCEx_PLL2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003880:	e004      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003888:	e000      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800388a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003894:	4b21      	ldr	r3, [pc, #132]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003896:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038a6:	491d      	ldr	r1, [pc, #116]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	2100      	movs	r1, #0
 80038c2:	6139      	str	r1, [r7, #16]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d03c      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80038d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e0:	d00e      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80038e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e6:	d815      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d019      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80038ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038f0:	d110      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	4a09      	ldr	r2, [pc, #36]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80038fe:	e010      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003904:	3308      	adds	r3, #8
 8003906:	4618      	mov	r0, r3
 8003908:	f002 f820 	bl	800594c <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003912:	e006      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800391a:	e002      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 800391c:	44020c00 	.word	0x44020c00
        break;
 8003920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003922:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800392a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800392c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003930:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393c:	4938      	ldr	r1, [pc, #224]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003944:	e003      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800394a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800394e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	2100      	movs	r1, #0
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d038      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800396a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800396e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003972:	2b30      	cmp	r3, #48	@ 0x30
 8003974:	d01b      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8003976:	2b30      	cmp	r3, #48	@ 0x30
 8003978:	d815      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800397a:	2b10      	cmp	r3, #16
 800397c:	d002      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800397e:	2b20      	cmp	r3, #32
 8003980:	d007      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8003982:	e010      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	4a25      	ldr	r2, [pc, #148]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003990:	e00e      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003996:	3330      	adds	r3, #48	@ 0x30
 8003998:	4618      	mov	r0, r3
 800399a:	f002 f86f 	bl	8005a7c <RCCEx_PLL3_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80039a4:	e004      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80039ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80039ca:	4915      	ldr	r1, [pc, #84]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80039d2:	e003      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	2100      	movs	r1, #0
 80039e6:	6039      	str	r1, [r7, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d00c      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80039f8:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80039fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a0a:	4905      	ldr	r1, [pc, #20]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8003a12:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	37e8      	adds	r7, #232	@ 0xe8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a20:	44020c00 	.word	0x44020c00

08003a24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b08b      	sub	sp, #44	@ 0x2c
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003a2c:	4bae      	ldr	r3, [pc, #696]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a36:	4bac      	ldr	r3, [pc, #688]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003a40:	4ba9      	ldr	r3, [pc, #676]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a4a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a4c:	4ba6      	ldr	r3, [pc, #664]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a58:	4ba3      	ldr	r3, [pc, #652]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a70:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8126 	beq.w	8003cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d053      	beq.n	8003b2a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d86f      	bhi.n	8003b68 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d02b      	beq.n	8003aec <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003a94:	e068      	b.n	8003b68 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a96:	4b94      	ldr	r3, [pc, #592]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	4a92      	ldr	r2, [pc, #584]	@ (8003cec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ace:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003aea:	e068      	b.n	8003bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b08:	ed97 6a04 	vldr	s12, [r7, #16]
 8003b0c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003b10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003b28:	e049      	b.n	8003bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b34:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a04 	vldr	s12, [r7, #16]
 8003b4a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003b66:	e02a      	b.n	8003bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b68:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	08db      	lsrs	r3, r3, #3
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	4a5e      	ldr	r2, [pc, #376]	@ (8003cec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
 8003b78:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ba0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003bbc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bca:	d121      	bne.n	8003c10 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003bcc:	4b46      	ldr	r3, [pc, #280]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d017      	beq.n	8003c08 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	0a5b      	lsrs	r3, r3, #9
 8003bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003bf2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e006      	b.n	8003c16 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e002      	b.n	8003c16 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c16:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c22:	d121      	bne.n	8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003c24:	4b30      	ldr	r3, [pc, #192]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d017      	beq.n	8003c60 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c46:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003c4a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c56:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	e006      	b.n	8003c6e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	e002      	b.n	8003c6e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c7a:	d121      	bne.n	8003cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d017      	beq.n	8003cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c88:	4b17      	ldr	r3, [pc, #92]	@ (8003ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8c:	0e1b      	lsrs	r3, r3, #24
 8003c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003ca2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cae:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003cb6:	e010      	b.n	8003cda <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
}
 8003cbe:	e00c      	b.n	8003cda <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
}
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
}
 8003cda:	bf00      	nop
 8003cdc:	372c      	adds	r7, #44	@ 0x2c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	44020c00 	.word	0x44020c00
 8003cec:	03d09000 	.word	0x03d09000
 8003cf0:	46000000 	.word	0x46000000
 8003cf4:	4a742400 	.word	0x4a742400
 8003cf8:	4bbebc20 	.word	0x4bbebc20

08003cfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b08b      	sub	sp, #44	@ 0x2c
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003d04:	4bae      	ldr	r3, [pc, #696]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003d0e:	4bac      	ldr	r3, [pc, #688]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003d18:	4ba9      	ldr	r3, [pc, #676]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d22:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003d24:	4ba6      	ldr	r3, [pc, #664]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003d30:	4ba3      	ldr	r3, [pc, #652]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d48:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8126 	beq.w	8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d053      	beq.n	8003e02 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d86f      	bhi.n	8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d003      	beq.n	8003d6e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d02b      	beq.n	8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003d6c:	e068      	b.n	8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d6e:	4b94      	ldr	r3, [pc, #592]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	08db      	lsrs	r3, r3, #3
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	4a92      	ldr	r2, [pc, #584]	@ (8003fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003da6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003dc2:	e068      	b.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003de4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003e00:	e049      	b.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e22:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003e3e:	e02a      	b.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e40:	4b5f      	ldr	r3, [pc, #380]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e74:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e78:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003e94:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e96:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea2:	d121      	bne.n	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003ea4:	4b46      	ldr	r3, [pc, #280]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003eb0:	4b43      	ldr	r3, [pc, #268]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb4:	0a5b      	lsrs	r3, r3, #9
 8003eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003eca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e006      	b.n	8003eee <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e002      	b.n	8003eee <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003eee:	4b34      	ldr	r3, [pc, #208]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efa:	d121      	bne.n	8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003efc:	4b30      	ldr	r3, [pc, #192]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d017      	beq.n	8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f08:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003f22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	e006      	b.n	8003f46 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	e002      	b.n	8003f46 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003f46:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f52:	d121      	bne.n	8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f60:	4b17      	ldr	r3, [pc, #92]	@ (8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f76:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003f7a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f86:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f8e:	e010      	b.n	8003fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
}
 8003f96:	e00c      	b.n	8003fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
}
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
}
 8003fb2:	bf00      	nop
 8003fb4:	372c      	adds	r7, #44	@ 0x2c
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	44020c00 	.word	0x44020c00
 8003fc4:	03d09000 	.word	0x03d09000
 8003fc8:	46000000 	.word	0x46000000
 8003fcc:	4a742400 	.word	0x4a742400
 8003fd0:	4bbebc20 	.word	0x4bbebc20

08003fd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b08b      	sub	sp, #44	@ 0x2c
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003fdc:	4bae      	ldr	r3, [pc, #696]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003fe6:	4bac      	ldr	r3, [pc, #688]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8003ff0:	4ba9      	ldr	r3, [pc, #676]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ffa:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003ffc:	4ba6      	ldr	r3, [pc, #664]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004008:	4ba3      	ldr	r3, [pc, #652]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	08db      	lsrs	r3, r3, #3
 800400e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004020:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8126 	beq.w	8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d053      	beq.n	80040da <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d86f      	bhi.n	8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d003      	beq.n	8004046 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d02b      	beq.n	800409c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004044:	e068      	b.n	8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004046:	4b94      	ldr	r3, [pc, #592]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	4a92      	ldr	r2, [pc, #584]	@ (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407a:	ed97 6a04 	vldr	s12, [r7, #16]
 800407e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800408e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004096:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800409a:	e068      	b.n	800416e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80040aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80040bc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80040c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80040d8:	e049      	b.n	800416e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80040e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80040fa:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004116:	e02a      	b.n	800416e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004118:	4b5f      	ldr	r3, [pc, #380]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	08db      	lsrs	r3, r3, #3
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	4a5e      	ldr	r2, [pc, #376]	@ (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
 8004128:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004150:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004168:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800416c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800416e:	4b4a      	ldr	r3, [pc, #296]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800417a:	d121      	bne.n	80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800417c:	4b46      	ldr	r3, [pc, #280]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004188:	4b43      	ldr	r3, [pc, #268]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800418a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418c:	0a5b      	lsrs	r3, r3, #9
 800418e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800419a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800419e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80041a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ae:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e006      	b.n	80041c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e002      	b.n	80041c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041c6:	4b34      	ldr	r3, [pc, #208]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d2:	d121      	bne.n	8004218 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80041d4:	4b30      	ldr	r3, [pc, #192]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80041f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041f6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80041fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004206:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e006      	b.n	800421e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	e002      	b.n	800421e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800422a:	d121      	bne.n	8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800422c:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d017      	beq.n	8004268 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004238:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800423a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800424a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800424e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004252:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800425a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004266:	e010      	b.n	800428a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
}
 800426e:	e00c      	b.n	800428a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	e008      	b.n	800428a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
}
 800428a:	bf00      	nop
 800428c:	372c      	adds	r7, #44	@ 0x2c
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	44020c00 	.word	0x44020c00
 800429c:	03d09000 	.word	0x03d09000
 80042a0:	46000000 	.word	0x46000000
 80042a4:	4a742400 	.word	0x4a742400
 80042a8:	4bbebc20 	.word	0x4bbebc20

080042ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b08f      	sub	sp, #60	@ 0x3c
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80042b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042ba:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80042be:	4321      	orrs	r1, r4
 80042c0:	d150      	bne.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80042c2:	4b26      	ldr	r3, [pc, #152]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042cc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80042ce:	4b23      	ldr	r3, [pc, #140]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d108      	bne.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042e2:	d104      	bne.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80042e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ea:	f001 bb20 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80042ee:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042fc:	d108      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004304:	d104      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004306:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
 800430c:	f001 bb0f 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004310:	4b12      	ldr	r3, [pc, #72]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800431c:	d119      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004324:	d115      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004326:	4b0d      	ldr	r3, [pc, #52]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800432e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004332:	d30a      	bcc.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004334:	4b09      	ldr	r3, [pc, #36]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800433e:	4a08      	ldr	r2, [pc, #32]	@ (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004346:	f001 baf2 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800434e:	f001 baee 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	637b      	str	r3, [r7, #52]	@ 0x34
 8004356:	f001 baea 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800435a:	bf00      	nop
 800435c:	44020c00 	.word	0x44020c00
 8004360:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004368:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 800436c:	ea50 0104 	orrs.w	r1, r0, r4
 8004370:	f000 8615 	beq.w	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8004374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004378:	2801      	cmp	r0, #1
 800437a:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800437e:	f081 82d3 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004386:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800438a:	ea50 0104 	orrs.w	r1, r0, r4
 800438e:	f000 84d8 	beq.w	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004396:	2801      	cmp	r0, #1
 8004398:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800439c:	f081 82c4 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043a4:	f1a1 0410 	sub.w	r4, r1, #16
 80043a8:	ea50 0104 	orrs.w	r1, r0, r4
 80043ac:	f001 8288 	beq.w	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80043b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b4:	2801      	cmp	r0, #1
 80043b6:	f171 0110 	sbcs.w	r1, r1, #16
 80043ba:	f081 82b5 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043c2:	f1a1 0408 	sub.w	r4, r1, #8
 80043c6:	ea50 0104 	orrs.w	r1, r0, r4
 80043ca:	f001 81fe 	beq.w	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80043ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043d2:	2801      	cmp	r0, #1
 80043d4:	f171 0108 	sbcs.w	r1, r1, #8
 80043d8:	f081 82a6 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043e0:	1f0c      	subs	r4, r1, #4
 80043e2:	ea50 0104 	orrs.w	r1, r0, r4
 80043e6:	f000 8753 	beq.w	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80043ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043ee:	2801      	cmp	r0, #1
 80043f0:	f171 0104 	sbcs.w	r1, r1, #4
 80043f4:	f081 8298 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80043f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043fc:	1e8c      	subs	r4, r1, #2
 80043fe:	ea50 0104 	orrs.w	r1, r0, r4
 8004402:	f001 8173 	beq.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8004406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440a:	2801      	cmp	r0, #1
 800440c:	f171 0102 	sbcs.w	r1, r1, #2
 8004410:	f081 828a 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004418:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800441c:	4321      	orrs	r1, r4
 800441e:	f001 80fe 	beq.w	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8004422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004426:	4ccb      	ldr	r4, [pc, #812]	@ (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004428:	42a0      	cmp	r0, r4
 800442a:	f171 0100 	sbcs.w	r1, r1, #0
 800442e:	f081 827b 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004436:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800443a:	4321      	orrs	r1, r4
 800443c:	f001 8076 	beq.w	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8004440:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004444:	4cc4      	ldr	r4, [pc, #784]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8004446:	42a0      	cmp	r0, r4
 8004448:	f171 0100 	sbcs.w	r1, r1, #0
 800444c:	f081 826c 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004454:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8004458:	4321      	orrs	r1, r4
 800445a:	f000 87b5 	beq.w	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800445e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004462:	4cbe      	ldr	r4, [pc, #760]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8004464:	42a0      	cmp	r0, r4
 8004466:	f171 0100 	sbcs.w	r1, r1, #0
 800446a:	f081 825d 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800446e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004472:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8004476:	4321      	orrs	r1, r4
 8004478:	f000 8738 	beq.w	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800447c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004480:	4cb7      	ldr	r4, [pc, #732]	@ (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8004482:	42a0      	cmp	r0, r4
 8004484:	f171 0100 	sbcs.w	r1, r1, #0
 8004488:	f081 824e 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800448c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004490:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8004494:	4321      	orrs	r1, r4
 8004496:	f001 81cd 	beq.w	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 800449a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800449e:	4cb1      	ldr	r4, [pc, #708]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80044a0:	42a0      	cmp	r0, r4
 80044a2:	f171 0100 	sbcs.w	r1, r1, #0
 80044a6:	f081 823f 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044ae:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80044b2:	4321      	orrs	r1, r4
 80044b4:	f000 80d9 	beq.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80044b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044bc:	4caa      	ldr	r4, [pc, #680]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80044be:	42a0      	cmp	r0, r4
 80044c0:	f171 0100 	sbcs.w	r1, r1, #0
 80044c4:	f081 8230 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044cc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80044d0:	4321      	orrs	r1, r4
 80044d2:	f000 83da 	beq.w	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80044d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044da:	4ca4      	ldr	r4, [pc, #656]	@ (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80044dc:	42a0      	cmp	r0, r4
 80044de:	f171 0100 	sbcs.w	r1, r1, #0
 80044e2:	f081 8221 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044ea:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80044ee:	4321      	orrs	r1, r4
 80044f0:	f000 8627 	beq.w	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80044f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044f8:	4c9d      	ldr	r4, [pc, #628]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80044fa:	42a0      	cmp	r0, r4
 80044fc:	f171 0100 	sbcs.w	r1, r1, #0
 8004500:	f081 8212 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004508:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800450c:	4321      	orrs	r1, r4
 800450e:	f000 857a 	beq.w	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004516:	4c97      	ldr	r4, [pc, #604]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8004518:	42a0      	cmp	r0, r4
 800451a:	f171 0100 	sbcs.w	r1, r1, #0
 800451e:	f081 8203 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004526:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800452a:	4321      	orrs	r1, r4
 800452c:	f000 84fb 	beq.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004534:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8004538:	f171 0100 	sbcs.w	r1, r1, #0
 800453c:	f081 81f4 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004544:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8004548:	4321      	orrs	r1, r4
 800454a:	f000 84a9 	beq.w	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800454e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004552:	f248 0401 	movw	r4, #32769	@ 0x8001
 8004556:	42a0      	cmp	r0, r4
 8004558:	f171 0100 	sbcs.w	r1, r1, #0
 800455c:	f081 81e4 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004564:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8004568:	4321      	orrs	r1, r4
 800456a:	f000 8456 	beq.w	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800456e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004572:	f244 0401 	movw	r4, #16385	@ 0x4001
 8004576:	42a0      	cmp	r0, r4
 8004578:	f171 0100 	sbcs.w	r1, r1, #0
 800457c:	f081 81d4 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004584:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8004588:	4321      	orrs	r1, r4
 800458a:	f000 8403 	beq.w	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800458e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004592:	f242 0401 	movw	r4, #8193	@ 0x2001
 8004596:	42a0      	cmp	r0, r4
 8004598:	f171 0100 	sbcs.w	r1, r1, #0
 800459c:	f081 81c4 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045a4:	2821      	cmp	r0, #33	@ 0x21
 80045a6:	f171 0100 	sbcs.w	r1, r1, #0
 80045aa:	d255      	bcs.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80045ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045b0:	4301      	orrs	r1, r0
 80045b2:	f001 81b9 	beq.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045ba:	1e42      	subs	r2, r0, #1
 80045bc:	f141 33ff 	adc.w	r3, r1, #4294967295
 80045c0:	2a20      	cmp	r2, #32
 80045c2:	f173 0100 	sbcs.w	r1, r3, #0
 80045c6:	f081 81af 	bcs.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045ca:	2a1f      	cmp	r2, #31
 80045cc:	f201 81ac 	bhi.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045d0:	a101      	add	r1, pc, #4	@ (adr r1, 80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80045d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080046af 	.word	0x080046af
 80045dc:	080047ad 	.word	0x080047ad
 80045e0:	08005929 	.word	0x08005929
 80045e4:	0800486d 	.word	0x0800486d
 80045e8:	08005929 	.word	0x08005929
 80045ec:	08005929 	.word	0x08005929
 80045f0:	08005929 	.word	0x08005929
 80045f4:	0800493d 	.word	0x0800493d
 80045f8:	08005929 	.word	0x08005929
 80045fc:	08005929 	.word	0x08005929
 8004600:	08005929 	.word	0x08005929
 8004604:	08005929 	.word	0x08005929
 8004608:	08005929 	.word	0x08005929
 800460c:	08005929 	.word	0x08005929
 8004610:	08005929 	.word	0x08005929
 8004614:	08004a21 	.word	0x08004a21
 8004618:	08005929 	.word	0x08005929
 800461c:	08005929 	.word	0x08005929
 8004620:	08005929 	.word	0x08005929
 8004624:	08005929 	.word	0x08005929
 8004628:	08005929 	.word	0x08005929
 800462c:	08005929 	.word	0x08005929
 8004630:	08005929 	.word	0x08005929
 8004634:	08005929 	.word	0x08005929
 8004638:	08005929 	.word	0x08005929
 800463c:	08005929 	.word	0x08005929
 8004640:	08005929 	.word	0x08005929
 8004644:	08005929 	.word	0x08005929
 8004648:	08005929 	.word	0x08005929
 800464c:	08005929 	.word	0x08005929
 8004650:	08005929 	.word	0x08005929
 8004654:	08004af7 	.word	0x08004af7
 8004658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800465c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004660:	430b      	orrs	r3, r1
 8004662:	f000 82b3 	beq.w	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8004666:	f001 b95f 	b.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800466a:	4b43      	ldr	r3, [pc, #268]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800466c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800467c:	f107 0320 	add.w	r3, r7, #32
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff f9cf 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800468a:	f001 b950 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	d108      	bne.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fb2f 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046a2:	f001 b944 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046aa:	f001 b940 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80046ae:	4b32      	ldr	r3, [pc, #200]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80046b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7fd ffc4 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 80046c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80046c6:	f001 b932 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80046ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d6:	d10a      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d107      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fb0a 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ec:	e05c      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80046ee:	4b22      	ldr	r3, [pc, #136]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046fa:	d10a      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d107      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004702:	f107 0308 	add.w	r3, r7, #8
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fc64 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004710:	e04a      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004712:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	2b03      	cmp	r3, #3
 8004722:	d109      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004724:	4b14      	ldr	r3, [pc, #80]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	4a13      	ldr	r2, [pc, #76]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
 8004736:	e037      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004738:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004744:	d11e      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	2b04      	cmp	r3, #4
 800474a:	d11b      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004750:	e02a      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8004752:	bf00      	nop
 8004754:	40000001 	.word	0x40000001
 8004758:	20000001 	.word	0x20000001
 800475c:	10000001 	.word	0x10000001
 8004760:	08000001 	.word	0x08000001
 8004764:	04000001 	.word	0x04000001
 8004768:	00400001 	.word	0x00400001
 800476c:	00200001 	.word	0x00200001
 8004770:	00040001 	.word	0x00040001
 8004774:	00020001 	.word	0x00020001
 8004778:	44020c00 	.word	0x44020c00
 800477c:	03d09000 	.word	0x03d09000
 8004780:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004784:	4ba3      	ldr	r3, [pc, #652]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d106      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	2b05      	cmp	r3, #5
 8004796:	d103      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8004798:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047a4:	f001 b8c3 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80047a8:	f001 b8c1 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80047ac:	4b99      	ldr	r3, [pc, #612]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80047be:	f7fd ff2f 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 80047c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80047c4:	f001 b8b3 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80047c8:	4b92      	ldr	r3, [pc, #584]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047d4:	d10a      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d107      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fa8b 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ea:	e03d      	b.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d108      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fbec 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004800:	f001 b895 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004804:	4b83      	ldr	r3, [pc, #524]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d10c      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	2b18      	cmp	r3, #24
 8004814:	d109      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004816:	4b7f      	ldr	r3, [pc, #508]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	4a7d      	ldr	r2, [pc, #500]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
 8004828:	e01e      	b.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800482a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004836:	d105      	bne.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	2b20      	cmp	r3, #32
 800483c:	d102      	bne.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800483e:	4b77      	ldr	r3, [pc, #476]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
 8004842:	e011      	b.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004844:	4b73      	ldr	r3, [pc, #460]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d106      	bne.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004854:	2b28      	cmp	r3, #40	@ 0x28
 8004856:	d103      	bne.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8004858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800485c:	637b      	str	r3, [r7, #52]	@ 0x34
 800485e:	e003      	b.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004864:	f001 b863 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004868:	f001 b861 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800486c:	4b69      	ldr	r3, [pc, #420]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800486e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004872:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004876:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	2b00      	cmp	r3, #0
 800487c:	d104      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800487e:	f7fd fecf 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004882:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004884:	f001 b853 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004888:	4b62      	ldr	r3, [pc, #392]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004894:	d10a      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d107      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fa2b 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048aa:	e045      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80048ac:	4b59      	ldr	r3, [pc, #356]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048b8:	d10a      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	2b80      	cmp	r3, #128	@ 0x80
 80048be:	d107      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fb85 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ce:	e033      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80048d0:	4b50      	ldr	r3, [pc, #320]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d10c      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	2bc0      	cmp	r3, #192	@ 0xc0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	08db      	lsrs	r3, r3, #3
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f4:	e020      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80048f6:	4b47      	ldr	r3, [pc, #284]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004902:	d106      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800490a:	d102      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 800490c:	4b43      	ldr	r3, [pc, #268]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004910:	e012      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004912:	4b40      	ldr	r3, [pc, #256]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d107      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004926:	d103      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8004928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492c:	637b      	str	r3, [r7, #52]	@ 0x34
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004934:	f000 bffb 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004938:	f000 bff9 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800493c:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800493e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004942:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800494e:	f7fd fe67 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004952:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004954:	f000 bfeb 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8004958:	4b2e      	ldr	r3, [pc, #184]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004964:	d10b      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800496c:	d107      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800496e:	f107 0314 	add.w	r3, r7, #20
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff f9c2 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
 800497c:	e047      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800497e:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800498a:	d10b      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004992:	d107      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004994:	f107 0308 	add.w	r3, r7, #8
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fb1b 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a2:	e034      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80049a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d10d      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049b6:	d109      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049b8:	4b16      	ldr	r3, [pc, #88]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	08db      	lsrs	r3, r3, #3
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	4a15      	ldr	r2, [pc, #84]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
 80049c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ca:	e020      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80049cc:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d8:	d106      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e0:	d102      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80049e2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80049e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e6:	e012      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d107      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80049fc:	d103      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a04:	e003      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a0a:	f000 bf90 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a0e:	f000 bf8e 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a12:	bf00      	nop
 8004a14:	44020c00 	.word	0x44020c00
 8004a18:	03d09000 	.word	0x03d09000
 8004a1c:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a20:	4ba5      	ldr	r3, [pc, #660]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a26:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004a2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d104      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a32:	f7fd fdf5 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004a36:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a38:	f000 bf79 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8004a3c:	4b9e      	ldr	r3, [pc, #632]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a48:	d10b      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a50:	d107      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a52:	f107 0314 	add.w	r3, r7, #20
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff f950 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a60:	e047      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8004a62:	4b95      	ldr	r3, [pc, #596]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a6e:	d10b      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a76:	d107      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a78:	f107 0308 	add.w	r3, r7, #8
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff faa9 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a86:	e034      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004a88:	4b8b      	ldr	r3, [pc, #556]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d10d      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8004a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a9a:	d109      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a9c:	4b86      	ldr	r3, [pc, #536]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	08db      	lsrs	r3, r3, #3
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	4a85      	ldr	r2, [pc, #532]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aae:	e020      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8004ab0:	4b81      	ldr	r3, [pc, #516]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abc:	d106      	bne.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac4:	d102      	bne.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8004ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aca:	e012      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004acc:	4b7a      	ldr	r3, [pc, #488]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d107      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ae0:	d103      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aee:	f000 bf1e 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004af2:	f000 bf1c 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004af6:	4b70      	ldr	r3, [pc, #448]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004afc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8004b00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fd fd8a 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b0e:	f000 bf0e 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8004b12:	4b69      	ldr	r3, [pc, #420]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b1e:	d10b      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b26:	d107      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f8e5 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b36:	e047      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8004b38:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b44:	d10b      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fa3e 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	e034      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004b5e:	4b56      	ldr	r3, [pc, #344]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d10d      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004b70:	d109      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b72:	4b51      	ldr	r3, [pc, #324]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	08db      	lsrs	r3, r3, #3
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	4a4f      	ldr	r2, [pc, #316]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b84:	e020      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8004b86:	4b4c      	ldr	r3, [pc, #304]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b92:	d106      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b9a:	d102      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8004b9c:	4b48      	ldr	r3, [pc, #288]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba0:	e012      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004ba2:	4b45      	ldr	r3, [pc, #276]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004bb6:	d103      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8004bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bc4:	f000 beb3 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004bc8:	f000 beb1 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004bd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004bde:	f7fd fd4b 	bl	8002678 <HAL_RCC_GetPCLK3Freq>
 8004be2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004be4:	f000 bea3 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bee:	d108      	bne.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff f881 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bfe:	f000 be96 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c08:	d108      	bne.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff f9e0 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c18:	f000 be89 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004c1c:	4b26      	ldr	r3, [pc, #152]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d10d      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c2e:	d109      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c30:	4b21      	ldr	r3, [pc, #132]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c42:	e020      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004c44:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c50:	d106      	bne.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c58:	d102      	bne.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8004c5a:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5e:	e012      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004c60:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c74:	d103      	bne.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7c:	e003      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c82:	f000 be54 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004c86:	f000 be52 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004c9c:	f7fd fca4 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8004ca0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004ca2:	f000 be44 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10b      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cac:	f7fd fb70 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8004cb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004cb2:	f000 be3c 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004cb6:	bf00      	nop
 8004cb8:	44020c00 	.word	0x44020c00
 8004cbc:	03d09000 	.word	0x03d09000
 8004cc0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d108      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff f814 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cd8:	f000 be29 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004cdc:	4b9f      	ldr	r3, [pc, #636]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d102      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8004cf0:	4b9b      	ldr	r3, [pc, #620]	@ (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8004cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf4:	e023      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004cf6:	4b99      	ldr	r3, [pc, #612]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d109      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d08:	4b94      	ldr	r3, [pc, #592]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	4a94      	ldr	r2, [pc, #592]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d1a:	e010      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d28:	d105      	bne.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	2b05      	cmp	r3, #5
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8004d30:	4b8d      	ldr	r3, [pc, #564]	@ (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d34:	e003      	b.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d3a:	f000 bdf8 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004d3e:	f000 bdf6 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004d42:	4b86      	ldr	r3, [pc, #536]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004d4e:	4b83      	ldr	r3, [pc, #524]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8004d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d68:	e012      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d78:	d106      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d103      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8004d80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d86:	e003      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004d8c:	f000 bdcf 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004d90:	f000 bdcd 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004d94:	4b71      	ldr	r3, [pc, #452]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004d96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004da6:	f7fd fc3b 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004daa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004dac:	f000 bdbf 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db6:	d108      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db8:	f107 0308 	add.w	r3, r7, #8
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff f909 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dc6:	f000 bdb2 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004dca:	4b64      	ldr	r3, [pc, #400]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d10d      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dde:	4b5f      	ldr	r3, [pc, #380]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	08db      	lsrs	r3, r3, #3
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	4a5e      	ldr	r2, [pc, #376]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df0:	e011      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004df2:	4b5a      	ldr	r3, [pc, #360]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e06:	d102      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8004e08:	4b57      	ldr	r3, [pc, #348]	@ (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e12:	f000 bd8c 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e16:	f000 bd8a 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004e1a:	4b50      	ldr	r3, [pc, #320]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e20:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004e24:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fd fbf8 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004e30:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004e32:	f000 bd7c 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e3c:	d108      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff f8c6 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e4c:	f000 bd6f 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004e50:	4b42      	ldr	r3, [pc, #264]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d10d      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e62:	d109      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e64:	4b3d      	ldr	r3, [pc, #244]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	08db      	lsrs	r3, r3, #3
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e76:	e011      	b.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004e78:	4b38      	ldr	r3, [pc, #224]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e84:	d106      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e8c:	d102      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8004e8e:	4b36      	ldr	r3, [pc, #216]	@ (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e92:	e003      	b.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e98:	f000 bd49 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e9c:	f000 bd47 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ea2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ea6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004eaa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004eb2:	f7fd fbe1 	bl	8002678 <HAL_RCC_GetPCLK3Freq>
 8004eb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004eb8:	f000 bd39 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec2:	d108      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec4:	f107 0308 	add.w	r3, r7, #8
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff f883 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ed2:	f000 bd2c 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8004ed6:	4b21      	ldr	r3, [pc, #132]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d10d      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee8:	d109      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eea:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	08db      	lsrs	r3, r3, #3
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efc:	e011      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8004efe:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f12:	d102      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8004f14:	4b14      	ldr	r3, [pc, #80]	@ (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f18:	e003      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f1e:	f000 bd06 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f22:	f000 bd04 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004f26:	4b0d      	ldr	r3, [pc, #52]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f2c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004f30:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f38:	f7fd fb72 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004f3c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f3e:	f000 bcf6 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f48:	d110      	bne.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f4a:	f107 0308 	add.w	r3, r7, #8
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff f840 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f58:	f000 bce9 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f5c:	44020c00 	.word	0x44020c00
 8004f60:	017d7840 	.word	0x017d7840
 8004f64:	03d09000 	.word	0x03d09000
 8004f68:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004f6c:	4ba4      	ldr	r3, [pc, #656]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d10e      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f7e:	d10a      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f80:	4b9f      	ldr	r3, [pc, #636]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	4a9e      	ldr	r2, [pc, #632]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f92:	f000 bccc 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f9a:	f000 bcc8 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004f9e:	4b98      	ldr	r3, [pc, #608]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fa4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004fa8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004fb0:	f7fd fb62 	bl	8002678 <HAL_RCC_GetPCLK3Freq>
 8004fb4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004fb6:	f000 bcba 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fc0:	d108      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff f804 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fd0:	f000 bcad 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004fd4:	4b8a      	ldr	r3, [pc, #552]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d10e      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe6:	d10a      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fe8:	4b85      	ldr	r3, [pc, #532]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	4a84      	ldr	r2, [pc, #528]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ffa:	f000 bc98 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005002:	f000 bc94 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005006:	4b7e      	ldr	r3, [pc, #504]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005008:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800500c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005010:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005018:	d056      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005020:	f200 808b 	bhi.w	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502a:	d03e      	beq.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	f200 8082 	bhi.w	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800503c:	d027      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005044:	d879      	bhi.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800504c:	d017      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005054:	d871      	bhi.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005062:	d004      	beq.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8005064:	e069      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005066:	f7fd fb07 	bl	8002678 <HAL_RCC_GetPCLK3Freq>
 800506a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800506c:	e068      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fe42 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800507c:	e060      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe ffa6 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800508c:	e058      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800508e:	4b5c      	ldr	r3, [pc, #368]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d103      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 800509c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80050a2:	e04d      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050a8:	e04a      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80050aa:	4b55      	ldr	r3, [pc, #340]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050b8:	d103      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80050ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80050c0:	e03e      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050c6:	e03b      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d10c      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80050e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050e6:	4b46      	ldr	r3, [pc, #280]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	4a44      	ldr	r2, [pc, #272]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f8:	e01e      	b.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050fa:	4b41      	ldr	r3, [pc, #260]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005106:	d106      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d102      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005110:	4b3d      	ldr	r3, [pc, #244]	@ (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8005112:	637b      	str	r3, [r7, #52]	@ 0x34
 8005114:	e010      	b.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005116:	4b3a      	ldr	r3, [pc, #232]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005122:	d106      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512a:	d102      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800512c:	4b37      	ldr	r3, [pc, #220]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800512e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005130:	e002      	b.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005136:	e003      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8005138:	e002      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800513e:	bf00      	nop
          }
        }
        break;
 8005140:	e3f5      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005142:	4b2f      	ldr	r3, [pc, #188]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005144:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005148:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800514c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005154:	d05f      	beq.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800515c:	f200 8094 	bhi.w	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005166:	d03f      	beq.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800516e:	f200 808b 	bhi.w	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005178:	d028      	beq.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005180:	f200 8082 	bhi.w	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800518a:	d017      	beq.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005192:	d879      	bhi.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a0:	d004      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80051a2:	e071      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fd fa3c 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 80051a8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80051aa:	e070      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ac:	f107 0314 	add.w	r3, r7, #20
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fda3 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051ba:	e068      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051bc:	f107 0308 	add.w	r3, r7, #8
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe ff07 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051ca:	e060      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80051ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d103      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80051da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80051e0:	e055      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051e6:	e052      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80051ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051f6:	d10b      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80051f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80051fe:	e046      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8005200:	44020c00 	.word	0x44020c00
 8005204:	03d09000 	.word	0x03d09000
 8005208:	003d0900 	.word	0x003d0900
 800520c:	017d7840 	.word	0x017d7840
              frequency = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005214:	e03b      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005216:	4bae      	ldr	r3, [pc, #696]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800521c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005222:	4bab      	ldr	r3, [pc, #684]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005234:	4ba6      	ldr	r3, [pc, #664]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	08db      	lsrs	r3, r3, #3
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	4aa5      	ldr	r2, [pc, #660]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
 8005246:	e01e      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005248:	4ba1      	ldr	r3, [pc, #644]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005254:	d106      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525c:	d102      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800525e:	4b9e      	ldr	r3, [pc, #632]	@ (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
 8005262:	e010      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005264:	4b9a      	ldr	r3, [pc, #616]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005270:	d106      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8005272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005274:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005278:	d102      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800527a:	4b98      	ldr	r3, [pc, #608]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800527c:	637b      	str	r3, [r7, #52]	@ 0x34
 800527e:	e002      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005284:	e003      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8005286:	e002      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800528c:	bf00      	nop
          }
        }
        break;
 800528e:	e34e      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005290:	4b8f      	ldr	r3, [pc, #572]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800529a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800529c:	4b8c      	ldr	r3, [pc, #560]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052a8:	d105      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80052b0:	4b8a      	ldr	r3, [pc, #552]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80052b4:	e33b      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052bc:	d107      	bne.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052be:	f107 0320 	add.w	r3, r7, #32
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fbae 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052cc:	e32f      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d4:	d107      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052d6:	f107 0314 	add.w	r3, r7, #20
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fd0e 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052e4:	e323      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ea:	e320      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80052ec:	4b78      	ldr	r3, [pc, #480]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80052ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d860      	bhi.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005319 	.word	0x08005319
 8005308:	08005329 	.word	0x08005329
 800530c:	08005339 	.word	0x08005339
 8005310:	08005349 	.word	0x08005349
 8005314:	0800534f 	.word	0x0800534f
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005318:	f107 0320 	add.w	r3, r7, #32
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe fb81 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005326:	e04e      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe fce5 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005336:	e046      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe fe49 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005346:	e03e      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005348:	4b65      	ldr	r3, [pc, #404]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800534a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800534c:	e03b      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800534e:	4b60      	ldr	r3, [pc, #384]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005354:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800535a:	4b5d      	ldr	r3, [pc, #372]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8005366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800536c:	4b58      	ldr	r3, [pc, #352]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	08db      	lsrs	r3, r3, #3
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	4a57      	ldr	r2, [pc, #348]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
 800537e:	e01e      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005380:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538c:	d106      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005394:	d102      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005396:	4b50      	ldr	r3, [pc, #320]	@ (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
 800539a:	e010      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800539c:	4b4c      	ldr	r3, [pc, #304]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80053aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b0:	d102      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80053b2:	4b4a      	ldr	r3, [pc, #296]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80053be:	e002      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80053c4:	bf00      	nop
          }
        }
        break;
 80053c6:	e2b2      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80053c8:	4b41      	ldr	r3, [pc, #260]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	f200 80a4 	bhi.w	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80053dc:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005469 	.word	0x08005469
 80053e8:	08005525 	.word	0x08005525
 80053ec:	08005525 	.word	0x08005525
 80053f0:	08005525 	.word	0x08005525
 80053f4:	08005525 	.word	0x08005525
 80053f8:	08005525 	.word	0x08005525
 80053fc:	08005525 	.word	0x08005525
 8005400:	08005525 	.word	0x08005525
 8005404:	08005479 	.word	0x08005479
 8005408:	08005525 	.word	0x08005525
 800540c:	08005525 	.word	0x08005525
 8005410:	08005525 	.word	0x08005525
 8005414:	08005525 	.word	0x08005525
 8005418:	08005525 	.word	0x08005525
 800541c:	08005525 	.word	0x08005525
 8005420:	08005525 	.word	0x08005525
 8005424:	08005489 	.word	0x08005489
 8005428:	08005525 	.word	0x08005525
 800542c:	08005525 	.word	0x08005525
 8005430:	08005525 	.word	0x08005525
 8005434:	08005525 	.word	0x08005525
 8005438:	08005525 	.word	0x08005525
 800543c:	08005525 	.word	0x08005525
 8005440:	08005525 	.word	0x08005525
 8005444:	08005499 	.word	0x08005499
 8005448:	08005525 	.word	0x08005525
 800544c:	08005525 	.word	0x08005525
 8005450:	08005525 	.word	0x08005525
 8005454:	08005525 	.word	0x08005525
 8005458:	08005525 	.word	0x08005525
 800545c:	08005525 	.word	0x08005525
 8005460:	08005525 	.word	0x08005525
 8005464:	0800549f 	.word	0x0800549f
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005468:	f107 0320 	add.w	r3, r7, #32
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fad9 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005476:	e058      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005478:	f107 0314 	add.w	r3, r7, #20
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe fc3d 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005486:	e050      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fda1 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005496:	e048      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005498:	4b11      	ldr	r3, [pc, #68]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800549c:	e045      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800549e:	4b0c      	ldr	r3, [pc, #48]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80054a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054aa:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d116      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80054b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d113      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054bc:	4b04      	ldr	r3, [pc, #16]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	08db      	lsrs	r3, r3, #3
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	4a03      	ldr	r2, [pc, #12]	@ (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
 80054cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ce:	e028      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80054d0:	44020c00 	.word	0x44020c00
 80054d4:	03d09000 	.word	0x03d09000
 80054d8:	003d0900 	.word	0x003d0900
 80054dc:	017d7840 	.word	0x017d7840
 80054e0:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054e4:	4b95      	ldr	r3, [pc, #596]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f0:	d106      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80054f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f8:	d102      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80054fa:	4b91      	ldr	r3, [pc, #580]	@ (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fe:	e010      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005500:	4b8e      	ldr	r3, [pc, #568]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800550c:	d106      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005514:	d102      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005516:	4b8b      	ldr	r3, [pc, #556]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005518:	637b      	str	r3, [r7, #52]	@ 0x34
 800551a:	e002      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005520:	e003      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8005522:	e002      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005528:	bf00      	nop
          }
        }
        break;
 800552a:	e200      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800552c:	4b83      	ldr	r3, [pc, #524]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800552e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005532:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005536:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800553e:	d031      	beq.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005546:	d866      	bhi.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	2bc0      	cmp	r3, #192	@ 0xc0
 800554c:	d027      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	2bc0      	cmp	r3, #192	@ 0xc0
 8005552:	d860      	bhi.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	2b80      	cmp	r3, #128	@ 0x80
 8005558:	d019      	beq.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	2b80      	cmp	r3, #128	@ 0x80
 800555e:	d85a      	bhi.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	d008      	beq.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 800556c:	e053      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800556e:	f107 0320 	add.w	r3, r7, #32
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fa56 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800557c:	e04e      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800557e:	f107 0314 	add.w	r3, r7, #20
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fbba 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800558c:	e046      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fd1e 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800559c:	e03e      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800559e:	4b6a      	ldr	r3, [pc, #424]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055a2:	e03b      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055a4:	4b65      	ldr	r3, [pc, #404]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80055ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055b0:	4b62      	ldr	r3, [pc, #392]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d10c      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055c2:	4b5e      	ldr	r3, [pc, #376]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	08db      	lsrs	r3, r3, #3
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	4a5f      	ldr	r2, [pc, #380]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80055ce:	fa22 f303 	lsr.w	r3, r2, r3
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d4:	e01e      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055d6:	4b59      	ldr	r3, [pc, #356]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e2:	d106      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80055e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ea:	d102      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80055ec:	4b54      	ldr	r3, [pc, #336]	@ (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f0:	e010      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055f2:	4b52      	ldr	r3, [pc, #328]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055fe:	d106      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005606:	d102      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005608:	4b4e      	ldr	r3, [pc, #312]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
 800560c:	e002      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005612:	e003      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8005614:	e002      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800561a:	bf00      	nop
          }
        }
        break;
 800561c:	e187      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800561e:	4b47      	ldr	r3, [pc, #284]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005624:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005628:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	2b00      	cmp	r3, #0
 800562e:	d103      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fd f80c 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 8005634:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005636:	e17a      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8005638:	4b40      	ldr	r3, [pc, #256]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005644:	d10b      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564c:	d107      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fb52 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	637b      	str	r3, [r7, #52]	@ 0x34
 800565c:	e045      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800565e:	4b37      	ldr	r3, [pc, #220]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800566a:	d10b      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005672:	d107      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fcab 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
 8005682:	e032      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8005684:	4b2d      	ldr	r3, [pc, #180]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d10d      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005696:	d109      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005698:	4b28      	ldr	r3, [pc, #160]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056aa:	e01e      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80056ac:	4b23      	ldr	r3, [pc, #140]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b8:	d106      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056c0:	d102      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80056c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c6:	e010      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80056c8:	4b1c      	ldr	r3, [pc, #112]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056d4:	d106      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80056dc:	d102      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80056de:	4b19      	ldr	r3, [pc, #100]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e2:	e002      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056e8:	e121      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80056ea:	e120      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80056ec:	4b13      	ldr	r3, [pc, #76]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80056ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80056f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d861      	bhi.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80056fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	08005715 	.word	0x08005715
 8005708:	0800571d 	.word	0x0800571d
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005751 	.word	0x08005751
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005714:	f7fc ff68 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8005718:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800571a:	e055      	b.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800571c:	f107 0320 	add.w	r3, r7, #32
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe f97f 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800572a:	e04d      	b.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe fae3 	bl	8003cfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800573a:	e045      	b.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800573c:	44020c00 	.word	0x44020c00
 8005740:	003d0900 	.word	0x003d0900
 8005744:	017d7840 	.word	0x017d7840
 8005748:	00bb8000 	.word	0x00bb8000
 800574c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005750:	4b79      	ldr	r3, [pc, #484]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005756:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800575a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800575c:	4b76      	ldr	r3, [pc, #472]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b02      	cmp	r3, #2
 8005766:	d10c      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800576e:	4b72      	ldr	r3, [pc, #456]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	08db      	lsrs	r3, r3, #3
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	4a70      	ldr	r2, [pc, #448]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800577a:	fa22 f303 	lsr.w	r3, r2, r3
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005780:	e01e      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005782:	4b6d      	ldr	r3, [pc, #436]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800578a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800578e:	d106      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005796:	d102      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005798:	4b69      	ldr	r3, [pc, #420]	@ (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
 800579c:	e010      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800579e:	4b66      	ldr	r3, [pc, #408]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057aa:	d106      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80057ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057b2:	d102      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80057b4:	4b63      	ldr	r3, [pc, #396]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b8:	e002      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80057be:	e003      	b.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80057c0:	e002      	b.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057c6:	bf00      	nop
          }
        }
        break;
 80057c8:	e0b1      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80057ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80057d6:	4b58      	ldr	r3, [pc, #352]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d106      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80057ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f0:	e01f      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80057f2:	4b51      	ldr	r3, [pc, #324]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80057f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005800:	d106      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	2b40      	cmp	r3, #64	@ 0x40
 8005806:	d103      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8005808:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800580c:	637b      	str	r3, [r7, #52]	@ 0x34
 800580e:	e010      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005810:	4b49      	ldr	r3, [pc, #292]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800581c:	d106      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	2b80      	cmp	r3, #128	@ 0x80
 8005822:	d103      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8005824:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
 800582a:	e002      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005830:	e07d      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005832:	e07c      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005834:	4b40      	ldr	r3, [pc, #256]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800583a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800583e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005840:	4b3d      	ldr	r3, [pc, #244]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800584c:	d105      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8005854:	4b3c      	ldr	r3, [pc, #240]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34
 8005858:	e031      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800585a:	4b37      	ldr	r3, [pc, #220]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005866:	d10a      	bne.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8005868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586a:	2b10      	cmp	r3, #16
 800586c:	d107      	bne.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800586e:	f107 0320 	add.w	r3, r7, #32
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe f8d6 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	637b      	str	r3, [r7, #52]	@ 0x34
 800587c:	e01f      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800587e:	4b2e      	ldr	r3, [pc, #184]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d106      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	2b20      	cmp	r3, #32
 8005890:	d103      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
 8005898:	e011      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800589a:	4b27      	ldr	r3, [pc, #156]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800589c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058a8:	d106      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	2b30      	cmp	r3, #48	@ 0x30
 80058ae:	d103      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 80058b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80058b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b6:	e002      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80058bc:	e037      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80058be:	e036      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80058c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d107      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058d2:	f107 0320 	add.w	r3, r7, #32
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe f8a4 	bl	8003a24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80058e0:	e025      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80058e2:	4b15      	ldr	r3, [pc, #84]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ee:	d10a      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d107      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fb6a 	bl	8003fd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
 8005904:	e00f      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005906:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800590e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005912:	d105      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	2b30      	cmp	r3, #48	@ 0x30
 8005918:	d102      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800591a:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
 800591e:	e002      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005924:	e003      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005926:	e002      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800592c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005930:	4618      	mov	r0, r3
 8005932:	373c      	adds	r7, #60	@ 0x3c
 8005934:	46bd      	mov	sp, r7
 8005936:	bd90      	pop	{r4, r7, pc}
 8005938:	44020c00 	.word	0x44020c00
 800593c:	03d09000 	.word	0x03d09000
 8005940:	003d0900 	.word	0x003d0900
 8005944:	017d7840 	.word	0x017d7840
 8005948:	02dc6c00 	.word	0x02dc6c00

0800594c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005954:	4b48      	ldr	r3, [pc, #288]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a47      	ldr	r2, [pc, #284]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 800595a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800595e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005960:	f7fb fc34 	bl	80011cc <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005966:	e008      	b.n	800597a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005968:	f7fb fc30 	bl	80011cc <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e07a      	b.n	8005a70 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800597a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005986:	4b3c      	ldr	r3, [pc, #240]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6811      	ldr	r1, [r2, #0]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6852      	ldr	r2, [r2, #4]
 800599a:	0212      	lsls	r2, r2, #8
 800599c:	430a      	orrs	r2, r1
 800599e:	4936      	ldr	r1, [pc, #216]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	025b      	lsls	r3, r3, #9
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	3b01      	subs	r3, #1
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	061b      	lsls	r3, r3, #24
 80059d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059d4:	4928      	ldr	r1, [pc, #160]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80059da:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	f023 020c 	bic.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4924      	ldr	r1, [pc, #144]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80059ec:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	f023 0220 	bic.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	491f      	ldr	r1, [pc, #124]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80059fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	491c      	ldr	r1, [pc, #112]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005a18:	4b17      	ldr	r3, [pc, #92]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a20:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6a12      	ldr	r2, [r2, #32]
 8005a28:	00d2      	lsls	r2, r2, #3
 8005a2a:	4913      	ldr	r1, [pc, #76]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005a30:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	4a10      	ldr	r2, [pc, #64]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a36:	f043 0310 	orr.w	r3, r3, #16
 8005a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a0d      	ldr	r2, [pc, #52]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a48:	f7fb fbc0 	bl	80011cc <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a4e:	e008      	b.n	8005a62 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a50:	f7fb fbbc 	bl	80011cc <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e006      	b.n	8005a70 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a62:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <RCCEx_PLL2_Config+0x12c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0

}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	44020c00 	.word	0x44020c00

08005a7c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005a84:	4b48      	ldr	r3, [pc, #288]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a47      	ldr	r2, [pc, #284]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a90:	f7fb fb9c 	bl	80011cc <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a96:	e008      	b.n	8005aaa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a98:	f7fb fb98 	bl	80011cc <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e07a      	b.n	8005ba0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6852      	ldr	r2, [r2, #4]
 8005aca:	0212      	lsls	r2, r2, #8
 8005acc:	430a      	orrs	r2, r1
 8005ace:	4936      	ldr	r1, [pc, #216]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	630b      	str	r3, [r1, #48]	@ 0x30
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	025b      	lsls	r3, r3, #9
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	061b      	lsls	r3, r3, #24
 8005b00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b04:	4928      	ldr	r1, [pc, #160]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b0a:	4b27      	ldr	r3, [pc, #156]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	f023 020c 	bic.w	r2, r3, #12
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	4924      	ldr	r1, [pc, #144]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005b1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	f023 0220 	bic.w	r2, r3, #32
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	491f      	ldr	r1, [pc, #124]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	491c      	ldr	r1, [pc, #112]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	4a19      	ldr	r2, [pc, #100]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b42:	f023 0310 	bic.w	r3, r3, #16
 8005b46:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005b48:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b50:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6a12      	ldr	r2, [r2, #32]
 8005b58:	00d2      	lsls	r2, r2, #3
 8005b5a:	4913      	ldr	r1, [pc, #76]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005b60:	4b11      	ldr	r3, [pc, #68]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b64:	4a10      	ldr	r2, [pc, #64]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b66:	f043 0310 	orr.w	r3, r3, #16
 8005b6a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b78:	f7fb fb28 	bl	80011cc <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b7e:	e008      	b.n	8005b92 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b80:	f7fb fb24 	bl	80011cc <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e006      	b.n	8005ba0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b92:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <RCCEx_PLL3_Config+0x12c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	44020c00 	.word	0x44020c00

08005bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e042      	b.n	8005c44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fb f8d5 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa74 	bl	80060e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8c3 	bl	8005d88 <UART_SetConfig>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e01b      	b.n	8005c44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 faf3 	bl	8006228 <UART_CheckIdleState>
 8005c42:	4603      	mov	r3, r0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	@ 0x28
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	f040 808b 	bne.w	8005d7e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_UART_Transmit+0x28>
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e083      	b.n	8005d80 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c82:	2b80      	cmp	r3, #128	@ 0x80
 8005c84:	d107      	bne.n	8005c96 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c94:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2221      	movs	r2, #33	@ 0x21
 8005ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ca6:	f7fb fa91 	bl	80011cc <HAL_GetTick>
 8005caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	88fa      	ldrh	r2, [r7, #6]
 8005cb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc4:	d108      	bne.n	8005cd8 <HAL_UART_Transmit+0x8c>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e003      	b.n	8005ce0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ce0:	e030      	b.n	8005d44 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2180      	movs	r1, #128	@ 0x80
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fb45 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e03d      	b.n	8005d80 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	e007      	b.n	8005d32 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1c8      	bne.n	8005ce2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2200      	movs	r2, #0
 8005d58:	2140      	movs	r1, #64	@ 0x40
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fb0e 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e006      	b.n	8005d80 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e000      	b.n	8005d80 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
  }
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d8c:	b094      	sub	sp, #80	@ 0x50
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b83      	ldr	r3, [pc, #524]	@ (8005fac <UART_SetConfig+0x224>)
 8005d9e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	497c      	ldr	r1, [pc, #496]	@ (8005fb0 <UART_SetConfig+0x228>)
 8005dc0:	4019      	ands	r1, r3
 8005dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd8:	68d9      	ldr	r1, [r3, #12]
 8005dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	ea40 0301 	orr.w	r3, r0, r1
 8005de2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b6f      	ldr	r3, [pc, #444]	@ (8005fac <UART_SetConfig+0x224>)
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d009      	beq.n	8005e08 <UART_SetConfig+0x80>
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b6e      	ldr	r3, [pc, #440]	@ (8005fb4 <UART_SetConfig+0x22c>)
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d004      	beq.n	8005e08 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e04:	4313      	orrs	r3, r2
 8005e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005e12:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	f023 000f 	bic.w	r0, r3, #15
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	ea40 0301 	orr.w	r3, r0, r1
 8005e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fb8 <UART_SetConfig+0x230>)
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d102      	bne.n	8005e48 <UART_SetConfig+0xc0>
 8005e42:	2301      	movs	r3, #1
 8005e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e46:	e032      	b.n	8005eae <UART_SetConfig+0x126>
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b5b      	ldr	r3, [pc, #364]	@ (8005fbc <UART_SetConfig+0x234>)
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d102      	bne.n	8005e58 <UART_SetConfig+0xd0>
 8005e52:	2302      	movs	r3, #2
 8005e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e56:	e02a      	b.n	8005eae <UART_SetConfig+0x126>
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b58      	ldr	r3, [pc, #352]	@ (8005fc0 <UART_SetConfig+0x238>)
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d102      	bne.n	8005e68 <UART_SetConfig+0xe0>
 8005e62:	2304      	movs	r3, #4
 8005e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e66:	e022      	b.n	8005eae <UART_SetConfig+0x126>
 8005e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b55      	ldr	r3, [pc, #340]	@ (8005fc4 <UART_SetConfig+0x23c>)
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d102      	bne.n	8005e78 <UART_SetConfig+0xf0>
 8005e72:	2308      	movs	r3, #8
 8005e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e76:	e01a      	b.n	8005eae <UART_SetConfig+0x126>
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4b52      	ldr	r3, [pc, #328]	@ (8005fc8 <UART_SetConfig+0x240>)
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d102      	bne.n	8005e88 <UART_SetConfig+0x100>
 8005e82:	2310      	movs	r3, #16
 8005e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e86:	e012      	b.n	8005eae <UART_SetConfig+0x126>
 8005e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8005fcc <UART_SetConfig+0x244>)
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d102      	bne.n	8005e98 <UART_SetConfig+0x110>
 8005e92:	2320      	movs	r3, #32
 8005e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e96:	e00a      	b.n	8005eae <UART_SetConfig+0x126>
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4b43      	ldr	r3, [pc, #268]	@ (8005fac <UART_SetConfig+0x224>)
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d103      	bne.n	8005eaa <UART_SetConfig+0x122>
 8005ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea8:	e001      	b.n	8005eae <UART_SetConfig+0x126>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fac <UART_SetConfig+0x224>)
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d005      	beq.n	8005ec4 <UART_SetConfig+0x13c>
 8005eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8005fb4 <UART_SetConfig+0x22c>)
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	f040 8088 	bne.w	8005fd4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	623b      	str	r3, [r7, #32]
 8005eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ecc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005ed0:	f7fe f9ec 	bl	80042ac <HAL_RCCEx_GetPeriphCLKFreq>
 8005ed4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80eb 	beq.w	80060b4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8005fd0 <UART_SetConfig+0x248>)
 8005ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4413      	add	r3, r2
 8005efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d305      	bcc.n	8005f0e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d903      	bls.n	8005f16 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f14:	e048      	b.n	8005fa8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f18:	2200      	movs	r2, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	61fa      	str	r2, [r7, #28]
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	4a2b      	ldr	r2, [pc, #172]	@ (8005fd0 <UART_SetConfig+0x248>)
 8005f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	617a      	str	r2, [r7, #20]
 8005f30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f38:	f7fa f9b4 	bl	80002a4 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	020b      	lsls	r3, r1, #8
 8005f4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f52:	0202      	lsls	r2, r0, #8
 8005f54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f56:	6849      	ldr	r1, [r1, #4]
 8005f58:	0849      	lsrs	r1, r1, #1
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	4605      	mov	r5, r0
 8005f60:	eb12 0804 	adds.w	r8, r2, r4
 8005f64:	eb43 0905 	adc.w	r9, r3, r5
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	60fa      	str	r2, [r7, #12]
 8005f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f76:	4640      	mov	r0, r8
 8005f78:	4649      	mov	r1, r9
 8005f7a:	f7fa f993 	bl	80002a4 <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4613      	mov	r3, r2
 8005f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f8c:	d308      	bcc.n	8005fa0 <UART_SetConfig+0x218>
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f94:	d204      	bcs.n	8005fa0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8005f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	e003      	b.n	8005fa8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8005fa6:	e085      	b.n	80060b4 <UART_SetConfig+0x32c>
 8005fa8:	e084      	b.n	80060b4 <UART_SetConfig+0x32c>
 8005faa:	bf00      	nop
 8005fac:	44002400 	.word	0x44002400
 8005fb0:	cfff69f3 	.word	0xcfff69f3
 8005fb4:	54002400 	.word	0x54002400
 8005fb8:	40013800 	.word	0x40013800
 8005fbc:	40004400 	.word	0x40004400
 8005fc0:	40004800 	.word	0x40004800
 8005fc4:	40004c00 	.word	0x40004c00
 8005fc8:	40005000 	.word	0x40005000
 8005fcc:	40006400 	.word	0x40006400
 8005fd0:	08007250 	.word	0x08007250
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fdc:	d13c      	bne.n	8006058 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fea:	f7fe f95f 	bl	80042ac <HAL_RCCEx_GetPeriphCLKFreq>
 8005fee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d05e      	beq.n	80060b4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	4a39      	ldr	r2, [pc, #228]	@ (80060e0 <UART_SetConfig+0x358>)
 8005ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006000:	461a      	mov	r2, r3
 8006002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006004:	fbb3 f3f2 	udiv	r3, r3, r2
 8006008:	005a      	lsls	r2, r3, #1
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	441a      	add	r2, r3
 8006012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d916      	bls.n	8006050 <UART_SetConfig+0x2c8>
 8006022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006028:	d212      	bcs.n	8006050 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800602a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602c:	b29b      	uxth	r3, r3
 800602e:	f023 030f 	bic.w	r3, r3, #15
 8006032:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	b29a      	uxth	r2, r3
 8006040:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006042:	4313      	orrs	r3, r2
 8006044:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e031      	b.n	80060b4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006056:	e02d      	b.n	80060b4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800605a:	2200      	movs	r2, #0
 800605c:	469a      	mov	sl, r3
 800605e:	4693      	mov	fp, r2
 8006060:	4650      	mov	r0, sl
 8006062:	4659      	mov	r1, fp
 8006064:	f7fe f922 	bl	80042ac <HAL_RCCEx_GetPeriphCLKFreq>
 8006068:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800606a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d021      	beq.n	80060b4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	4a1a      	ldr	r2, [pc, #104]	@ (80060e0 <UART_SetConfig+0x358>)
 8006076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607a:	461a      	mov	r2, r3
 800607c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800607e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	441a      	add	r2, r3
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	2b0f      	cmp	r3, #15
 8006098:	d909      	bls.n	80060ae <UART_SetConfig+0x326>
 800609a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d205      	bcs.n	80060ae <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e002      	b.n	80060b4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	2201      	movs	r2, #1
 80060b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	2201      	movs	r2, #1
 80060c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c6:	2200      	movs	r2, #0
 80060c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	2200      	movs	r2, #0
 80060ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3750      	adds	r7, #80	@ 0x50
 80060d8:	46bd      	mov	sp, r7
 80060da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060de:	bf00      	nop
 80060e0:	08007250 	.word	0x08007250

080060e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01a      	beq.n	80061fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061e2:	d10a      	bne.n	80061fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b098      	sub	sp, #96	@ 0x60
 800622c:	af02      	add	r7, sp, #8
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006238:	f7fa ffc8 	bl	80011cc <HAL_GetTick>
 800623c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b08      	cmp	r3, #8
 800624a:	d12f      	bne.n	80062ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800624c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006254:	2200      	movs	r2, #0
 8006256:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f88e 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d022      	beq.n	80062ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800627a:	653b      	str	r3, [r7, #80]	@ 0x50
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006284:	647b      	str	r3, [r7, #68]	@ 0x44
 8006286:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800628a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e063      	b.n	8006374 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d149      	bne.n	800634e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c2:	2200      	movs	r2, #0
 80062c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f857 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d03c      	beq.n	800634e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	623b      	str	r3, [r7, #32]
   return(result);
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80062f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e6      	bne.n	80062d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	60fb      	str	r3, [r7, #12]
   return(result);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006326:	61fa      	str	r2, [r7, #28]
 8006328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	69b9      	ldr	r1, [r7, #24]
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	617b      	str	r3, [r7, #20]
   return(result);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e5      	bne.n	8006306 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e012      	b.n	8006374 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3758      	adds	r7, #88	@ 0x58
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638c:	e04f      	b.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d04b      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fa ff19 	bl	80011cc <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <UART_WaitOnFlagUntilTimeout+0x30>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e04e      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d037      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b80      	cmp	r3, #128	@ 0x80
 80063c2:	d034      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d031      	beq.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d110      	bne.n	80063fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2208      	movs	r2, #8
 80063de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f838 	bl	8006456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2208      	movs	r2, #8
 80063ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e029      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006408:	d111      	bne.n	800642e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f81e 	bl	8006456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e00f      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	429a      	cmp	r2, r3
 800644a:	d0a0      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006456:	b480      	push	{r7}
 8006458:	b095      	sub	sp, #84	@ 0x54
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800647c:	643b      	str	r3, [r7, #64]	@ 0x40
 800647e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800648a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e3      	bne.n	8006490 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d118      	bne.n	8006502 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f023 0310 	bic.w	r3, r3, #16
 80064e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	613b      	str	r3, [r7, #16]
   return(result);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e6      	bne.n	80064d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006516:	bf00      	nop
 8006518:	3754      	adds	r7, #84	@ 0x54
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_UARTEx_DisableFifoMode+0x16>
 8006534:	2302      	movs	r3, #2
 8006536:	e027      	b.n	8006588 <HAL_UARTEx_DisableFifoMode+0x66>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	@ 0x24
 8006544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006566:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e02d      	b.n	8006608 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2224      	movs	r2, #36	@ 0x24
 80065b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f84f 	bl	800668c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006624:	2302      	movs	r3, #2
 8006626:	e02d      	b.n	8006684 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2224      	movs	r2, #36	@ 0x24
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f811 	bl	800668c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006698:	2b00      	cmp	r3, #0
 800669a:	d108      	bne.n	80066ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066ac:	e031      	b.n	8006712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ae:	2308      	movs	r3, #8
 80066b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066b2:	2308      	movs	r3, #8
 80066b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	0e5b      	lsrs	r3, r3, #25
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	0f5b      	lsrs	r3, r3, #29
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	7b3a      	ldrb	r2, [r7, #12]
 80066da:	4911      	ldr	r1, [pc, #68]	@ (8006720 <UARTEx_SetNbDataToProcess+0x94>)
 80066dc:	5c8a      	ldrb	r2, [r1, r2]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066e2:	7b3a      	ldrb	r2, [r7, #12]
 80066e4:	490f      	ldr	r1, [pc, #60]	@ (8006724 <UARTEx_SetNbDataToProcess+0x98>)
 80066e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	7b7a      	ldrb	r2, [r7, #13]
 80066f8:	4909      	ldr	r1, [pc, #36]	@ (8006720 <UARTEx_SetNbDataToProcess+0x94>)
 80066fa:	5c8a      	ldrb	r2, [r1, r2]
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006700:	7b7a      	ldrb	r2, [r7, #13]
 8006702:	4908      	ldr	r1, [pc, #32]	@ (8006724 <UARTEx_SetNbDataToProcess+0x98>)
 8006704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006706:	fb93 f3f2 	sdiv	r3, r3, r2
 800670a:	b29a      	uxth	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	08007268 	.word	0x08007268
 8006724:	08007270 	.word	0x08007270

08006728 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af02      	add	r7, sp, #8
 800672e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006734:	f7fa fd4a 	bl	80011cc <HAL_GetTick>
 8006738:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
 8006744:	e0bc      	b.n	80068c0 <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a60      	ldr	r2, [pc, #384]	@ (80068cc <HAL_XSPI_Init+0x1a4>)
 800674c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 80b1 	bne.w	80068c0 <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fa fa42 	bl	8000be8 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006764:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f9e8 	bl	8006b3e <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	4b56      	ldr	r3, [pc, #344]	@ (80068d0 <HAL_XSPI_Init+0x1a8>)
 8006776:	4013      	ands	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	68d1      	ldr	r1, [r2, #12]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6912      	ldr	r2, [r2, #16]
 8006780:	0412      	lsls	r2, r2, #16
 8006782:	4311      	orrs	r1, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6952      	ldr	r2, [r2, #20]
 8006788:	3a01      	subs	r2, #1
 800678a:	0212      	lsls	r2, r2, #8
 800678c:	4311      	orrs	r1, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	69d2      	ldr	r2, [r2, #28]
 8006792:	4311      	orrs	r1, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	430b      	orrs	r3, r1
 800679a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a4a      	ldr	r2, [pc, #296]	@ (80068cc <HAL_XSPI_Init+0x1a4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <HAL_XSPI_Init+0x88>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4a      	ldr	r2, [pc, #296]	@ (80068d4 <HAL_XSPI_Init+0x1ac>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10a      	bne.n	80067c6 <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f023 0108 	bic.w	r1, r3, #8
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1a      	ldr	r2, [r3, #32]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	041a      	lsls	r2, r3, #16
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80067fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	3b01      	subs	r3, #1
 800680e:	021a      	lsls	r2, r3, #8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	2120      	movs	r1, #32
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f999 	bl	8006b5c <XSPI_WaitFlagStateUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d145      	bne.n	80068c0 <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006868:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d107      	bne.n	80068a8 <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0202 	orr.w	r2, r2, #2
 80068a6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068b0:	d103      	bne.n	80068ba <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80068b8:	e002      	b.n	80068c0 <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2202      	movs	r2, #2
 80068be:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	47001400 	.word	0x47001400
 80068d0:	f8e0c0fc 	.word	0xf8e0c0fc
 80068d4:	57001400 	.word	0x57001400

080068d8 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	@ 0x28
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80068e4:	f7fa fc72 	bl	80011cc <HAL_GetTick>
 80068e8:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068f4:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d104      	bne.n	8006906 <HAL_XSPI_Command+0x2e>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006904:	d115      	bne.n	8006932 <HAL_XSPI_Command+0x5a>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b14      	cmp	r3, #20
 800690a:	d107      	bne.n	800691c <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d00e      	beq.n	8006932 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8006918:	2b03      	cmp	r3, #3
 800691a:	d00a      	beq.n	8006932 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b24      	cmp	r3, #36	@ 0x24
 8006920:	d15e      	bne.n	80069e0 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8006926:	2b01      	cmp	r3, #1
 8006928:	d003      	beq.n	8006932 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800692e:	2b03      	cmp	r3, #3
 8006930:	d156      	bne.n	80069e0 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2200      	movs	r2, #0
 800693a:	2120      	movs	r1, #32
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f90d 	bl	8006b5c <XSPI_WaitFlagStateUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006946:	7ffb      	ldrb	r3, [r7, #31]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d146      	bne.n	80069da <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f937 	bl	8006bc8 <XSPI_ConfigCmd>
 800695a:	4603      	mov	r3, r0
 800695c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800695e:	7ffb      	ldrb	r3, [r7, #31]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d143      	bne.n	80069ec <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10e      	bne.n	800698a <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2200      	movs	r2, #0
 8006974:	2120      	movs	r1, #32
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f8f0 	bl	8006b5c <XSPI_WaitFlagStateUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2202      	movs	r2, #2
 8006986:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006988:	e030      	b.n	80069ec <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2204      	movs	r2, #4
 8006996:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006998:	e028      	b.n	80069ec <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d10b      	bne.n	80069ba <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a6:	2b24      	cmp	r3, #36	@ 0x24
 80069a8:	d103      	bne.n	80069b2 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2204      	movs	r2, #4
 80069ae:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80069b0:	e01c      	b.n	80069ec <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2214      	movs	r2, #20
 80069b6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80069b8:	e018      	b.n	80069ec <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d114      	bne.n	80069ec <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c6:	2b14      	cmp	r3, #20
 80069c8:	d103      	bne.n	80069d2 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2204      	movs	r2, #4
 80069ce:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80069d0:	e00c      	b.n	80069ec <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2224      	movs	r2, #36	@ 0x24
 80069d6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80069d8:	e008      	b.n	80069ec <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 80069da:	2302      	movs	r3, #2
 80069dc:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 80069de:	e005      	b.n	80069ec <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2210      	movs	r2, #16
 80069e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80069ea:	e000      	b.n	80069ee <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 80069ec:	bf00      	nop
  }

  return status;
 80069ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	@ 0x30
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a04:	f7fa fbe2 	bl	80011cc <HAL_GetTick>
 8006a08:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3350      	adds	r3, #80	@ 0x50
 8006a10:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a18:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006a22:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2208      	movs	r2, #8
 8006a34:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a36:	e07c      	b.n	8006b32 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d172      	bne.n	8006b26 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006a6c:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a76:	d104      	bne.n	8006a82 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	649a      	str	r2, [r3, #72]	@ 0x48
 8006a80:	e011      	b.n	8006aa6 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006a8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	649a      	str	r2, [r3, #72]	@ 0x48
 8006a9a:	e004      	b.n	8006aa6 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2201      	movs	r2, #1
 8006aae:	2106      	movs	r1, #6
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f853 	bl	8006b5c <XSPI_WaitFlagStateUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8006abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d114      	bne.n	8006aee <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ade:	1e5a      	subs	r2, r3, #1
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1dc      	bne.n	8006aa6 <HAL_XSPI_Receive+0xae>
 8006aec:	e000      	b.n	8006af0 <HAL_XSPI_Receive+0xf8>
          break;
 8006aee:	bf00      	nop

      if (status == HAL_OK)
 8006af0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11c      	bne.n	8006b32 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	2201      	movs	r2, #1
 8006b00:	2102      	movs	r1, #2
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f82a 	bl	8006b5c <XSPI_WaitFlagStateUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8006b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10d      	bne.n	8006b32 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2202      	movs	r2, #2
 8006b22:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b24:	e005      	b.n	8006b32 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8006b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3728      	adds	r7, #40	@ 0x28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006b6c:	e019      	b.n	8006ba2 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d015      	beq.n	8006ba2 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fa fb29 	bl	80011cc <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <XSPI_WaitFlagStateUntilTimeout+0x30>
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b96:	f043 0201 	orr.w	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e00e      	b.n	8006bc0 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d1d7      	bne.n	8006b6e <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	@ 0x24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006be4:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d114      	bne.n	8006c36 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006c14:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006c1e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006c28:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e02c      	b.n	8006c90 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d114      	bne.n	8006c68 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006c46:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006c50:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c5a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e013      	b.n	8006c90 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006c70:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006c7a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006c84:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d105      	bne.n	8006cb2 <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d012      	beq.n	8006ce0 <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd2:	4319      	orrs	r1, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f023 021f 	bic.w	r2, r3, #31
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cec:	431a      	orrs	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3a01      	subs	r2, #1
 8006d0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01e      	beq.n	8006d54 <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d1e:	d10a      	bne.n	8006d36 <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8006d30:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006d34:	e00e      	b.n	8006d54 <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	d109      	bne.n	8006d54 <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006d50:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8099 	beq.w	8006e90 <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d055      	beq.n	8006e12 <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01e      	beq.n	8006dac <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b68      	ldr	r3, [pc, #416]	@ (8006f14 <XSPI_ConfigCmd+0x34c>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	68d1      	ldr	r1, [r2, #12]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	6952      	ldr	r2, [r2, #20]
 8006d7e:	4311      	orrs	r1, r2
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	6912      	ldr	r2, [r2, #16]
 8006d84:	4311      	orrs	r1, r2
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	69d2      	ldr	r2, [r2, #28]
 8006d8a:	4311      	orrs	r1, r2
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d90:	4311      	orrs	r1, r2
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	6a12      	ldr	r2, [r2, #32]
 8006d96:	4311      	orrs	r1, r2
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d9c:	4311      	orrs	r1, r2
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006da2:	430a      	orrs	r2, r1
 8006da4:	431a      	orrs	r2, r3
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e028      	b.n	8006dfe <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006db4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	68d1      	ldr	r1, [r2, #12]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	6952      	ldr	r2, [r2, #20]
 8006dc0:	4311      	orrs	r1, r2
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	6912      	ldr	r2, [r2, #16]
 8006dc6:	4311      	orrs	r1, r2
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	69d2      	ldr	r2, [r2, #28]
 8006dcc:	4311      	orrs	r1, r2
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dd2:	4311      	orrs	r1, r2
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	6a12      	ldr	r2, [r2, #32]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de8:	d109      	bne.n	8006dfe <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d105      	bne.n	8006dfe <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	6992      	ldr	r2, [r2, #24]
 8006e0e:	649a      	str	r2, [r3, #72]	@ 0x48
 8006e10:	e078      	b.n	8006f04 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d017      	beq.n	8006e4a <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006e22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68d1      	ldr	r1, [r2, #12]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	6952      	ldr	r2, [r2, #20]
 8006e2e:	4311      	orrs	r1, r2
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	6912      	ldr	r2, [r2, #16]
 8006e34:	4311      	orrs	r1, r2
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e3a:	4311      	orrs	r1, r2
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006e40:	430a      	orrs	r2, r1
 8006e42:	431a      	orrs	r2, r3
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	e01d      	b.n	8006e86 <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68d9      	ldr	r1, [r3, #12]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	4319      	orrs	r1, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	430b      	orrs	r3, r1
 8006e62:	431a      	orrs	r2, r3
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e70:	d109      	bne.n	8006e86 <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d105      	bne.n	8006e86 <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689a      	ldr	r2, [r3, #8]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e039      	b.n	8006f04 <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d030      	beq.n	8006efa <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d017      	beq.n	8006ed0 <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006ea8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	69d1      	ldr	r1, [r2, #28]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	6a12      	ldr	r2, [r2, #32]
 8006eba:	4311      	orrs	r1, r2
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e00e      	b.n	8006eee <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	69d9      	ldr	r1, [r3, #28]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	4319      	orrs	r1, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	6992      	ldr	r2, [r2, #24]
 8006ef6:	649a      	str	r2, [r3, #72]	@ 0x48
 8006ef8:	e004      	b.n	8006f04 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2208      	movs	r2, #8
 8006f02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8006f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3724      	adds	r7, #36	@ 0x24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	f0ffc0c0 	.word	0xf0ffc0c0

08006f18 <malloc>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	@ (8006f24 <malloc+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f000 b825 	b.w	8006f6c <_malloc_r>
 8006f22:	bf00      	nop
 8006f24:	2000000c 	.word	0x2000000c

08006f28 <sbrk_aligned>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8006f68 <sbrk_aligned+0x40>)
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	4605      	mov	r5, r0
 8006f30:	6831      	ldr	r1, [r6, #0]
 8006f32:	b911      	cbnz	r1, 8006f3a <sbrk_aligned+0x12>
 8006f34:	f000 f8ae 	bl	8007094 <_sbrk_r>
 8006f38:	6030      	str	r0, [r6, #0]
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 f8a9 	bl	8007094 <_sbrk_r>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d103      	bne.n	8006f4e <sbrk_aligned+0x26>
 8006f46:	f04f 34ff 	mov.w	r4, #4294967295
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	bd70      	pop	{r4, r5, r6, pc}
 8006f4e:	1cc4      	adds	r4, r0, #3
 8006f50:	f024 0403 	bic.w	r4, r4, #3
 8006f54:	42a0      	cmp	r0, r4
 8006f56:	d0f8      	beq.n	8006f4a <sbrk_aligned+0x22>
 8006f58:	1a21      	subs	r1, r4, r0
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f000 f89a 	bl	8007094 <_sbrk_r>
 8006f60:	3001      	adds	r0, #1
 8006f62:	d1f2      	bne.n	8006f4a <sbrk_aligned+0x22>
 8006f64:	e7ef      	b.n	8006f46 <sbrk_aligned+0x1e>
 8006f66:	bf00      	nop
 8006f68:	20000170 	.word	0x20000170

08006f6c <_malloc_r>:
 8006f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f70:	1ccd      	adds	r5, r1, #3
 8006f72:	4606      	mov	r6, r0
 8006f74:	f025 0503 	bic.w	r5, r5, #3
 8006f78:	3508      	adds	r5, #8
 8006f7a:	2d0c      	cmp	r5, #12
 8006f7c:	bf38      	it	cc
 8006f7e:	250c      	movcc	r5, #12
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	db01      	blt.n	8006f88 <_malloc_r+0x1c>
 8006f84:	42a9      	cmp	r1, r5
 8006f86:	d904      	bls.n	8006f92 <_malloc_r+0x26>
 8006f88:	230c      	movs	r3, #12
 8006f8a:	6033      	str	r3, [r6, #0]
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007068 <_malloc_r+0xfc>
 8006f96:	f000 f869 	bl	800706c <__malloc_lock>
 8006f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f9e:	461c      	mov	r4, r3
 8006fa0:	bb44      	cbnz	r4, 8006ff4 <_malloc_r+0x88>
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f7ff ffbf 	bl	8006f28 <sbrk_aligned>
 8006faa:	1c43      	adds	r3, r0, #1
 8006fac:	4604      	mov	r4, r0
 8006fae:	d158      	bne.n	8007062 <_malloc_r+0xf6>
 8006fb0:	f8d8 4000 	ldr.w	r4, [r8]
 8006fb4:	4627      	mov	r7, r4
 8006fb6:	2f00      	cmp	r7, #0
 8006fb8:	d143      	bne.n	8007042 <_malloc_r+0xd6>
 8006fba:	2c00      	cmp	r4, #0
 8006fbc:	d04b      	beq.n	8007056 <_malloc_r+0xea>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	eb04 0903 	add.w	r9, r4, r3
 8006fc8:	f000 f864 	bl	8007094 <_sbrk_r>
 8006fcc:	4581      	cmp	r9, r0
 8006fce:	d142      	bne.n	8007056 <_malloc_r+0xea>
 8006fd0:	6821      	ldr	r1, [r4, #0]
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	1a6d      	subs	r5, r5, r1
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7ff ffa6 	bl	8006f28 <sbrk_aligned>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d03a      	beq.n	8007056 <_malloc_r+0xea>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	442b      	add	r3, r5
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	bb62      	cbnz	r2, 8007048 <_malloc_r+0xdc>
 8006fee:	f8c8 7000 	str.w	r7, [r8]
 8006ff2:	e00f      	b.n	8007014 <_malloc_r+0xa8>
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	1b52      	subs	r2, r2, r5
 8006ff8:	d420      	bmi.n	800703c <_malloc_r+0xd0>
 8006ffa:	2a0b      	cmp	r2, #11
 8006ffc:	d917      	bls.n	800702e <_malloc_r+0xc2>
 8006ffe:	1961      	adds	r1, r4, r5
 8007000:	42a3      	cmp	r3, r4
 8007002:	6025      	str	r5, [r4, #0]
 8007004:	bf18      	it	ne
 8007006:	6059      	strne	r1, [r3, #4]
 8007008:	6863      	ldr	r3, [r4, #4]
 800700a:	bf08      	it	eq
 800700c:	f8c8 1000 	streq.w	r1, [r8]
 8007010:	5162      	str	r2, [r4, r5]
 8007012:	604b      	str	r3, [r1, #4]
 8007014:	4630      	mov	r0, r6
 8007016:	f000 f82f 	bl	8007078 <__malloc_unlock>
 800701a:	f104 000b 	add.w	r0, r4, #11
 800701e:	1d23      	adds	r3, r4, #4
 8007020:	f020 0007 	bic.w	r0, r0, #7
 8007024:	1ac2      	subs	r2, r0, r3
 8007026:	bf1c      	itt	ne
 8007028:	1a1b      	subne	r3, r3, r0
 800702a:	50a3      	strne	r3, [r4, r2]
 800702c:	e7af      	b.n	8006f8e <_malloc_r+0x22>
 800702e:	6862      	ldr	r2, [r4, #4]
 8007030:	42a3      	cmp	r3, r4
 8007032:	bf0c      	ite	eq
 8007034:	f8c8 2000 	streq.w	r2, [r8]
 8007038:	605a      	strne	r2, [r3, #4]
 800703a:	e7eb      	b.n	8007014 <_malloc_r+0xa8>
 800703c:	4623      	mov	r3, r4
 800703e:	6864      	ldr	r4, [r4, #4]
 8007040:	e7ae      	b.n	8006fa0 <_malloc_r+0x34>
 8007042:	463c      	mov	r4, r7
 8007044:	687f      	ldr	r7, [r7, #4]
 8007046:	e7b6      	b.n	8006fb6 <_malloc_r+0x4a>
 8007048:	461a      	mov	r2, r3
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	42a3      	cmp	r3, r4
 800704e:	d1fb      	bne.n	8007048 <_malloc_r+0xdc>
 8007050:	2300      	movs	r3, #0
 8007052:	6053      	str	r3, [r2, #4]
 8007054:	e7de      	b.n	8007014 <_malloc_r+0xa8>
 8007056:	230c      	movs	r3, #12
 8007058:	4630      	mov	r0, r6
 800705a:	6033      	str	r3, [r6, #0]
 800705c:	f000 f80c 	bl	8007078 <__malloc_unlock>
 8007060:	e794      	b.n	8006f8c <_malloc_r+0x20>
 8007062:	6005      	str	r5, [r0, #0]
 8007064:	e7d6      	b.n	8007014 <_malloc_r+0xa8>
 8007066:	bf00      	nop
 8007068:	20000174 	.word	0x20000174

0800706c <__malloc_lock>:
 800706c:	4801      	ldr	r0, [pc, #4]	@ (8007074 <__malloc_lock+0x8>)
 800706e:	f000 b84b 	b.w	8007108 <__retarget_lock_acquire_recursive>
 8007072:	bf00      	nop
 8007074:	200002b4 	.word	0x200002b4

08007078 <__malloc_unlock>:
 8007078:	4801      	ldr	r0, [pc, #4]	@ (8007080 <__malloc_unlock+0x8>)
 800707a:	f000 b846 	b.w	800710a <__retarget_lock_release_recursive>
 800707e:	bf00      	nop
 8007080:	200002b4 	.word	0x200002b4

08007084 <memset>:
 8007084:	4402      	add	r2, r0
 8007086:	4603      	mov	r3, r0
 8007088:	4293      	cmp	r3, r2
 800708a:	d100      	bne.n	800708e <memset+0xa>
 800708c:	4770      	bx	lr
 800708e:	f803 1b01 	strb.w	r1, [r3], #1
 8007092:	e7f9      	b.n	8007088 <memset+0x4>

08007094 <_sbrk_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	2300      	movs	r3, #0
 8007098:	4d05      	ldr	r5, [pc, #20]	@ (80070b0 <_sbrk_r+0x1c>)
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	602b      	str	r3, [r5, #0]
 80070a0:	f7f9 ff06 	bl	8000eb0 <_sbrk>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_sbrk_r+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_sbrk_r+0x1a>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	200002b0 	.word	0x200002b0

080070b4 <__errno>:
 80070b4:	4b01      	ldr	r3, [pc, #4]	@ (80070bc <__errno+0x8>)
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	2000000c 	.word	0x2000000c

080070c0 <__libc_init_array>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	4d0d      	ldr	r5, [pc, #52]	@ (80070f8 <__libc_init_array+0x38>)
 80070c4:	2600      	movs	r6, #0
 80070c6:	4c0d      	ldr	r4, [pc, #52]	@ (80070fc <__libc_init_array+0x3c>)
 80070c8:	1b64      	subs	r4, r4, r5
 80070ca:	10a4      	asrs	r4, r4, #2
 80070cc:	42a6      	cmp	r6, r4
 80070ce:	d109      	bne.n	80070e4 <__libc_init_array+0x24>
 80070d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007100 <__libc_init_array+0x40>)
 80070d2:	2600      	movs	r6, #0
 80070d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007104 <__libc_init_array+0x44>)
 80070d6:	f000 f82f 	bl	8007138 <_init>
 80070da:	1b64      	subs	r4, r4, r5
 80070dc:	10a4      	asrs	r4, r4, #2
 80070de:	42a6      	cmp	r6, r4
 80070e0:	d105      	bne.n	80070ee <__libc_init_array+0x2e>
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e8:	3601      	adds	r6, #1
 80070ea:	4798      	blx	r3
 80070ec:	e7ee      	b.n	80070cc <__libc_init_array+0xc>
 80070ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f2:	3601      	adds	r6, #1
 80070f4:	4798      	blx	r3
 80070f6:	e7f2      	b.n	80070de <__libc_init_array+0x1e>
 80070f8:	08007280 	.word	0x08007280
 80070fc:	08007280 	.word	0x08007280
 8007100:	08007280 	.word	0x08007280
 8007104:	08007284 	.word	0x08007284

08007108 <__retarget_lock_acquire_recursive>:
 8007108:	4770      	bx	lr

0800710a <__retarget_lock_release_recursive>:
 800710a:	4770      	bx	lr

0800710c <strcpy>:
 800710c:	4603      	mov	r3, r0
 800710e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007112:	f803 2b01 	strb.w	r2, [r3], #1
 8007116:	2a00      	cmp	r2, #0
 8007118:	d1f9      	bne.n	800710e <strcpy+0x2>
 800711a:	4770      	bx	lr

0800711c <memcpy>:
 800711c:	440a      	add	r2, r1
 800711e:	1e43      	subs	r3, r0, #1
 8007120:	4291      	cmp	r1, r2
 8007122:	d100      	bne.n	8007126 <memcpy+0xa>
 8007124:	4770      	bx	lr
 8007126:	b510      	push	{r4, lr}
 8007128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800712c:	4291      	cmp	r1, r2
 800712e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007132:	d1f9      	bne.n	8007128 <memcpy+0xc>
 8007134:	bd10      	pop	{r4, pc}
	...

08007138 <_init>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr

08007144 <_fini>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	bf00      	nop
 8007148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714a:	bc08      	pop	{r3}
 800714c:	469e      	mov	lr, r3
 800714e:	4770      	bx	lr
