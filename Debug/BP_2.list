
BP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000754c  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080077a0  080077a0  000087a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007914  08007914  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007914  08007914  00008914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800791c  0800791c  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800791c  0800791c  0000891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007920  08007920  00008920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007924  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08007930  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08007930  0000911c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012462  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201d  00000000  00000000  0001b4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0001d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000979  00000000  00000000  0001e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b03e  00000000  00000000  0001ea81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff2c  00000000  00000000  00049abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e1c7  00000000  00000000  000599eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167bb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  00167bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0016af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08007788 	.word	0x08007788

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08007788 	.word	0x08007788

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b9b0 	b.w	800061c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	4688      	mov	r8, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	468e      	mov	lr, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d95f      	bls.n	80003aa <__udivmoddi4+0xd6>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	40b4      	lsls	r4, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	ea43 0e0e 	orr.w	lr, r3, lr
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fbbe f1f8 	udiv	r1, lr, r8
 8000312:	fb08 ee11 	mls	lr, r8, r1, lr
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x5e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x5c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 8154 	bhi.w	80005d8 <__udivmoddi4+0x304>
 8000330:	4601      	mov	r1, r0
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b2a2      	uxth	r2, r4
 8000336:	fbb3 f0f8 	udiv	r0, r3, r8
 800033a:	fb08 3310 	mls	r3, r8, r0, r3
 800033e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000346:	4594      	cmp	ip, r2
 8000348:	d90b      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034a:	18ba      	adds	r2, r7, r2
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	bf2c      	ite	cs
 8000352:	2401      	movcs	r4, #1
 8000354:	2400      	movcc	r4, #0
 8000356:	4594      	cmp	ip, r2
 8000358:	d902      	bls.n	8000360 <__udivmoddi4+0x8c>
 800035a:	2c00      	cmp	r4, #0
 800035c:	f000 813f 	beq.w	80005de <__udivmoddi4+0x30a>
 8000360:	4618      	mov	r0, r3
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba2 020c 	sub.w	r2, r2, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f2      	lsrs	r2, r6
 8000370:	2300      	movs	r3, #0
 8000372:	e9c5 2300 	strd	r2, r3, [r5]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14e      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000392:	4543      	cmp	r3, r8
 8000394:	f0c0 8112 	bcc.w	80005bc <__udivmoddi4+0x2e8>
 8000398:	4282      	cmp	r2, r0
 800039a:	f240 810f 	bls.w	80005bc <__udivmoddi4+0x2e8>
 800039e:	4608      	mov	r0, r1
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d0e8      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a8:	e7e5      	b.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	f000 80ac 	beq.w	8000508 <__udivmoddi4+0x234>
 80003b0:	fab2 f682 	clz	r6, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	f040 80bb 	bne.w	8000530 <__udivmoddi4+0x25c>
 80003ba:	1a8b      	subs	r3, r1, r2
 80003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c0:	b2bc      	uxth	r4, r7
 80003c2:	2101      	movs	r1, #1
 80003c4:	0c02      	lsrs	r2, r0, #16
 80003c6:	b280      	uxth	r0, r0
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d4:	fb04 f20c 	mul.w	r2, r4, ip
 80003d8:	429a      	cmp	r2, r3
 80003da:	d90e      	bls.n	80003fa <__udivmoddi4+0x126>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80ec 	beq.w	80005d0 <__udivmoddi4+0x2fc>
 80003f8:	46c4      	mov	ip, r8
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000400:	fb0e 3318 	mls	r3, lr, r8, r3
 8000404:	fb04 f408 	mul.w	r4, r4, r8
 8000408:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800040c:	4294      	cmp	r4, r2
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x154>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295
 8000416:	bf2c      	ite	cs
 8000418:	2001      	movcs	r0, #1
 800041a:	2000      	movcc	r0, #0
 800041c:	4294      	cmp	r4, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x152>
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80d1 	beq.w	80005c8 <__udivmoddi4+0x2f4>
 8000426:	4698      	mov	r8, r3
 8000428:	1b12      	subs	r2, r2, r4
 800042a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa08 f401 	lsl.w	r4, r8, r1
 800043a:	fa00 f901 	lsl.w	r9, r0, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa28 f806 	lsr.w	r8, r8, r6
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f306 	lsr.w	r3, r0, r6
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fbb8 fef0 	udiv	lr, r8, r0
 800045c:	fb00 881e 	mls	r8, r0, lr, r8
 8000460:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000464:	fb0e f80c 	mul.w	r8, lr, ip
 8000468:	45a0      	cmp	r8, r4
 800046a:	d90e      	bls.n	800048a <__udivmoddi4+0x1b6>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000472:	bf2c      	ite	cs
 8000474:	f04f 0b01 	movcs.w	fp, #1
 8000478:	f04f 0b00 	movcc.w	fp, #0
 800047c:	45a0      	cmp	r8, r4
 800047e:	d903      	bls.n	8000488 <__udivmoddi4+0x1b4>
 8000480:	f1bb 0f00 	cmp.w	fp, #0
 8000484:	f000 80b8 	beq.w	80005f8 <__udivmoddi4+0x324>
 8000488:	46d6      	mov	lr, sl
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fa1f f883 	uxth.w	r8, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d90e      	bls.n	80004c4 <__udivmoddi4+0x1f0>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	bf2c      	ite	cs
 80004ae:	f04f 0801 	movcs.w	r8, #1
 80004b2:	f04f 0800 	movcc.w	r8, #0
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d903      	bls.n	80004c2 <__udivmoddi4+0x1ee>
 80004ba:	f1b8 0f00 	cmp.w	r8, #0
 80004be:	f000 809f 	beq.w	8000600 <__udivmoddi4+0x32c>
 80004c2:	4603      	mov	r3, r0
 80004c4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c8:	eba4 040c 	sub.w	r4, r4, ip
 80004cc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d0:	4564      	cmp	r4, ip
 80004d2:	4673      	mov	r3, lr
 80004d4:	46e0      	mov	r8, ip
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0x20a>
 80004d8:	d107      	bne.n	80004ea <__udivmoddi4+0x216>
 80004da:	45f1      	cmp	r9, lr
 80004dc:	d205      	bcs.n	80004ea <__udivmoddi4+0x216>
 80004de:	ebbe 0302 	subs.w	r3, lr, r2
 80004e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e6:	3801      	subs	r0, #1
 80004e8:	46e0      	mov	r8, ip
 80004ea:	b15d      	cbz	r5, 8000504 <__udivmoddi4+0x230>
 80004ec:	ebb9 0203 	subs.w	r2, r9, r3
 80004f0:	eb64 0408 	sbc.w	r4, r4, r8
 80004f4:	fa04 f606 	lsl.w	r6, r4, r6
 80004f8:	fa22 f301 	lsr.w	r3, r2, r1
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e736      	b.n	8000376 <__udivmoddi4+0xa2>
 8000508:	fbb1 fcf2 	udiv	ip, r1, r2
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4614      	mov	r4, r2
 8000510:	b280      	uxth	r0, r0
 8000512:	4696      	mov	lr, r2
 8000514:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000518:	2620      	movs	r6, #32
 800051a:	4690      	mov	r8, r2
 800051c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000520:	4610      	mov	r0, r2
 8000522:	fbb1 f1f2 	udiv	r1, r1, r2
 8000526:	eba3 0308 	sub.w	r3, r3, r8
 800052a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052e:	e74b      	b.n	80003c8 <__udivmoddi4+0xf4>
 8000530:	40b7      	lsls	r7, r6
 8000532:	f1c6 0320 	rsb	r3, r6, #32
 8000536:	fa01 f206 	lsl.w	r2, r1, r6
 800053a:	fa21 f803 	lsr.w	r8, r1, r3
 800053e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000542:	fa20 f303 	lsr.w	r3, r0, r3
 8000546:	b2bc      	uxth	r4, r7
 8000548:	40b0      	lsls	r0, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	0c02      	lsrs	r2, r0, #16
 800054e:	0c19      	lsrs	r1, r3, #16
 8000550:	b280      	uxth	r0, r0
 8000552:	fbb8 f9fe 	udiv	r9, r8, lr
 8000556:	fb0e 8819 	mls	r8, lr, r9, r8
 800055a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	4588      	cmp	r8, r1
 8000564:	d951      	bls.n	800060a <__udivmoddi4+0x336>
 8000566:	1879      	adds	r1, r7, r1
 8000568:	f109 3cff 	add.w	ip, r9, #4294967295
 800056c:	bf2c      	ite	cs
 800056e:	f04f 0a01 	movcs.w	sl, #1
 8000572:	f04f 0a00 	movcc.w	sl, #0
 8000576:	4588      	cmp	r8, r1
 8000578:	d902      	bls.n	8000580 <__udivmoddi4+0x2ac>
 800057a:	f1ba 0f00 	cmp.w	sl, #0
 800057e:	d031      	beq.n	80005e4 <__udivmoddi4+0x310>
 8000580:	eba1 0108 	sub.w	r1, r1, r8
 8000584:	fbb1 f9fe 	udiv	r9, r1, lr
 8000588:	fb09 f804 	mul.w	r8, r9, r4
 800058c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000590:	b29b      	uxth	r3, r3
 8000592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000596:	4543      	cmp	r3, r8
 8000598:	d235      	bcs.n	8000606 <__udivmoddi4+0x332>
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a0:	bf2c      	ite	cs
 80005a2:	f04f 0a01 	movcs.w	sl, #1
 80005a6:	f04f 0a00 	movcc.w	sl, #0
 80005aa:	4543      	cmp	r3, r8
 80005ac:	d2bb      	bcs.n	8000526 <__udivmoddi4+0x252>
 80005ae:	f1ba 0f00 	cmp.w	sl, #0
 80005b2:	d1b8      	bne.n	8000526 <__udivmoddi4+0x252>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e7b4      	b.n	8000526 <__udivmoddi4+0x252>
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb68 0203 	sbc.w	r2, r8, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	4696      	mov	lr, r2
 80005c6:	e6eb      	b.n	80003a0 <__udivmoddi4+0xcc>
 80005c8:	443a      	add	r2, r7
 80005ca:	f1a8 0802 	sub.w	r8, r8, #2
 80005ce:	e72b      	b.n	8000428 <__udivmoddi4+0x154>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	e710      	b.n	80003fa <__udivmoddi4+0x126>
 80005d8:	3902      	subs	r1, #2
 80005da:	443b      	add	r3, r7
 80005dc:	e6a9      	b.n	8000332 <__udivmoddi4+0x5e>
 80005de:	443a      	add	r2, r7
 80005e0:	3802      	subs	r0, #2
 80005e2:	e6be      	b.n	8000362 <__udivmoddi4+0x8e>
 80005e4:	eba7 0808 	sub.w	r8, r7, r8
 80005e8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005ec:	4441      	add	r1, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c9      	b.n	800058c <__udivmoddi4+0x2b8>
 80005f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005fc:	443c      	add	r4, r7
 80005fe:	e744      	b.n	800048a <__udivmoddi4+0x1b6>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e75e      	b.n	80004c4 <__udivmoddi4+0x1f0>
 8000606:	4649      	mov	r1, r9
 8000608:	e78d      	b.n	8000526 <__udivmoddi4+0x252>
 800060a:	eba1 0108 	sub.w	r1, r1, r8
 800060e:	46cc      	mov	ip, r9
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7b8      	b.n	800058c <__udivmoddi4+0x2b8>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8000626:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f001 f886 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f8e8 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f9d2 	bl	80009d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 f984 	bl	8000940 <MX_USART2_UART_Init>
  MX_OCTOSPI1_Init();
 8000638:	f000 f944 	bl	80008c4 <MX_OCTOSPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f001 f938 	bl	80018b4 <HAL_Delay>
  uart_print((uint8_t *)"\r\nInitializing\r\n", &huart2);
 8000644:	4965      	ldr	r1, [pc, #404]	@ (80007dc <main+0x1bc>)
 8000646:	4866      	ldr	r0, [pc, #408]	@ (80007e0 <main+0x1c0>)
 8000648:	f000 fa3a 	bl	8000ac0 <uart_print>

  if(hospi1.State == HAL_XSPI_STATE_READY){
 800064c:	4b65      	ldr	r3, [pc, #404]	@ (80007e4 <main+0x1c4>)
 800064e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000650:	2b02      	cmp	r3, #2
 8000652:	d104      	bne.n	800065e <main+0x3e>
	  uart_print((uint8_t *)"HAL OK\r\n", &huart2);
 8000654:	4961      	ldr	r1, [pc, #388]	@ (80007dc <main+0x1bc>)
 8000656:	4864      	ldr	r0, [pc, #400]	@ (80007e8 <main+0x1c8>)
 8000658:	f000 fa32 	bl	8000ac0 <uart_print>
 800065c:	e003      	b.n	8000666 <main+0x46>
  }else{
	  uart_print((uint8_t *)"HAL NOT OK\r\n", &huart2);
 800065e:	495f      	ldr	r1, [pc, #380]	@ (80007dc <main+0x1bc>)
 8000660:	4862      	ldr	r0, [pc, #392]	@ (80007ec <main+0x1cc>)
 8000662:	f000 fa2d 	bl	8000ac0 <uart_print>
  }

  uart_print((uint8_t *) "Reset device\r\n", &huart2);
 8000666:	495d      	ldr	r1, [pc, #372]	@ (80007dc <main+0x1bc>)
 8000668:	4861      	ldr	r0, [pc, #388]	@ (80007f0 <main+0x1d0>)
 800066a:	f000 fa29 	bl	8000ac0 <uart_print>
  check_spi_return(reset(&hospi1));
 800066e:	485d      	ldr	r0, [pc, #372]	@ (80007e4 <main+0x1c4>)
 8000670:	f000 fc28 	bl	8000ec4 <reset>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d004      	beq.n	8000684 <main+0x64>
 800067a:	485a      	ldr	r0, [pc, #360]	@ (80007e4 <main+0x1c4>)
 800067c:	f000 fc22 	bl	8000ec4 <reset>
 8000680:	4603      	mov	r3, r0
 8000682:	e0a6      	b.n	80007d2 <main+0x1b2>

  /*uart_print((uint8_t *)"Setting QE bit \r\n", &huart2);
  check_spi_return(set_QE(&hospi1));*/


  uint32_t address = 0x6f000;
 8000684:	f44f 23de 	mov.w	r3, #454656	@ 0x6f000
 8000688:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

  while (1)
  {
   fill_page_buffer_1(0b01010101, spi_write_buffer_1);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	2055      	movs	r0, #85	@ 0x55
 8000692:	f000 fa69 	bl	8000b68 <fill_page_buffer_1>
   for(address = 0xff + 1; 1; address += 8){
 8000696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800069a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
      // test reading
	//chip_erase(spi_write_buffer_1, &hospi1, &huart2);

    get_HAL_error(erase_sector(&hospi1, address), &huart2);
 800069e:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 80006a2:	4850      	ldr	r0, [pc, #320]	@ (80007e4 <main+0x1c4>)
 80006a4:	f000 fc9a 	bl	8000fdc <erase_sector>
 80006a8:	4603      	mov	r3, r0
 80006aa:	494c      	ldr	r1, [pc, #304]	@ (80007dc <main+0x1bc>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fa25 	bl	8000afc <get_HAL_error>
    get_HAL_error(test_write_n_bytes_single(16, spi_write_buffer_1, &hospi1, address, &huart2), &huart2);
 80006b2:	1d39      	adds	r1, r7, #4
 80006b4:	4b49      	ldr	r3, [pc, #292]	@ (80007dc <main+0x1bc>)
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80006bc:	4a49      	ldr	r2, [pc, #292]	@ (80007e4 <main+0x1c4>)
 80006be:	2010      	movs	r0, #16
 80006c0:	f000 fdd8 	bl	8001274 <test_write_n_bytes_single>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4945      	ldr	r1, [pc, #276]	@ (80007dc <main+0x1bc>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fa17 	bl	8000afc <get_HAL_error>
    uart_print((uint8_t *)"Flush_buffer\r\n", &huart2);
 80006ce:	4943      	ldr	r1, [pc, #268]	@ (80007dc <main+0x1bc>)
 80006d0:	4848      	ldr	r0, [pc, #288]	@ (80007f4 <main+0x1d4>)
 80006d2:	f000 f9f5 	bl	8000ac0 <uart_print>
    get_HAL_error(flush_buffer(&hospi1), &huart2);
 80006d6:	4843      	ldr	r0, [pc, #268]	@ (80007e4 <main+0x1c4>)
 80006d8:	f000 fba4 	bl	8000e24 <flush_buffer>
 80006dc:	4603      	mov	r3, r0
 80006de:	493f      	ldr	r1, [pc, #252]	@ (80007dc <main+0x1bc>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa0b 	bl	8000afc <get_HAL_error>


    get_HAL_error(test_read_n_bytes_dual_2(16, spi_read_buffer_1, &hospi1, address, &huart2), &huart2);
 80006e6:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80006ea:	4b3c      	ldr	r3, [pc, #240]	@ (80007dc <main+0x1bc>)
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80006f2:	4a3c      	ldr	r2, [pc, #240]	@ (80007e4 <main+0x1c4>)
 80006f4:	2010      	movs	r0, #16
 80006f6:	f000 fd75 	bl	80011e4 <test_read_n_bytes_dual_2>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4937      	ldr	r1, [pc, #220]	@ (80007dc <main+0x1bc>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f9fc 	bl	8000afc <get_HAL_error>
	uart_print((uint8_t *)"read from flash: \r\n", &huart2);
 8000704:	4935      	ldr	r1, [pc, #212]	@ (80007dc <main+0x1bc>)
 8000706:	483c      	ldr	r0, [pc, #240]	@ (80007f8 <main+0x1d8>)
 8000708:	f000 f9da 	bl	8000ac0 <uart_print>
	uart_print(spi_read_buffer_1, &huart2);
 800070c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000710:	4932      	ldr	r1, [pc, #200]	@ (80007dc <main+0x1bc>)
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f9d4 	bl	8000ac0 <uart_print>
	uart_print((uint8_t *)"\r\n", &huart2);
 8000718:	4930      	ldr	r1, [pc, #192]	@ (80007dc <main+0x1bc>)
 800071a:	4838      	ldr	r0, [pc, #224]	@ (80007fc <main+0x1dc>)
 800071c:	f000 f9d0 	bl	8000ac0 <uart_print>
	memset(spi_read_buffer_1, 0, 256);
 8000720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f007 f800 	bl	8007730 <memset>
    get_HAL_error(test_read_n_bytes_single(16, spi_read_buffer_1, &hospi1, address, &huart2), &huart2);
 8000730:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <main+0x1bc>)
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800073c:	4a29      	ldr	r2, [pc, #164]	@ (80007e4 <main+0x1c4>)
 800073e:	2010      	movs	r0, #16
 8000740:	f000 fcc0 	bl	80010c4 <test_read_n_bytes_single>
 8000744:	4603      	mov	r3, r0
 8000746:	4925      	ldr	r1, [pc, #148]	@ (80007dc <main+0x1bc>)
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f9d7 	bl	8000afc <get_HAL_error>
	uart_print((uint8_t *)"read from flash: \r\n", &huart2);
 800074e:	4923      	ldr	r1, [pc, #140]	@ (80007dc <main+0x1bc>)
 8000750:	4829      	ldr	r0, [pc, #164]	@ (80007f8 <main+0x1d8>)
 8000752:	f000 f9b5 	bl	8000ac0 <uart_print>
	uart_print(spi_read_buffer_1, &huart2);
 8000756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800075a:	4920      	ldr	r1, [pc, #128]	@ (80007dc <main+0x1bc>)
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f9af 	bl	8000ac0 <uart_print>
	uart_print((uint8_t *)"\r\n", &huart2);
 8000762:	491e      	ldr	r1, [pc, #120]	@ (80007dc <main+0x1bc>)
 8000764:	4825      	ldr	r0, [pc, #148]	@ (80007fc <main+0x1dc>)
 8000766:	f000 f9ab 	bl	8000ac0 <uart_print>
	memset(spi_read_buffer_1, 0, 256);
 800076a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800076e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f006 ffdb 	bl	8007730 <memset>
	//check_spi_return(set_QE(&hospi1));
    get_HAL_error(test_read_n_bytes_dual_1(16, spi_read_buffer_1, &hospi1, address, &huart2), &huart2);
 800077a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <main+0x1bc>)
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000786:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <main+0x1c4>)
 8000788:	2010      	movs	r0, #16
 800078a:	f000 fce3 	bl	8001154 <test_read_n_bytes_dual_1>
 800078e:	4603      	mov	r3, r0
 8000790:	4912      	ldr	r1, [pc, #72]	@ (80007dc <main+0x1bc>)
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f9b2 	bl	8000afc <get_HAL_error>
	uart_print((uint8_t *)"read from flash: \r\n", &huart2);
 8000798:	4910      	ldr	r1, [pc, #64]	@ (80007dc <main+0x1bc>)
 800079a:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <main+0x1d8>)
 800079c:	f000 f990 	bl	8000ac0 <uart_print>
	uart_print(spi_read_buffer_1, &huart2);
 80007a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007a4:	490d      	ldr	r1, [pc, #52]	@ (80007dc <main+0x1bc>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f98a 	bl	8000ac0 <uart_print>
	uart_print((uint8_t *)"\r\n", &huart2);
 80007ac:	490b      	ldr	r1, [pc, #44]	@ (80007dc <main+0x1bc>)
 80007ae:	4813      	ldr	r0, [pc, #76]	@ (80007fc <main+0x1dc>)
 80007b0:	f000 f986 	bl	8000ac0 <uart_print>
	memset(spi_read_buffer_1, 0, 256);
 80007b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f006 ffb6 	bl	8007730 <memset>
   for(address = 0xff + 1; 1; address += 8){
 80007c4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80007c8:	3308      	adds	r3, #8
 80007ca:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    get_HAL_error(erase_sector(&hospi1, address), &huart2);
 80007ce:	bf00      	nop
 80007d0:	e765      	b.n	800069e <main+0x7e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000084 	.word	0x20000084
 80007e0:	080077a0 	.word	0x080077a0
 80007e4:	20000028 	.word	0x20000028
 80007e8:	080077b4 	.word	0x080077b4
 80007ec:	080077c0 	.word	0x080077c0
 80007f0:	080077d0 	.word	0x080077d0
 80007f4:	080077e0 	.word	0x080077e0
 80007f8:	080077f0 	.word	0x080077f0
 80007fc:	08007804 	.word	0x08007804

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	@ 0x70
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2250      	movs	r2, #80	@ 0x50
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f006 ff8e 	bl	8007730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <SystemClock_Config+0xbc>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4a24      	ldr	r2, [pc, #144]	@ (80008bc <SystemClock_Config+0xbc>)
 800082c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000830:	6113      	str	r3, [r2, #16]
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <SystemClock_Config+0xbc>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083e:	bf00      	nop
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <SystemClock_Config+0xbc>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	2b08      	cmp	r3, #8
 800084a:	d1f9      	bne.n	8000840 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2340      	movs	r3, #64	@ 0x40
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fb3b 	bl	8001ee0 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000870:	f000 f920 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	231f      	movs	r3, #31
 8000876:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800087c:	230a      	movs	r3, #10
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2103      	movs	r1, #3
 8000892:	4618      	mov	r0, r3
 8000894:	f001 ff5c 	bl	8002750 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800089e:	f000 f909 	bl	8000ab4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <SystemClock_Config+0xc0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <SystemClock_Config+0xc0>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	3770      	adds	r7, #112	@ 0x70
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	44020800 	.word	0x44020800
 80008c0:	40022000 	.word	0x40022000

080008c4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <MX_OCTOSPI1_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 31;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008d0:	221f      	movs	r2, #31
 80008d2:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80008e0:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_64MB;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008e4:	2216      	movs	r2, #22
 80008e6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80008f4:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 8000902:	2202      	movs	r2, #2
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_128MB;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 8000914:	2218      	movs	r2, #24
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_OCTOSPI1_Init+0x74>)
 8000926:	f006 fa97 	bl	8006e58 <HAL_XSPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 8000930:	f000 f8c0 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000028 	.word	0x20000028
 800093c:	47001400 	.word	0x47001400

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <MX_USART2_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800098a:	f005 fca7 	bl	80062dc <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f88e 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 800099c:	f006 f992 	bl	8006cc4 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f885 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 80009ae:	f006 f9c7 	bl	8006d40 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f87c 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_USART2_UART_Init+0x90>)
 80009be:	f006 f948 	bl	8006c52 <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f874 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000084 	.word	0x20000084
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 80009f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f4:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a12:	4a25      	ldr	r2, [pc, #148]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a32:	f043 0302 	orr.w	r3, r3, #2
 8000a36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_GPIO_Init+0xd0>)
 8000a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	4817      	ldr	r0, [pc, #92]	@ (8000aac <MX_GPIO_Init+0xd4>)
 8000a4e:	f001 fa2f 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <MX_GPIO_Init+0xd8>)
 8000a68:	f001 f8ac 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480b      	ldr	r0, [pc, #44]	@ (8000aac <MX_GPIO_Init+0xd4>)
 8000a80:	f001 f8a0 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a84:	2320      	movs	r3, #32
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <MX_GPIO_Init+0xd4>)
 8000a9c:	f001 f892 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	44020c00 	.word	0x44020c00
 8000aac:	42020000 	.word	0x42020000
 8000ab0:	42020800 	.word	0x42020800

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <uart_print>:

#include "my_hal.h"



void uart_print(uint8_t *text, UART_HandleTypeDef * husart){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	uint32_t n = strlen((char *)text) > 31 ? 31 : strlen((char *)text);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fbe2 	bl	8000294 <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b1f      	cmp	r3, #31
 8000ad4:	d804      	bhi.n	8000ae0 <uart_print+0x20>
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fbdc 	bl	8000294 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	e000      	b.n	8000ae2 <uart_print+0x22>
 8000ae0:	231f      	movs	r3, #31
 8000ae2:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(husart, text, n, HAL_MAX_DELAY);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	6838      	ldr	r0, [r7, #0]
 8000af0:	f005 fc44 	bl	800637c <HAL_UART_Transmit>
	return;
 8000af4:	bf00      	nop
}
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <get_HAL_error>:


void get_HAL_error(HAL_StatusTypeDef return_value, UART_HandleTypeDef * husart){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
	 switch(return_value){
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d81f      	bhi.n	8000b4e <get_HAL_error+0x52>
 8000b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <get_HAL_error+0x18>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b25 	.word	0x08000b25
 8000b18:	08000b2f 	.word	0x08000b2f
 8000b1c:	08000b43 	.word	0x08000b43
 8000b20:	08000b39 	.word	0x08000b39
		  case HAL_OK:
			  uart_print((uint8_t *)"HAL_OK\r\n", husart);
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <get_HAL_error+0x5c>)
 8000b28:	f7ff ffca 	bl	8000ac0 <uart_print>
			  break;
 8000b2c:	e00e      	b.n	8000b4c <get_HAL_error+0x50>
		  case HAL_ERROR:
			  uart_print((uint8_t *)"HAL ERROR\r\n", husart);
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <get_HAL_error+0x60>)
 8000b32:	f7ff ffc5 	bl	8000ac0 <uart_print>
			  break;
 8000b36:	e009      	b.n	8000b4c <get_HAL_error+0x50>
		  case HAL_TIMEOUT:
			  uart_print((uint8_t *)"HAL TIMEOUT\r\n", husart);
 8000b38:	6839      	ldr	r1, [r7, #0]
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <get_HAL_error+0x64>)
 8000b3c:	f7ff ffc0 	bl	8000ac0 <uart_print>
			  break;
 8000b40:	e004      	b.n	8000b4c <get_HAL_error+0x50>
		  case HAL_BUSY:
			  uart_print((uint8_t *)"HAL BUSY\r\n", husart);
 8000b42:	6839      	ldr	r1, [r7, #0]
 8000b44:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <get_HAL_error+0x68>)
 8000b46:	f7ff ffbb 	bl	8000ac0 <uart_print>
			  break;
 8000b4a:	bf00      	nop
		  }
	 return;
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
}
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	08007808 	.word	0x08007808
 8000b5c:	08007814 	.word	0x08007814
 8000b60:	08007820 	.word	0x08007820
 8000b64:	08007830 	.word	0x08007830

08000b68 <fill_page_buffer_1>:

void fill_page_buffer_1(uint8_t character, uint8_t *buffer){
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < PAGE_SIZE; i++){
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e007      	b.n	8000b8a <fill_page_buffer_1+0x22>
		buffer[i] = character;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < PAGE_SIZE; i++){
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2bff      	cmp	r3, #255	@ 0xff
 8000b8e:	ddf4      	ble.n	8000b7a <fill_page_buffer_1+0x12>
	}
	buffer[256] = '\0';
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
	return;
 8000b9a:	bf00      	nop
}
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <wait_for_button>:
	}
	buffer[256] = '\0';
	return;
}

void wait_for_button(UART_HandleTypeDef * huart){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET){}
 8000bb0:	bf00      	nop
 8000bb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb6:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <wait_for_button+0x34>)
 8000bb8:	f001 f962 	bl	8001e80 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d1f7      	bne.n	8000bb2 <wait_for_button+0xa>
    while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){}
 8000bc2:	bf00      	nop
 8000bc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <wait_for_button+0x34>)
 8000bca:	f001 f959 	bl	8001e80 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d0f7      	beq.n	8000bc4 <wait_for_button+0x1c>
	return;
 8000bd4:	bf00      	nop
}
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	42020800 	.word	0x42020800

08000be0 <set_spi_command>:
#include "stm32h5xx_hal_xspi.h"
#include <string.h>

void set_spi_command(XSPI_RegularCmdTypeDef *command_struct, uint32_t instruction, //
					 uint32_t instruction_wires, uint32_t address, uint32_t address_wires, //
					 uint32_t data_wires, uint32_t data_length, uint32_t dummy_cycles){
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	603b      	str	r3, [r7, #0]
	command_struct->OperationType         = HAL_XSPI_OPTYPE_COMMON_CFG; 		// Constant.
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
	command_struct->IOSelect 		      = HAL_XSPI_SELECT_IO_3_0;				// Constant. Always the same pins
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
	command_struct->Instruction	          = instruction;						// Not constant.
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	609a      	str	r2, [r3, #8]
	// Use defined instructions
	command_struct->InstructionMode	      = instruction_wires;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	60da      	str	r2, [r3, #12]
	// Not constant. Number of wires for transferring instructions.
	command_struct->InstructionWidth 	  = HAL_XSPI_INSTRUCTION_8_BITS;		// Constant - always 1 byte
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
	command_struct->InstructionDTRMode    = HAL_XSPI_INSTRUCTION_DTR_DISABLE;	// Constant - DTR = Double transfer rate
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
	command_struct->Address 			  = address;							// Not constant
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	619a      	str	r2, [r3, #24]
	// Between 0x00 and 0xFFFFFFFF.
	command_struct->AddressMode           = address_wires;						// Not constant
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	61da      	str	r2, [r3, #28]
	// Number of wires for sending the address.
	command_struct->AddressWidth          = HAL_XSPI_ADDRESS_24_BITS;		// constant
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c24:	621a      	str	r2, [r3, #32]
	command_struct->AddressDTRMode        = HAL_XSPI_ADDRESS_DTR_DISABLE;		// Constant - IDK
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	@ 0x24
	command_struct->AlternateBytes        = 0x00;							    // I don't what alternate bytes are but it isn't used in the flash
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	@ 0x28
	command_struct->AlternateBytesMode    = HAL_XSPI_ALT_BYTES_NONE;			// ---
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2200      	movs	r2, #0
 8000c36:	62da      	str	r2, [r3, #44]	@ 0x2c
	command_struct->AlternateBytesWidth   = HAL_XSPI_ALT_BYTES_32_BITS;			// ---
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000c3e:	631a      	str	r2, [r3, #48]	@ 0x30
	command_struct->AlternateBytesDTRMode = HAL_XSPI_ALT_BYTES_DTR_DISABLE;		// ---
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2200      	movs	r2, #0
 8000c44:	635a      	str	r2, [r3, #52]	@ 0x34
	command_struct->DataMode 			  = data_wires;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	69fa      	ldr	r2, [r7, #28]
 8000c4a:	639a      	str	r2, [r3, #56]	@ 0x38
	// Number of wires for sending and receiving data. 
    command_struct->DataLength 		      = data_length;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6a3a      	ldr	r2, [r7, #32]
 8000c50:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Length in bytes
	command_struct->DataDTRMode 		  = HAL_XSPI_DATA_DTR_DISABLE;			// Constant
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2200      	movs	r2, #0
 8000c56:	641a      	str	r2, [r3, #64]	@ 0x40
	command_struct->DummyCycles 		  = dummy_cycles;						// Not constant
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c5c:	645a      	str	r2, [r3, #68]	@ 0x44
	// Enter number of dummy cycles.
	command_struct->DQSMode 			  = HAL_XSPI_DQS_DISABLE;				// Constant - IDK
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2200      	movs	r2, #0
 8000c62:	649a      	str	r2, [r3, #72]	@ 0x48
	command_struct->SIOOMode 			  = HAL_XSPI_SIOO_INST_EVERY_CMD;		// Constant - IDK
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <write_enable>:
	read_buffer[1] = '\0';
	return octo_spi_return;
}

///////////////////////// Other functions /////////////////////////
HAL_StatusTypeDef write_enable(XSPI_HandleTypeDef *octo_spi_handle, XSPI_RegularCmdTypeDef *spi_command, uint8_t QPI_on){
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b088      	sub	sp, #32
 8000c7a:	af04      	add	r7, sp, #16
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71fb      	strb	r3, [r7, #7]
	if(QPI_on){
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00e      	beq.n	8000ca8 <write_enable+0x32>
		set_spi_command(spi_command, MY_WREN, INST_4_WIRES, ADDR_NONE, 0, DATA_NONE, 0, DUMMY_0);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	9303      	str	r3, [sp, #12]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	9302      	str	r3, [sp, #8]
 8000c92:	2300      	movs	r3, #0
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	2300      	movs	r3, #0
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	2106      	movs	r1, #6
 8000ca0:	68b8      	ldr	r0, [r7, #8]
 8000ca2:	f7ff ff9d 	bl	8000be0 <set_spi_command>
 8000ca6:	e00d      	b.n	8000cc4 <write_enable+0x4e>
	}else{
		set_spi_command(spi_command, MY_WREN, INST_1_WIRE, ADDR_NONE, 0, DATA_NONE, 0, DUMMY_0);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9303      	str	r3, [sp, #12]
 8000cac:	2300      	movs	r3, #0
 8000cae:	9302      	str	r3, [sp, #8]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2106      	movs	r1, #6
 8000cbe:	68b8      	ldr	r0, [r7, #8]
 8000cc0:	f7ff ff8e 	bl	8000be0 <set_spi_command>
	}
	return HAL_XSPI_Command(octo_spi_handle, spi_command, ONE_MINUTE);
 8000cc4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f006 f99c 	bl	8007008 <HAL_XSPI_Command>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <check_status_register>:

HAL_StatusTypeDef check_status_register(uint8_t *read_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint8_t QPI_on){
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b09e      	sub	sp, #120	@ 0x78
 8000cde:	af04      	add	r7, sp, #16
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	
	if(QPI_on){
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d010      	beq.n	8000d10 <check_status_register+0x36>
		set_spi_command(&spi_command, MY_RDSR, INST_4_WIRES, 0x00, ADDR_NONE, DATA_4_WIRES, ONE_BYTE, DUMMY_0);
 8000cee:	f107 0014 	add.w	r0, r7, #20
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9303      	str	r3, [sp, #12]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	2300      	movs	r3, #0
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2300      	movs	r3, #0
 8000d06:	2203      	movs	r2, #3
 8000d08:	2105      	movs	r1, #5
 8000d0a:	f7ff ff69 	bl	8000be0 <set_spi_command>
 8000d0e:	e00f      	b.n	8000d30 <check_status_register+0x56>
	}else{
		set_spi_command(&spi_command, MY_RDSR, INST_1_WIRE, 0x00, ADDR_NONE, DATA_1_WIRE, ONE_BYTE, DUMMY_0);
 8000d10:	f107 0014 	add.w	r0, r7, #20
 8000d14:	2300      	movs	r3, #0
 8000d16:	9303      	str	r3, [sp, #12]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	f7ff ff58 	bl	8000be0 <set_spi_command>
	}
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f006 f964 	bl	8007008 <HAL_XSPI_Command>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	check_spi_return(octo_spi_return);
 8000d46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <check_status_register+0x7a>
 8000d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d52:	e006      	b.n	8000d62 <check_status_register+0x88>
	return HAL_XSPI_Receive(octo_spi_handle,  read_buffer, ONE_MINUTE);
 8000d54:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	68b8      	ldr	r0, [r7, #8]
 8000d5c:	f006 fa57 	bl	800720e <HAL_XSPI_Receive>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3768      	adds	r7, #104	@ 0x68
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <write_enable_with_check>:

HAL_StatusTypeDef write_enable_with_check(XSPI_HandleTypeDef *octo_spi_handle, uint8_t QPI_on){
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b098      	sub	sp, #96	@ 0x60
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	uint8_t status_reg_buffer;
	do{
		octo_spi_return = write_enable(octo_spi_handle, &spi_command, QPI_on);
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff79 	bl	8000c76 <write_enable>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		check_spi_return(octo_spi_return);
 8000d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <write_enable_with_check+0x2e>
 8000d92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000d96:	e01f      	b.n	8000dd8 <write_enable_with_check+0x6e>
		
		HAL_DELAY_2500;
 8000d98:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000d9c:	f000 fd8a 	bl	80018b4 <HAL_Delay>
		octo_spi_return = check_status_register(&status_reg_buffer, octo_spi_handle, QPI_on);
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	f107 030b 	add.w	r3, r7, #11
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff96 	bl	8000cda <check_status_register>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		check_spi_return(octo_spi_return);
 8000db4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <write_enable_with_check+0x58>
 8000dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000dc0:	e00a      	b.n	8000dd8 <write_enable_with_check+0x6e>
		
		HAL_DELAY_2500;
 8000dc2:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000dc6:	f000 fd75 	bl	80018b4 <HAL_Delay>
	}while(!(status_reg_buffer & 0b10));
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0d0      	beq.n	8000d76 <write_enable_with_check+0xc>
	return octo_spi_return;
 8000dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3760      	adds	r7, #96	@ 0x60
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <write_in_progress>:

HAL_StatusTypeDef write_in_progress(XSPI_HandleTypeDef *octo_spi_handle, uint8_t QPI_on){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef octo_spi_return;
	uint8_t status_reg_buffer;
	do{
		HAL_DELAY_2500;
 8000dec:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000df0:	f000 fd60 	bl	80018b4 <HAL_Delay>
		octo_spi_return = check_status_register(&status_reg_buffer, octo_spi_handle, QPI_on);
 8000df4:	78fa      	ldrb	r2, [r7, #3]
 8000df6:	f107 030e 	add.w	r3, r7, #14
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff6c 	bl	8000cda <check_status_register>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73fb      	strb	r3, [r7, #15]
		check_spi_return(octo_spi_return);
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <write_in_progress+0x30>
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	e005      	b.n	8000e1c <write_in_progress+0x3c>
	}while((status_reg_buffer & 0b1));
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1e8      	bne.n	8000dec <write_in_progress+0xc>
	return octo_spi_return;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <flush_buffer>:
		}
	}
	return HAL_OK;
}

HAL_StatusTypeDef flush_buffer(XSPI_HandleTypeDef *octo_spi_handle){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0da      	sub	sp, #360	@ 0x168
 8000e28:	af04      	add	r7, sp, #16
 8000e2a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e2e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000e32:	6018      	str	r0, [r3, #0]
	XSPI_RegularCmdTypeDef spi_command;
	uint8_t empty_buffer[256] = {0};
 8000e34:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e38:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e42:	461a      	mov	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f006 fc73 	bl	8007730 <memset>
	set_spi_command(&spi_command, MY_PP, INST_1_WIRE, 0x00, ADDR_1_WIRE, DATA_1_WIRE, PAGE_SIZE - 1, 0);
 8000e4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9303      	str	r3, [sp, #12]
 8000e52:	23ff      	movs	r3, #255	@ 0xff
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	2201      	movs	r2, #1
 8000e66:	2102      	movs	r1, #2
 8000e68:	f7ff feba 	bl	8000be0 <set_spi_command>
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
 8000e6c:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000e70:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e74:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000e78:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	f006 f8c3 	bl	8007008 <HAL_XSPI_Command>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00c      	beq.n	8000ea2 <flush_buffer+0x7e>
 8000e88:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000e8c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e90:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000e94:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	f006 f8b5 	bl	8007008 <HAL_XSPI_Command>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	e00b      	b.n	8000eba <flush_buffer+0x96>
	return HAL_XSPI_Transmit(octo_spi_handle,  empty_buffer, ONE_MINUTE);
 8000ea2:	f107 0108 	add.w	r1, r7, #8
 8000ea6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000eaa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000eae:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f006 f938 	bl	8007128 <HAL_XSPI_Transmit>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <reset>:

HAL_StatusTypeDef reset(XSPI_HandleTypeDef *octo_spi_handle){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09a      	sub	sp, #104	@ 0x68
 8000ec8:	af04      	add	r7, sp, #16
 8000eca:	6078      	str	r0, [r7, #4]
	XSPI_RegularCmdTypeDef spi_command;
	set_spi_command(&spi_command, MY_RSTEN, INST_1_WIRE, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000ecc:	f107 0008 	add.w	r0, r7, #8
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9303      	str	r3, [sp, #12]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2166      	movs	r1, #102	@ 0x66
 8000ee6:	f7ff fe7b 	bl	8000be0 <set_spi_command>
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f006 f887 	bl	8007008 <HAL_XSPI_Command>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d009      	beq.n	8000f14 <reset+0x50>
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f08:	4619      	mov	r1, r3
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f006 f87c 	bl	8007008 <HAL_XSPI_Command>
 8000f10:	4603      	mov	r3, r0
 8000f12:	e05f      	b.n	8000fd4 <reset+0x110>
	set_spi_command(&spi_command, MY_RST, INST_1_WIRE, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000f14:	f107 0008 	add.w	r0, r7, #8
 8000f18:	2300      	movs	r3, #0
 8000f1a:	9303      	str	r3, [sp, #12]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2300      	movs	r3, #0
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2199      	movs	r1, #153	@ 0x99
 8000f2e:	f7ff fe57 	bl	8000be0 <set_spi_command>
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f006 f863 	bl	8007008 <HAL_XSPI_Command>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <reset+0x98>
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f006 f858 	bl	8007008 <HAL_XSPI_Command>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	e03b      	b.n	8000fd4 <reset+0x110>
	set_spi_command(&spi_command, MY_RSTEN, INST_4_WIRES, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000f5c:	f107 0008 	add.w	r0, r7, #8
 8000f60:	2300      	movs	r3, #0
 8000f62:	9303      	str	r3, [sp, #12]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	2203      	movs	r2, #3
 8000f74:	2166      	movs	r1, #102	@ 0x66
 8000f76:	f7ff fe33 	bl	8000be0 <set_spi_command>
	check_spi_return(HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE));
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f006 f83f 	bl	8007008 <HAL_XSPI_Command>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d009      	beq.n	8000fa4 <reset+0xe0>
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f006 f834 	bl	8007008 <HAL_XSPI_Command>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	e017      	b.n	8000fd4 <reset+0x110>
	set_spi_command(&spi_command, MY_RST, INST_4_WIRES, ADDR_NONE, ADDR_NONE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000fa4:	f107 0008 	add.w	r0, r7, #8
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2203      	movs	r2, #3
 8000fbc:	2199      	movs	r1, #153	@ 0x99
 8000fbe:	f7ff fe0f 	bl	8000be0 <set_spi_command>
	return HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f006 f81b 	bl	8007008 <HAL_XSPI_Command>
 8000fd2:	4603      	mov	r3, r0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3758      	adds	r7, #88	@ 0x58
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <erase_sector>:
	return octo_spi_return;
}


// Erase page
HAL_StatusTypeDef erase_sector(XSPI_HandleTypeDef *octo_spi_handle, uint32_t address){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	@ 0x70
 8000fe0:	af04      	add	r7, sp, #16
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	
	uint8_t status_reg_buffer;
	do{
		octo_spi_return = write_enable(octo_spi_handle, &spi_command, 0);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe41 	bl	8000c76 <write_enable>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		check_spi_return(octo_spi_return);
 8000ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <erase_sector+0x2c>
 8001002:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001006:	e058      	b.n	80010ba <erase_sector+0xde>
		HAL_DELAY_2500;
 8001008:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800100c:	f000 fc52 	bl	80018b4 <HAL_Delay>
		octo_spi_return = check_status_register(&status_reg_buffer, octo_spi_handle, 0);
 8001010:	f107 030b 	add.w	r3, r7, #11
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe5e 	bl	8000cda <check_status_register>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		check_spi_return(octo_spi_return);
 8001024:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <erase_sector+0x56>
 800102c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001030:	e043      	b.n	80010ba <erase_sector+0xde>
		HAL_DELAY_2500;
 8001032:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001036:	f000 fc3d 	bl	80018b4 <HAL_Delay>
	}while(!(status_reg_buffer & 0b10));
 800103a:	7afb      	ldrb	r3, [r7, #11]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0d0      	beq.n	8000fe6 <erase_sector+0xa>
	
	HAL_DELAY_2500;
 8001044:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001048:	f000 fc34 	bl	80018b4 <HAL_Delay>
	set_spi_command(&spi_command, MY_SE, INST_1_WIRE, address, ADDR_1_WIRE, DATA_NONE, DATA_NONE, DUMMY_0);
 800104c:	f107 000c 	add.w	r0, r7, #12
 8001050:	2300      	movs	r3, #0
 8001052:	9303      	str	r3, [sp, #12]
 8001054:	2300      	movs	r3, #0
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2300      	movs	r3, #0
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	2120      	movs	r1, #32
 8001068:	f7ff fdba 	bl	8000be0 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f005 ffc6 	bl	8007008 <HAL_XSPI_Command>
 800107c:	4603      	mov	r3, r0
 800107e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	do{
		HAL_DELAY_2500;
 8001082:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001086:	f000 fc15 	bl	80018b4 <HAL_Delay>
		octo_spi_return = check_status_register(&status_reg_buffer, octo_spi_handle, 0);
 800108a:	f107 030b 	add.w	r3, r7, #11
 800108e:	2200      	movs	r2, #0
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fe21 	bl	8000cda <check_status_register>
 8001098:	4603      	mov	r3, r0
 800109a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		check_spi_return(octo_spi_return);
 800109e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <erase_sector+0xd0>
 80010a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010aa:	e006      	b.n	80010ba <erase_sector+0xde>
	}while((status_reg_buffer & 0b1));
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e5      	bne.n	8001082 <erase_sector+0xa6>
	return octo_spi_return;
 80010b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3760      	adds	r7, #96	@ 0x60
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <test_read_n_bytes_single>:



// Simple read tests
HAL_StatusTypeDef test_read_n_bytes_single(uint32_t n, uint8_t *read_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address, UART_HandleTypeDef *huart){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b09e      	sub	sp, #120	@ 0x78
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;


    set_spi_command(&spi_command, MY_READ, INST_1_WIRE, address, ADDR_1_WIRE, DATA_1_WIRE, n, DUMMY_0);
 80010d2:	f107 0014 	add.w	r0, r7, #20
 80010d6:	2300      	movs	r3, #0
 80010d8:	9303      	str	r3, [sp, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	2103      	movs	r1, #3
 80010f0:	f7ff fd76 	bl	8000be0 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f005 ff82 	bl	8007008 <HAL_XSPI_Command>
 8001104:	4603      	mov	r3, r0
 8001106:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	check_spi_return(octo_spi_return);
 800110a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <test_read_n_bytes_single+0x54>
 8001112:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001116:	e016      	b.n	8001146 <test_read_n_bytes_single+0x82>
	
	uart_print((uint8_t *)"READ\r\n", huart);
 8001118:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <test_read_n_bytes_single+0x8c>)
 800111c:	f7ff fcd0 	bl	8000ac0 <uart_print>
	wait_for_button(huart);
 8001120:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001122:	f7ff fd41 	bl	8000ba8 <wait_for_button>
	octo_spi_return = HAL_XSPI_Receive(octo_spi_handle,  read_buffer, ONE_MINUTE);
 8001126:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f006 f86e 	bl	800720e <HAL_XSPI_Receive>
 8001132:	4603      	mov	r3, r0
 8001134:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	read_buffer[n] = 0;
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	return octo_spi_return;
 8001142:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001146:	4618      	mov	r0, r3
 8001148:	3768      	adds	r7, #104	@ 0x68
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	08007850 	.word	0x08007850

08001154 <test_read_n_bytes_dual_1>:

HAL_StatusTypeDef test_read_n_bytes_dual_1(uint32_t n, uint8_t *read_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address, UART_HandleTypeDef *huart){ // Address on one line
 8001154:	b580      	push	{r7, lr}
 8001156:	b09e      	sub	sp, #120	@ 0x78
 8001158:	af04      	add	r7, sp, #16
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;

    set_spi_command(&spi_command, MY_DREAD, INST_1_WIRE, address, ADDR_1_WIRE, DATA_2_WIRES, n, 8);
 8001162:	f107 0014 	add.w	r0, r7, #20
 8001166:	2308      	movs	r3, #8
 8001168:	9303      	str	r3, [sp, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	213b      	movs	r1, #59	@ 0x3b
 8001180:	f7ff fd2e 	bl	8000be0 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f005 ff3a 	bl	8007008 <HAL_XSPI_Command>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	check_spi_return(octo_spi_return);
 800119a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <test_read_n_bytes_dual_1+0x54>
 80011a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80011a6:	e016      	b.n	80011d6 <test_read_n_bytes_dual_1+0x82>
	
	uart_print((uint8_t *)"DREAD\r\n", huart);
 80011a8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80011aa:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <test_read_n_bytes_dual_1+0x8c>)
 80011ac:	f7ff fc88 	bl	8000ac0 <uart_print>
	wait_for_button(huart);
 80011b0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80011b2:	f7ff fcf9 	bl	8000ba8 <wait_for_button>
	octo_spi_return = HAL_XSPI_Receive(octo_spi_handle,  read_buffer, ONE_MINUTE);
 80011b6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f006 f826 	bl	800720e <HAL_XSPI_Receive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	read_buffer[n] = 0;
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	return octo_spi_return;
 80011d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3768      	adds	r7, #104	@ 0x68
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	08007858 	.word	0x08007858

080011e4 <test_read_n_bytes_dual_2>:

HAL_StatusTypeDef test_read_n_bytes_dual_2(uint32_t n, uint8_t *read_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address, UART_HandleTypeDef *huart){ // Address on two lines
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b09e      	sub	sp, #120	@ 0x78
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;

    set_spi_command(&spi_command, MY_2READ, INST_1_WIRE, address, ADDR_2_WIRES, DATA_2_WIRES, n , 4);
 80011f2:	f107 0014 	add.w	r0, r7, #20
 80011f6:	2304      	movs	r3, #4
 80011f8:	9303      	str	r3, [sp, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	21bb      	movs	r1, #187	@ 0xbb
 8001210:	f7ff fce6 	bl	8000be0 <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f005 fef2 	bl	8007008 <HAL_XSPI_Command>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	check_spi_return(octo_spi_return);
 800122a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <test_read_n_bytes_dual_2+0x54>
 8001232:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001236:	e016      	b.n	8001266 <test_read_n_bytes_dual_2+0x82>
	
	uart_print((uint8_t *)"2READ\r\n", huart);
 8001238:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800123a:	480d      	ldr	r0, [pc, #52]	@ (8001270 <test_read_n_bytes_dual_2+0x8c>)
 800123c:	f7ff fc40 	bl	8000ac0 <uart_print>
	wait_for_button(huart);
 8001240:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001242:	f7ff fcb1 	bl	8000ba8 <wait_for_button>
	octo_spi_return = HAL_XSPI_Receive(octo_spi_handle, read_buffer, ONE_MINUTE);
 8001246:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f005 ffde 	bl	800720e <HAL_XSPI_Receive>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	read_buffer[n] = 0;
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	return octo_spi_return;
 8001262:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001266:	4618      	mov	r0, r3
 8001268:	3768      	adds	r7, #104	@ 0x68
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08007860 	.word	0x08007860

08001274 <test_write_n_bytes_single>:

	return octo_spi_return;
}

//////// WRITING ////////
HAL_StatusTypeDef test_write_n_bytes_single(uint32_t n, uint8_t *write_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address, UART_HandleTypeDef *huart){
 8001274:	b580      	push	{r7, lr}
 8001276:	b09e      	sub	sp, #120	@ 0x78
 8001278:	af04      	add	r7, sp, #16
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef octo_spi_return;
    XSPI_RegularCmdTypeDef spi_command;

    uart_print((uint8_t *)"WREN - SPI\r\n", huart);
 8001282:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001284:	482b      	ldr	r0, [pc, #172]	@ (8001334 <test_write_n_bytes_single+0xc0>)
 8001286:	f7ff fc1b 	bl	8000ac0 <uart_print>
    octo_spi_return = write_enable_with_check(octo_spi_handle, QPI_OFF);
 800128a:	2100      	movs	r1, #0
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fd6c 	bl	8000d6a <write_enable_with_check>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67


    check_spi_return(octo_spi_return);
 8001298:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <test_write_n_bytes_single+0x32>
 80012a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012a4:	e042      	b.n	800132c <test_write_n_bytes_single+0xb8>


    set_spi_command(&spi_command, MY_PP, INST_1_WIRE, address, ADDR_1_WIRE, DATA_1_WIRE, n, DUMMY_0);
 80012a6:	f107 0014 	add.w	r0, r7, #20
 80012aa:	2300      	movs	r3, #0
 80012ac:	9303      	str	r3, [sp, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	2102      	movs	r1, #2
 80012c4:	f7ff fc8c 	bl	8000be0 <set_spi_command>
    octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80012d0:	4619      	mov	r1, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f005 fe98 	bl	8007008 <HAL_XSPI_Command>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    check_spi_return(octo_spi_return);
 80012de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <test_write_n_bytes_single+0x78>
 80012e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012ea:	e01f      	b.n	800132c <test_write_n_bytes_single+0xb8>

    uart_print((uint8_t *)"Page Program - SPI\r\n", huart);
 80012ec:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80012ee:	4812      	ldr	r0, [pc, #72]	@ (8001338 <test_write_n_bytes_single+0xc4>)
 80012f0:	f7ff fbe6 	bl	8000ac0 <uart_print>
    wait_for_button(huart);
 80012f4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80012f6:	f7ff fc57 	bl	8000ba8 <wait_for_button>
    octo_spi_return = HAL_XSPI_Transmit(octo_spi_handle,  write_buffer, ONE_MINUTE);
 80012fa:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f005 ff11 	bl	8007128 <HAL_XSPI_Transmit>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    check_spi_return(octo_spi_return);
 800130c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <test_write_n_bytes_single+0xa6>
 8001314:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001318:	e008      	b.n	800132c <test_write_n_bytes_single+0xb8>

    octo_spi_return = write_in_progress(octo_spi_handle, QPI_OFF);
 800131a:	2100      	movs	r1, #0
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fd5f 	bl	8000de0 <write_in_progress>
 8001322:	4603      	mov	r3, r0
 8001324:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    return octo_spi_return;
 8001328:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800132c:	4618      	mov	r0, r3
 800132e:	3768      	adds	r7, #104	@ 0x68
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	0800789c 	.word	0x0800789c
 8001338:	080078ac 	.word	0x080078ac

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0c0      	sub	sp, #256	@ 0x100
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	22d0      	movs	r2, #208	@ 0xd0
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f006 f9df 	bl	8007730 <memset>
  if(hxspi->Instance==OCTOSPI1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a4c      	ldr	r2, [pc, #304]	@ (80014a8 <HAL_XSPI_MspInit+0x15c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	f040 8090 	bne.w	800149e <HAL_XSPI_MspInit+0x152>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0302 	mov.w	r3, #2
 8001386:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_HCLK;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fd1d 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_XSPI_MspInit+0x58>
    {
      Error_Handler();
 80013a0:	f7ff fb88 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80013a4:	4b41      	ldr	r3, [pc, #260]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013aa:	4a40      	ldr	r2, [pc, #256]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80013b4:	4b3d      	ldr	r3, [pc, #244]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c8:	4a38      	ldr	r2, [pc, #224]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d2:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e6:	4a31      	ldr	r2, [pc, #196]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f0:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 80013f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 8001400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001404:	4a29      	ldr	r2, [pc, #164]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800140e:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <HAL_XSPI_MspInit+0x160>)
 8001410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> OCTOSPI1_IO3
    PB2     ------> OCTOSPI1_CLK
    PB10     ------> OCTOSPI1_NCS
    PC10     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 800141c:	f240 430c 	movw	r3, #1036	@ 0x40c
 8001420:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8001436:	2309      	movs	r3, #9
 8001438:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001440:	4619      	mov	r1, r3
 8001442:	481b      	ldr	r0, [pc, #108]	@ (80014b0 <HAL_XSPI_MspInit+0x164>)
 8001444:	f000 fbbe 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8001460:	2309      	movs	r3, #9
 8001462:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800146a:	4619      	mov	r1, r3
 800146c:	4811      	ldr	r0, [pc, #68]	@ (80014b4 <HAL_XSPI_MspInit+0x168>)
 800146e:	f000 fba9 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001472:	f240 4304 	movw	r3, #1028	@ 0x404
 8001476:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 800148c:	2309      	movs	r3, #9
 800148e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001496:	4619      	mov	r1, r3
 8001498:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <HAL_XSPI_MspInit+0x16c>)
 800149a:	f000 fb93 	bl	8001bc4 <HAL_GPIO_Init>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 800149e:	bf00      	nop
 80014a0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	47001400 	.word	0x47001400
 80014ac:	44020c00 	.word	0x44020c00
 80014b0:	42020800 	.word	0x42020800
 80014b4:	42020000 	.word	0x42020000
 80014b8:	42020400 	.word	0x42020400

080014bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0be      	sub	sp, #248	@ 0xf8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	22d0      	movs	r2, #208	@ 0xd0
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f006 f927 	bl	8007730 <memset>
  if(huart->Instance==USART2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <HAL_UART_MspInit+0xc4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d144      	bne.n	8001576 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014ec:	f04f 0202 	mov.w	r2, #2
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fc67 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800150c:	f7ff fad2 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_UART_MspInit+0xc8>)
 8001512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001516:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <HAL_UART_MspInit+0xc8>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_UART_MspInit+0xc8>)
 8001522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <HAL_UART_MspInit+0xc8>)
 8001530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001534:	4a13      	ldr	r2, [pc, #76]	@ (8001584 <HAL_UART_MspInit+0xc8>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_UART_MspInit+0xc8>)
 8001540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154c:	230c      	movs	r3, #12
 800154e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001564:	2307      	movs	r3, #7
 8001566:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	@ (8001588 <HAL_UART_MspInit+0xcc>)
 8001572:	f000 fb27 	bl	8001bc4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001576:	bf00      	nop
 8001578:	37f8      	adds	r7, #248	@ 0xf8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40004400 	.word	0x40004400
 8001584:	44020c00 	.word	0x44020c00
 8001588:	42020000 	.word	0x42020000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <NMI_Handler+0x4>

08001594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <MemManage_Handler+0x4>

080015a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e2:	f000 f947 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015f2:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <SystemInit+0xdc>)
 80015f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f8:	4a33      	ldr	r2, [pc, #204]	@ (80016c8 <SystemInit+0xdc>)
 80015fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001602:	4b32      	ldr	r3, [pc, #200]	@ (80016cc <SystemInit+0xe0>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001608:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <SystemInit+0xe0>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800160e:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <SystemInit+0xe0>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001614:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <SystemInit+0xe0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	492c      	ldr	r1, [pc, #176]	@ (80016cc <SystemInit+0xe0>)
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <SystemInit+0xe4>)
 800161c:	4013      	ands	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001620:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <SystemInit+0xe0>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001626:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <SystemInit+0xe0>)
 8001628:	2200      	movs	r2, #0
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800162c:	4b27      	ldr	r3, [pc, #156]	@ (80016cc <SystemInit+0xe0>)
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <SystemInit+0xe0>)
 8001634:	4a27      	ldr	r2, [pc, #156]	@ (80016d4 <SystemInit+0xe8>)
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001638:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <SystemInit+0xe0>)
 800163a:	2200      	movs	r2, #0
 800163c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <SystemInit+0xe0>)
 8001640:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <SystemInit+0xe8>)
 8001642:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001644:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <SystemInit+0xe0>)
 8001646:	2200      	movs	r2, #0
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <SystemInit+0xe0>)
 800164c:	4a21      	ldr	r2, [pc, #132]	@ (80016d4 <SystemInit+0xe8>)
 800164e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001650:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <SystemInit+0xe0>)
 8001652:	2200      	movs	r2, #0
 8001654:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <SystemInit+0xe0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <SystemInit+0xe0>)
 800165c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001660:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <SystemInit+0xe0>)
 8001664:	2200      	movs	r2, #0
 8001666:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <SystemInit+0xdc>)
 800166a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800166e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <SystemInit+0xec>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001678:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001680:	d003      	beq.n	800168a <SystemInit+0x9e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001688:	d117      	bne.n	80016ba <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <SystemInit+0xec>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <SystemInit+0xec>)
 8001698:	4a10      	ldr	r2, [pc, #64]	@ (80016dc <SystemInit+0xf0>)
 800169a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <SystemInit+0xec>)
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <SystemInit+0xf4>)
 80016a0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <SystemInit+0xec>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <SystemInit+0xec>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <SystemInit+0xec>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a09      	ldr	r2, [pc, #36]	@ (80016d8 <SystemInit+0xec>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	61d3      	str	r3, [r2, #28]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	44020c00 	.word	0x44020c00
 80016d0:	eae2eae3 	.word	0xeae2eae3
 80016d4:	01010280 	.word	0x01010280
 80016d8:	40022000 	.word	0x40022000
 80016dc:	08192a3b 	.word	0x08192a3b
 80016e0:	4c5d6e7f 	.word	0x4c5d6e7f

080016e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016e4:	480d      	ldr	r0, [pc, #52]	@ (800171c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e8:	f7ff ff80 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001712:	f006 f815 	bl	8007740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001716:	f7fe ff83 	bl	8000620 <main>

0800171a <LoopForever>:

LoopForever:
    b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
  ldr   r0, =_estack
 800171c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001728:	08007924 	.word	0x08007924
  ldr r2, =_sbss
 800172c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001730:	2000011c 	.word	0x2000011c

08001734 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_IRQHandler>
	...

08001738 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 f96c 	bl	8001a1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001742:	f001 f9bd 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <HAL_Init+0x44>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	490b      	ldr	r1, [pc, #44]	@ (8001780 <HAL_Init+0x48>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_Init+0x4c>)
 800175a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800175c:	2004      	movs	r0, #4
 800175e:	f000 f9a3 	bl	8001aa8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001762:	200f      	movs	r0, #15
 8001764:	f000 f810 	bl	8001788 <HAL_InitTick>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e002      	b.n	8001778 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001772:	f7ff fde3 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	44020c00 	.word	0x44020c00
 8001780:	080078d4 	.word	0x080078d4
 8001784:	20000000 	.word	0x20000000

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001794:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <HAL_InitTick+0xdc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e05c      	b.n	800185a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80017a0:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <HAL_InitTick+0xe0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d10c      	bne.n	80017c6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80017ac:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <HAL_InitTick+0xe4>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001864 <HAL_InitTick+0xdc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e037      	b.n	8001836 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80017c6:	f000 f9c7 	bl	8001b58 <HAL_SYSTICK_GetCLKSourceConfig>
 80017ca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d023      	beq.n	800181a <HAL_InitTick+0x92>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d82d      	bhi.n	8001834 <HAL_InitTick+0xac>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_InitTick+0x5e>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d00d      	beq.n	8001800 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80017e4:	e026      	b.n	8001834 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80017e6:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_InitTick+0xe4>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <HAL_InitTick+0xdc>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80017f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	60fb      	str	r3, [r7, #12]
        break;
 80017fe:	e01a      	b.n	8001836 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_InitTick+0xdc>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180a:	fbb3 f3f2 	udiv	r3, r3, r2
 800180e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	60fb      	str	r3, [r7, #12]
        break;
 8001818:	e00d      	b.n	8001836 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0xdc>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001824:	fbb3 f3f2 	udiv	r3, r3, r2
 8001828:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	60fb      	str	r3, [r7, #12]
        break;
 8001832:	e000      	b.n	8001836 <HAL_InitTick+0xae>
        break;
 8001834:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f914 	bl	8001a64 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e009      	b.n	800185a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001846:	2200      	movs	r2, #0
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	f04f 30ff 	mov.w	r0, #4294967295
 800184e:	f000 f8ef 	bl	8001a30 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001852:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <HAL_InitTick+0xe8>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008
 8001868:	e000e010 	.word	0xe000e010
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	20000118 	.word	0x20000118

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000118 	.word	0x20000118

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	@ (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	@ (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	@ 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff6a 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3e:	f7ff ff81 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001a42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f7ff ffb3 	bl	80019b4 <NVIC_EncodePriority>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff82 	bl	8001960 <__NVIC_SetPriority>
}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00d      	b.n	8001a96 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_SYSTICK_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_SYSTICK_Config+0x40>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_SYSTICK_Config+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <HAL_SYSTICK_Config+0x40>)
 8001a8e:	f043 0303 	orr.w	r3, r3, #3
 8001a92:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d844      	bhi.n	8001b40 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001adf 	.word	0x08001adf
 8001ac0:	08001afd 	.word	0x08001afd
 8001ac4:	08001b1f 	.word	0x08001b1f
 8001ac8:	08001b41 	.word	0x08001b41
 8001acc:	08001ad1 	.word	0x08001ad1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6013      	str	r3, [r2, #0]
      break;
 8001adc:	e031      	b.n	8001b42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001aea:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001af0:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001af2:	f023 030c 	bic.w	r3, r3, #12
 8001af6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001afa:	e022      	b.n	8001b42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b0e:	f023 030c 	bic.w	r3, r3, #12
 8001b12:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001b1c:	e011      	b.n	8001b42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b30:	f023 030c 	bic.w	r3, r3, #12
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001b3e:	e000      	b.n	8001b42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b40:	bf00      	nop
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010
 8001b54:	44020c00 	.word	0x44020c00

08001b58 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001b5e:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	e01e      	b.n	8001bae <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001b72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d00f      	beq.n	8001ba2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d80f      	bhi.n	8001ba8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d003      	beq.n	8001b9c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001b94:	e008      	b.n	8001ba8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
        break;
 8001b9a:	e008      	b.n	8001bae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
        break;
 8001ba0:	e005      	b.n	8001bae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	607b      	str	r3, [r7, #4]
        break;
 8001ba6:	e002      	b.n	8001bae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
        break;
 8001bac:	bf00      	nop
    }
  }
  return systick_source;
 8001bae:	687b      	ldr	r3, [r7, #4]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e010 	.word	0xe000e010
 8001bc0:	44020c00 	.word	0x44020c00

08001bc4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bd2:	e142      	b.n	8001e5a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8134 	beq.w	8001e54 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x38>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b12      	cmp	r3, #18
 8001bfa:	d125      	bne.n	8001c48 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	6979      	ldr	r1, [r7, #20]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d00b      	beq.n	8001c9c <HAL_GPIO_Init+0xd8>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d007      	beq.n	8001c9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c90:	2b11      	cmp	r3, #17
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d130      	bne.n	8001cfe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 0201 	and.w	r2, r3, #1
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d109      	bne.n	8001d1e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d11b      	bne.n	8001d4e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d017      	beq.n	8001d4e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4013      	ands	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d07c      	beq.n	8001e54 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d5a:	4a47      	ldr	r2, [pc, #284]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3318      	adds	r3, #24
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0a9a      	lsrs	r2, r3, #10
 8001d82:	4b3e      	ldr	r3, [pc, #248]	@ (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	f002 0203 	and.w	r2, r2, #3
 8001d8c:	00d2      	lsls	r2, r2, #3
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d96:	4938      	ldr	r1, [pc, #224]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3318      	adds	r3, #24
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001da4:	4b34      	ldr	r3, [pc, #208]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001dce:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001df2:	4a21      	ldr	r2, [pc, #132]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dfe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4013      	ands	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e1e:	4a16      	ldr	r2, [pc, #88]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e2c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_GPIO_Init+0x2b4>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	3301      	adds	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f aeb5 	bne.w	8001bd4 <HAL_GPIO_Init+0x10>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	44022000 	.word	0x44022000
 8001e7c:	002f7f7f 	.word	0x002f7f7f

08001e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ece:	887a      	ldrh	r2, [r7, #2]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f000 bc28 	b.w	8002744 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef4:	4b94      	ldr	r3, [pc, #592]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f003 0318 	and.w	r3, r3, #24
 8001efc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001efe:	4b92      	ldr	r3, [pc, #584]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05b      	beq.n	8001fcc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x46>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b18      	cmp	r3, #24
 8001f1e:	d114      	bne.n	8001f4a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d111      	bne.n	8001f4a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f000 bc08 	b.w	8002744 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001f34:	4b84      	ldr	r3, [pc, #528]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	4981      	ldr	r1, [pc, #516]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001f48:	e040      	b.n	8001fcc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d023      	beq.n	8001f9a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f52:	4b7d      	ldr	r3, [pc, #500]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a7c      	ldr	r2, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fc9d 	bl	800189c <HAL_GetTick>
 8001f62:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001f66:	f7ff fc99 	bl	800189c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e3e5      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f78:	4b73      	ldr	r3, [pc, #460]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001f84:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	496d      	ldr	r1, [pc, #436]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	618b      	str	r3, [r1, #24]
 8001f98:	e018      	b.n	8001fcc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fc79 	bl	800189c <HAL_GetTick>
 8001faa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001fae:	f7ff fc75 	bl	800189c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e3c1      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001fc0:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a0 	beq.w	800211a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_OscConfig+0x10c>
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b18      	cmp	r3, #24
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 8092 	bne.w	800211a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e3a4      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x132>
 8002004:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e058      	b.n	80020c4 <HAL_RCC_OscConfig+0x1e4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d112      	bne.n	8002040 <HAL_RCC_OscConfig+0x160>
 800201a:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a4a      	ldr	r2, [pc, #296]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a47      	ldr	r2, [pc, #284]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 800202c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b45      	ldr	r3, [pc, #276]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a44      	ldr	r2, [pc, #272]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002038:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e041      	b.n	80020c4 <HAL_RCC_OscConfig+0x1e4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002048:	d112      	bne.n	8002070 <HAL_RCC_OscConfig+0x190>
 800204a:	4b3f      	ldr	r3, [pc, #252]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3e      	ldr	r2, [pc, #248]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b3c      	ldr	r3, [pc, #240]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3b      	ldr	r2, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 800205c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a38      	ldr	r2, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e029      	b.n	80020c4 <HAL_RCC_OscConfig+0x1e4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1c0>
 800207a:	4b33      	ldr	r3, [pc, #204]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a32      	ldr	r2, [pc, #200]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2f      	ldr	r2, [pc, #188]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 800208c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2c      	ldr	r2, [pc, #176]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e011      	b.n	80020c4 <HAL_RCC_OscConfig+0x1e4>
 80020a0:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a28      	ldr	r2, [pc, #160]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b26      	ldr	r3, [pc, #152]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a25      	ldr	r2, [pc, #148]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a22      	ldr	r2, [pc, #136]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 80020be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff fbe6 	bl	800189c <HAL_GetTick>
 80020d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fbe2 	bl	800189c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	@ 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e32e      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x1f4>
 80020f2:	e012      	b.n	800211a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fbd2 	bl	800189c <HAL_GetTick>
 80020f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fbce 	bl	800189c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e31a      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210e:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <HAL_RCC_OscConfig+0x268>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 809a 	beq.w	800225c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x25a>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b18      	cmp	r3, #24
 8002132:	d149      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d146      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d104      	bne.n	800214c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e2fe      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
 8002146:	bf00      	nop
 8002148:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11c      	bne.n	800218c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002152:	4b9a      	ldr	r3, [pc, #616]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0218 	and.w	r2, r3, #24
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	d014      	beq.n	800218c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002162:	4b96      	ldr	r3, [pc, #600]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0218 	bic.w	r2, r3, #24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	4993      	ldr	r1, [pc, #588]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002174:	f000 fdd0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002178:	4b91      	ldr	r3, [pc, #580]	@ (80023c0 <HAL_RCC_OscConfig+0x4e0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fb03 	bl	8001788 <HAL_InitTick>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e2db      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fb86 	bl	800189c <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002194:	f7ff fb82 	bl	800189c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e2ce      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a6:	4b85      	ldr	r3, [pc, #532]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80021b2:	4b82      	ldr	r3, [pc, #520]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	497e      	ldr	r1, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80021c6:	e049      	b.n	800225c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02c      	beq.n	800222a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80021d0:	4b7a      	ldr	r3, [pc, #488]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0218 	bic.w	r2, r3, #24
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	4977      	ldr	r1, [pc, #476]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80021e2:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7ff fb55 	bl	800189c <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021f6:	f7ff fb51 	bl	800189c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e29d      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002208:	4b6c      	ldr	r3, [pc, #432]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002214:	4b69      	ldr	r3, [pc, #420]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	4966      	ldr	r1, [pc, #408]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	610b      	str	r3, [r1, #16]
 8002228:	e018      	b.n	800225c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222a:	4b64      	ldr	r3, [pc, #400]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a63      	ldr	r2, [pc, #396]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7ff fb31 	bl	800189c <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800223e:	f7ff fb2d 	bl	800189c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e279      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002250:	4b5a      	ldr	r3, [pc, #360]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01c      	beq.n	80022aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002270:	4b52      	ldr	r3, [pc, #328]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002276:	4a51      	ldr	r2, [pc, #324]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002278:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800227c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff fb0c 	bl	800189c <HAL_GetTick>
 8002284:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002288:	f7ff fb08 	bl	800189c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e254      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800229a:	4b48      	ldr	r3, [pc, #288]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800229c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ef      	beq.n	8002288 <HAL_RCC_OscConfig+0x3a8>
 80022a8:	e01b      	b.n	80022e2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022aa:	4b44      	ldr	r3, [pc, #272]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022b0:	4a42      	ldr	r2, [pc, #264]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7ff faef 	bl	800189c <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80022c2:	f7ff faeb 	bl	800189c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e237      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80022d4:	4b39      	ldr	r3, [pc, #228]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ef      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80d2 	beq.w	8002494 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80022f0:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_OscConfig+0x4e4>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d118      	bne.n	800232e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80022fc:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_RCC_OscConfig+0x4e4>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	4a30      	ldr	r2, [pc, #192]	@ (80023c4 <HAL_RCC_OscConfig+0x4e4>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002308:	f7ff fac8 	bl	800189c <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002310:	f7ff fac4 	bl	800189c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e210      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <HAL_RCC_OscConfig+0x4e4>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d108      	bne.n	8002348 <HAL_RCC_OscConfig+0x468>
 8002336:	4b21      	ldr	r3, [pc, #132]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800233c:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002346:	e074      	b.n	8002432 <HAL_RCC_OscConfig+0x552>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d118      	bne.n	8002382 <HAL_RCC_OscConfig+0x4a2>
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002356:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002360:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002366:	4a15      	ldr	r2, [pc, #84]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800236c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002370:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002376:	4a11      	ldr	r2, [pc, #68]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002380:	e057      	b.n	8002432 <HAL_RCC_OscConfig+0x552>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d11e      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4e8>
 800238a:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800238c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002390:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800239a:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800239c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023a0:	4a06      	ldr	r2, [pc, #24]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80023a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80023ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023b0:	4a02      	ldr	r2, [pc, #8]	@ (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x552>
 80023bc:	44020c00 	.word	0x44020c00
 80023c0:	20000004 	.word	0x20000004
 80023c4:	44020800 	.word	0x44020800
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b85      	cmp	r3, #133	@ 0x85
 80023ce:	d118      	bne.n	8002402 <HAL_RCC_OscConfig+0x522>
 80023d0:	4ba2      	ldr	r3, [pc, #648]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80023d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d6:	4aa1      	ldr	r2, [pc, #644]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023e0:	4b9e      	ldr	r3, [pc, #632]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80023e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e6:	4a9d      	ldr	r2, [pc, #628]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80023e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023f0:	4b9a      	ldr	r3, [pc, #616]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80023f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023f6:	4a99      	ldr	r2, [pc, #612]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002400:	e017      	b.n	8002432 <HAL_RCC_OscConfig+0x552>
 8002402:	4b96      	ldr	r3, [pc, #600]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002408:	4a94      	ldr	r2, [pc, #592]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002412:	4b92      	ldr	r3, [pc, #584]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002418:	4a90      	ldr	r2, [pc, #576]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002422:	4b8e      	ldr	r3, [pc, #568]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002428:	4a8c      	ldr	r2, [pc, #560]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800242a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800242e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7ff fa2f 	bl	800189c <HAL_GetTick>
 800243e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7ff fa2b 	bl	800189c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e175      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002458:	4b80      	ldr	r3, [pc, #512]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800245a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ed      	beq.n	8002442 <HAL_RCC_OscConfig+0x562>
 8002466:	e015      	b.n	8002494 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7ff fa18 	bl	800189c <HAL_GetTick>
 800246c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7ff fa14 	bl	800189c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e15e      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002486:	4b75      	ldr	r3, [pc, #468]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ed      	bne.n	8002470 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d036      	beq.n	800250e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d019      	beq.n	80024dc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a8:	4b6c      	ldr	r3, [pc, #432]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6b      	ldr	r2, [pc, #428]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80024ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7ff f9f2 	bl	800189c <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80024bc:	f7ff f9ee 	bl	800189c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e13a      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024ce:	4b63      	ldr	r3, [pc, #396]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x5dc>
 80024da:	e018      	b.n	800250e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024dc:	4b5f      	ldr	r3, [pc, #380]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5e      	ldr	r2, [pc, #376]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80024e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7ff f9d8 	bl	800189c <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80024f0:	f7ff f9d4 	bl	800189c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e120      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002502:	4b56      	ldr	r3, [pc, #344]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8115 	beq.w	8002742 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b18      	cmp	r3, #24
 800251c:	f000 80af 	beq.w	800267e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	2b02      	cmp	r3, #2
 8002526:	f040 8086 	bne.w	8002636 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800252a:	4b4c      	ldr	r3, [pc, #304]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4b      	ldr	r2, [pc, #300]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7ff f9b1 	bl	800189c <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800253e:	f7ff f9ad 	bl	800189c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0f9      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002550:	4b42      	ldr	r3, [pc, #264]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800255c:	4b3f      	ldr	r3, [pc, #252]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002564:	f023 0303 	bic.w	r3, r3, #3
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002570:	0212      	lsls	r2, r2, #8
 8002572:	430a      	orrs	r2, r1
 8002574:	4939      	ldr	r1, [pc, #228]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	628b      	str	r3, [r1, #40]	@ 0x28
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257e:	3b01      	subs	r3, #1
 8002580:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	3b01      	subs	r3, #1
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	b29b      	uxth	r3, r3
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	3b01      	subs	r3, #1
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	3b01      	subs	r3, #1
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80025aa:	492c      	ldr	r1, [pc, #176]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80025b0:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	4a29      	ldr	r2, [pc, #164]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025b6:	f023 0310 	bic.w	r3, r3, #16
 80025ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	4a26      	ldr	r2, [pc, #152]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ca:	4a24      	ldr	r2, [pc, #144]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025cc:	f043 0310 	orr.w	r3, r3, #16
 80025d0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80025d2:	4b22      	ldr	r3, [pc, #136]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	f023 020c 	bic.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	491f      	ldr	r1, [pc, #124]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	f023 0220 	bic.w	r2, r3, #32
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f0:	491a      	ldr	r1, [pc, #104]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	4a18      	ldr	r2, [pc, #96]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002600:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a15      	ldr	r2, [pc, #84]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002608:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff f945 	bl	800189c <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002616:	f7ff f941 	bl	800189c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e08d      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x736>
 8002634:	e085      	b.n	8002742 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a08      	ldr	r2, [pc, #32]	@ (800265c <HAL_RCC_OscConfig+0x77c>)
 800263c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff f92b 	bl	800189c <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800264a:	f7ff f927 	bl	800189c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d903      	bls.n	8002660 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e073      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
 800265c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002660:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800266c:	4b37      	ldr	r3, [pc, #220]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	4a36      	ldr	r2, [pc, #216]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 8002672:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	6293      	str	r3, [r2, #40]	@ 0x28
 800267c:	e061      	b.n	8002742 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800267e:	4b33      	ldr	r3, [pc, #204]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 8002680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002682:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002684:	4b31      	ldr	r3, [pc, #196]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 8002686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002688:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	2b01      	cmp	r3, #1
 8002690:	d031      	beq.n	80026f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d12a      	bne.n	80026f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d122      	bne.n	80026f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ba:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d11a      	bne.n	80026f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0a5b      	lsrs	r3, r3, #9
 80026c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026cc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d111      	bne.n	80026f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d108      	bne.n	80026f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0e1b      	lsrs	r3, r3, #24
 80026e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e024      	b.n	8002744 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80026fa:	4b14      	ldr	r3, [pc, #80]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 80026fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002708:	429a      	cmp	r2, r3
 800270a:	d01a      	beq.n	8002742 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800270c:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	4a0e      	ldr	r2, [pc, #56]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 8002712:	f023 0310 	bic.w	r3, r3, #16
 8002716:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7ff f8c0 	bl	800189c <HAL_GetTick>
 800271c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800271e:	bf00      	nop
 8002720:	f7ff f8bc 	bl	800189c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4293      	cmp	r3, r2
 800272a:	d0f9      	beq.n	8002720 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002730:	4a06      	ldr	r2, [pc, #24]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	4a04      	ldr	r2, [pc, #16]	@ (800274c <HAL_RCC_OscConfig+0x86c>)
 800273c:	f043 0310 	orr.w	r3, r3, #16
 8002740:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	44020c00 	.word	0x44020c00

08002750 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e19e      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b83      	ldr	r3, [pc, #524]	@ (8002974 <HAL_RCC_ClockConfig+0x224>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d910      	bls.n	8002794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b80      	ldr	r3, [pc, #512]	@ (8002974 <HAL_RCC_ClockConfig+0x224>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	497e      	ldr	r1, [pc, #504]	@ (8002974 <HAL_RCC_ClockConfig+0x224>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b7c      	ldr	r3, [pc, #496]	@ (8002974 <HAL_RCC_ClockConfig+0x224>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e186      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d012      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	4b74      	ldr	r3, [pc, #464]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d909      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80027b2:	4b71      	ldr	r3, [pc, #452]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	496d      	ldr	r1, [pc, #436]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	4b68      	ldr	r3, [pc, #416]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d909      	bls.n	80027f8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80027e4:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4961      	ldr	r1, [pc, #388]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	4b5b      	ldr	r3, [pc, #364]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002810:	429a      	cmp	r2, r3
 8002812:	d908      	bls.n	8002826 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002814:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4955      	ldr	r1, [pc, #340]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002822:	4313      	orrs	r3, r2
 8002824:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d010      	beq.n	8002854 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	4b50      	ldr	r3, [pc, #320]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	429a      	cmp	r2, r3
 8002840:	d908      	bls.n	8002854 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002842:	4b4d      	ldr	r3, [pc, #308]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	494a      	ldr	r1, [pc, #296]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002850:	4313      	orrs	r3, r2
 8002852:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8093 	beq.w	8002988 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800286a:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d121      	bne.n	80028ba <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e113      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	4b3d      	ldr	r3, [pc, #244]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e107      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800289a:	4b37      	ldr	r3, [pc, #220]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0fb      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028aa:	4b33      	ldr	r3, [pc, #204]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0f3      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80028ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	492c      	ldr	r1, [pc, #176]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe ffe6 	bl	800189c <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d112      	bne.n	8002900 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe ffde 	bl	800189c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e0d7      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f2:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 0318 	and.w	r3, r3, #24
 80028fa:	2b18      	cmp	r3, #24
 80028fc:	d1ee      	bne.n	80028dc <HAL_RCC_ClockConfig+0x18c>
 80028fe:	e043      	b.n	8002988 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d112      	bne.n	800292e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800290a:	f7fe ffc7 	bl	800189c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0c0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002920:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f003 0318 	and.w	r3, r3, #24
 8002928:	2b10      	cmp	r3, #16
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_ClockConfig+0x1ba>
 800292c:	e02c      	b.n	8002988 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d122      	bne.n	800297c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7fe ffb0 	bl	800189c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0a9      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800294e:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x228>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 0318 	and.w	r3, r3, #24
 8002956:	2b08      	cmp	r3, #8
 8002958:	d1ee      	bne.n	8002938 <HAL_RCC_ClockConfig+0x1e8>
 800295a:	e015      	b.n	8002988 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe ff9e 	bl	800189c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d906      	bls.n	800297c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e097      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
 8002972:	bf00      	nop
 8002974:	40022000 	.word	0x40022000
 8002978:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800297c:	4b4b      	ldr	r3, [pc, #300]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 0318 	and.w	r3, r3, #24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e9      	bne.n	800295c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4b44      	ldr	r3, [pc, #272]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d208      	bcs.n	80029b6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80029a4:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 020f 	bic.w	r2, r3, #15
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	493e      	ldr	r1, [pc, #248]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ab0 <HAL_RCC_ClockConfig+0x360>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d210      	bcs.n	80029e6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab0 <HAL_RCC_ClockConfig+0x360>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 020f 	bic.w	r2, r3, #15
 80029cc:	4938      	ldr	r1, [pc, #224]	@ (8002ab0 <HAL_RCC_ClockConfig+0x360>)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d4:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <HAL_RCC_ClockConfig+0x360>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e05d      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d208      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002a02:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4927      	ldr	r1, [pc, #156]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d209      	bcs.n	8002a46 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002a32:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	491a      	ldr	r1, [pc, #104]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d209      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a78:	f000 f822 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x35c>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490b      	ldr	r1, [pc, #44]	@ (8002ab4 <HAL_RCC_ClockConfig+0x364>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <HAL_RCC_ClockConfig+0x368>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_RCC_ClockConfig+0x36c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fe76 	bl	8001788 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	44020c00 	.word	0x44020c00
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	080078d4 	.word	0x080078d4
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	20000004 	.word	0x20000004

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	@ 0x24
 8002ac4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ac6:	4b8c      	ldr	r3, [pc, #560]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0318 	and.w	r3, r3, #24
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ad2:	4b8a      	ldr	r3, [pc, #552]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x23c>)
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e107      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad8:	4b87      	ldr	r3, [pc, #540]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 0318 	and.w	r3, r3, #24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002ae4:	4b84      	ldr	r3, [pc, #528]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002af0:	4b81      	ldr	r3, [pc, #516]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	4a81      	ldr	r2, [pc, #516]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x240>)
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e0f1      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002b04:	4b7e      	ldr	r3, [pc, #504]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	e0ee      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0318 	and.w	r3, r3, #24
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d102      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b16:	4b7b      	ldr	r3, [pc, #492]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x244>)
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e0e5      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b1c:	4b76      	ldr	r3, [pc, #472]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 0318 	and.w	r3, r3, #24
 8002b24:	2b18      	cmp	r3, #24
 8002b26:	f040 80dd 	bne.w	8002ce4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b2a:	4b73      	ldr	r3, [pc, #460]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002b34:	4b70      	ldr	r3, [pc, #448]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b40:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b64:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80b7 	beq.w	8002cde <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0xbe>
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d056      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x16a>
 8002b7c:	e077      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02d      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	08db      	lsrs	r3, r3, #3
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	4a5a      	ldr	r2, [pc, #360]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bb4:	4b50      	ldr	r3, [pc, #320]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bc8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x248>
 8002bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002be4:	e065      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002d0c <HAL_RCC_GetSysClockFreq+0x24c>
 8002bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c08:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c0c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x248>
 8002c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002c28:	e043      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c34:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002d10 <HAL_RCC_GetSysClockFreq+0x250>
 8002c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c50:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x248>
 8002c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002c6c:	e021      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c78:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d14 <HAL_RCC_GetSysClockFreq+0x254>
 8002c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c80:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c90:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c94:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x248>
 8002c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002cb0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	0a5b      	lsrs	r3, r3, #9
 8002cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cca:	edd7 6a06 	vldr	s13, [r7, #24]
 8002cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cd6:	ee17 3a90 	vmov	r3, s15
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ce6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	@ 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	44020c00 	.word	0x44020c00
 8002cfc:	003d0900 	.word	0x003d0900
 8002d00:	03d09000 	.word	0x03d09000
 8002d04:	017d7840 	.word	0x017d7840
 8002d08:	46000000 	.word	0x46000000
 8002d0c:	4c742400 	.word	0x4c742400
 8002d10:	4bbebc20 	.word	0x4bbebc20
 8002d14:	4a742400 	.word	0x4a742400

08002d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002d1c:	f7ff fed0 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002d26:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002d2a:	4907      	ldr	r1, [pc, #28]	@ (8002d48 <HAL_RCC_GetHCLKFreq+0x30>)
 8002d2c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002d2e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <HAL_RCC_GetHCLKFreq+0x34>)
 8002d38:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002d3a:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <HAL_RCC_GetHCLKFreq+0x34>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	44020c00 	.word	0x44020c00
 8002d48:	080078d4 	.word	0x080078d4
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002d54:	f7ff ffe0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4904      	ldr	r1, [pc, #16]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	44020c00 	.word	0x44020c00
 8002d78:	080078e4 	.word	0x080078e4

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002d80:	f7ff ffca 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	44020c00 	.word	0x44020c00
 8002da4:	080078e4 	.word	0x080078e4

08002da8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002dac:	f7ff ffb4 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_RCC_GetPCLK3Freq+0x24>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	0b1b      	lsrs	r3, r3, #12
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4904      	ldr	r1, [pc, #16]	@ (8002dd0 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	44020c00 	.word	0x44020c00
 8002dd0:	080078e4 	.word	0x080078e4

08002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b0ba      	sub	sp, #232	@ 0xe8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002df8:	2500      	movs	r5, #0
 8002dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8002dfe:	d00b      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002e00:	4bcd      	ldr	r3, [pc, #820]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e06:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	4ac9      	ldr	r2, [pc, #804]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e12:	430b      	orrs	r3, r1
 8002e14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f002 0801 	and.w	r8, r2, #1
 8002e24:	f04f 0900 	mov.w	r9, #0
 8002e28:	ea58 0309 	orrs.w	r3, r8, r9
 8002e2c:	d042      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d823      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002e38:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e89 	.word	0x08002e89
 8002e44:	08002e59 	.word	0x08002e59
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002e89 	.word	0x08002e89
 8002e50:	08002e89 	.word	0x08002e89
 8002e54:	08002e89 	.word	0x08002e89
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 f90c 	bl	800607c <RCCEx_PLL2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002e6a:	e00e      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e70:	3330      	adds	r3, #48	@ 0x30
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 f99a 	bl	80061ac <RCCEx_PLL3_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002e7e:	e004      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e92:	4ba9      	ldr	r3, [pc, #676]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e98:	f023 0107 	bic.w	r1, r3, #7
 8002e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	4aa5      	ldr	r2, [pc, #660]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002eaa:	e003      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002eb0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f002 0a02 	and.w	sl, r2, #2
 8002ec0:	f04f 0b00 	mov.w	fp, #0
 8002ec4:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ec8:	f000 8088 	beq.w	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed2:	2b28      	cmp	r3, #40	@ 0x28
 8002ed4:	d868      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002fb1 	.word	0x08002fb1
 8002ee0:	08002fa9 	.word	0x08002fa9
 8002ee4:	08002fa9 	.word	0x08002fa9
 8002ee8:	08002fa9 	.word	0x08002fa9
 8002eec:	08002fa9 	.word	0x08002fa9
 8002ef0:	08002fa9 	.word	0x08002fa9
 8002ef4:	08002fa9 	.word	0x08002fa9
 8002ef8:	08002fa9 	.word	0x08002fa9
 8002efc:	08002f81 	.word	0x08002f81
 8002f00:	08002fa9 	.word	0x08002fa9
 8002f04:	08002fa9 	.word	0x08002fa9
 8002f08:	08002fa9 	.word	0x08002fa9
 8002f0c:	08002fa9 	.word	0x08002fa9
 8002f10:	08002fa9 	.word	0x08002fa9
 8002f14:	08002fa9 	.word	0x08002fa9
 8002f18:	08002fa9 	.word	0x08002fa9
 8002f1c:	08002f95 	.word	0x08002f95
 8002f20:	08002fa9 	.word	0x08002fa9
 8002f24:	08002fa9 	.word	0x08002fa9
 8002f28:	08002fa9 	.word	0x08002fa9
 8002f2c:	08002fa9 	.word	0x08002fa9
 8002f30:	08002fa9 	.word	0x08002fa9
 8002f34:	08002fa9 	.word	0x08002fa9
 8002f38:	08002fa9 	.word	0x08002fa9
 8002f3c:	08002fb1 	.word	0x08002fb1
 8002f40:	08002fa9 	.word	0x08002fa9
 8002f44:	08002fa9 	.word	0x08002fa9
 8002f48:	08002fa9 	.word	0x08002fa9
 8002f4c:	08002fa9 	.word	0x08002fa9
 8002f50:	08002fa9 	.word	0x08002fa9
 8002f54:	08002fa9 	.word	0x08002fa9
 8002f58:	08002fa9 	.word	0x08002fa9
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08002fa9 	.word	0x08002fa9
 8002f64:	08002fa9 	.word	0x08002fa9
 8002f68:	08002fa9 	.word	0x08002fa9
 8002f6c:	08002fa9 	.word	0x08002fa9
 8002f70:	08002fa9 	.word	0x08002fa9
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fa9 	.word	0x08002fa9
 8002f7c:	08002fb1 	.word	0x08002fb1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f84:	3308      	adds	r3, #8
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 f878 	bl	800607c <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002f92:	e00e      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f98:	3330      	adds	r3, #48	@ 0x30
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 f906 	bl	80061ac <RCCEx_PLL3_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002fa6:	e004      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002fba:	4b5f      	ldr	r3, [pc, #380]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fc0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	4a5b      	ldr	r2, [pc, #364]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002fd2:	e003      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fd8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f002 0304 	and.w	r3, r2, #4
 8002fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ff2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	d04e      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003002:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003006:	d02c      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003008:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800300c:	d825      	bhi.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800300e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003012:	d028      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003018:	d81f      	bhi.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800301a:	2bc0      	cmp	r3, #192	@ 0xc0
 800301c:	d025      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800301e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003020:	d81b      	bhi.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003022:	2b80      	cmp	r3, #128	@ 0x80
 8003024:	d00f      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003026:	2b80      	cmp	r3, #128	@ 0x80
 8003028:	d817      	bhi.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01f      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800302e:	2b40      	cmp	r3, #64	@ 0x40
 8003030:	d113      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003036:	3308      	adds	r3, #8
 8003038:	4618      	mov	r0, r3
 800303a:	f003 f81f 	bl	800607c <RCCEx_PLL2_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003044:	e014      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800304a:	3330      	adds	r3, #48	@ 0x30
 800304c:	4618      	mov	r0, r3
 800304e:	f003 f8ad 	bl	80061ac <RCCEx_PLL3_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003058:	e00a      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003060:	e006      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003062:	bf00      	nop
 8003064:	e004      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003066:	bf00      	nop
 8003068:	e002      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800306e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003070:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10c      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003078:	4b2f      	ldr	r3, [pc, #188]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800307a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800307e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800308a:	430b      	orrs	r3, r1
 800308c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003090:	e003      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003092:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003096:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800309a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f002 0308 	and.w	r3, r2, #8
 80030a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4313      	orrs	r3, r2
 80030b8:	d056      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80030ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80030c4:	d031      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80030c6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80030ca:	d82a      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d0:	d02d      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d6:	d824      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030dc:	d029      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80030de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030e2:	d81e      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e8:	d011      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ee:	d818      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d023      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f8:	d113      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030fe:	3308      	adds	r3, #8
 8003100:	4618      	mov	r0, r3
 8003102:	f002 ffbb 	bl	800607c <RCCEx_PLL2_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800310c:	e017      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800310e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003112:	3330      	adds	r3, #48	@ 0x30
 8003114:	4618      	mov	r0, r3
 8003116:	f003 f849 	bl	80061ac <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8003120:	e00d      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003128:	e009      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800312a:	bf00      	nop
 800312c:	e007      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800312e:	bf00      	nop
 8003130:	e005      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003132:	bf00      	nop
 8003134:	e003      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003136:	bf00      	nop
 8003138:	44020c00 	.word	0x44020c00
        break;
 800313c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800313e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003146:	4bb9      	ldr	r3, [pc, #740]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800314c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003156:	4ab5      	ldr	r2, [pc, #724]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003158:	430b      	orrs	r3, r1
 800315a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800315e:	e003      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003164:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f002 0310 	and.w	r3, r2, #16
 8003174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003178:	2300      	movs	r3, #0
 800317a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800317e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	d053      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800318c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800318e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003192:	d031      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003194:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003198:	d82a      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800319a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800319e:	d02d      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80031a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031a4:	d824      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80031a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031aa:	d029      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80031ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031b0:	d81e      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b6:	d011      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031bc:	d818      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d020      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c6:	d113      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031cc:	3308      	adds	r3, #8
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 ff54 	bl	800607c <RCCEx_PLL2_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80031da:	e014      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031e0:	3330      	adds	r3, #48	@ 0x30
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 ffe2 	bl	80061ac <RCCEx_PLL3_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80031ee:	e00a      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80031f6:	e006      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80031f8:	bf00      	nop
 80031fa:	e004      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80031fc:	bf00      	nop
 80031fe:	e002      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003200:	bf00      	nop
 8003202:	e000      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003206:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800320e:	4b87      	ldr	r3, [pc, #540]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003214:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800321c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321e:	4a83      	ldr	r2, [pc, #524]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003220:	430b      	orrs	r3, r1
 8003222:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003226:	e003      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800322c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f002 0320 	and.w	r3, r2, #32
 800323c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003246:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800324a:	460b      	mov	r3, r1
 800324c:	4313      	orrs	r3, r2
 800324e:	d053      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800325a:	d031      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800325c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003260:	d82a      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003266:	d02d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800326c:	d824      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800326e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003272:	d029      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003274:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003278:	d81e      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327e:	d011      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003284:	d818      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d020      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800328a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800328e:	d113      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003294:	3308      	adds	r3, #8
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fef0 	bl	800607c <RCCEx_PLL2_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80032a2:	e014      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032a8:	3330      	adds	r3, #48	@ 0x30
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 ff7e 	bl	80061ac <RCCEx_PLL3_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80032b6:	e00a      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032be:	e006      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80032c0:	bf00      	nop
 80032c2:	e004      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80032c4:	bf00      	nop
 80032c6:	e002      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80032c8:	bf00      	nop
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80032cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80032d6:	4b55      	ldr	r3, [pc, #340]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032dc:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80032e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	4a51      	ldr	r2, [pc, #324]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800330e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003312:	460b      	mov	r3, r1
 8003314:	4313      	orrs	r3, r2
 8003316:	d053      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800331c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003322:	d031      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003324:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003328:	d82a      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800332a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800332e:	d02d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003330:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003334:	d824      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003336:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800333a:	d029      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800333c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003340:	d81e      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003342:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003346:	d011      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003348:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800334c:	d818      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d020      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003352:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003356:	d113      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800335c:	3308      	adds	r3, #8
 800335e:	4618      	mov	r0, r3
 8003360:	f002 fe8c 	bl	800607c <RCCEx_PLL2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800336a:	e014      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800336c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003370:	3330      	adds	r3, #48	@ 0x30
 8003372:	4618      	mov	r0, r3
 8003374:	f002 ff1a 	bl	80061ac <RCCEx_PLL3_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800337e:	e00a      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003386:	e006      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003388:	bf00      	nop
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800338c:	bf00      	nop
 800338e:	e002      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800339e:	4b23      	ldr	r3, [pc, #140]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80033a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ae:	4a1f      	ldr	r2, [pc, #124]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033b0:	430b      	orrs	r3, r1
 80033b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b6:	e003      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033bc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80033cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80033d6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80033da:	460b      	mov	r3, r1
 80033dc:	4313      	orrs	r3, r2
 80033de:	d03d      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80033e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033ea:	d01b      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80033ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033f0:	d814      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x648>
 80033f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033f6:	d017      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80033f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033fc:	d80e      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x648>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003406:	d109      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340c:	3330      	adds	r3, #48	@ 0x30
 800340e:	4618      	mov	r0, r3
 8003410:	f002 fecc 	bl	80061ac <RCCEx_PLL3_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800341a:	e00a      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003422:	e006      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003424:	bf00      	nop
 8003426:	e004      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003428:	bf00      	nop
 800342a:	e002      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800342c:	44020c00 	.word	0x44020c00
        break;
 8003430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003432:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800343a:	4b99      	ldr	r3, [pc, #612]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800343c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003440:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800344a:	4a95      	ldr	r2, [pc, #596]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800344c:	430b      	orrs	r3, r1
 800344e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003452:	e003      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003458:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800345c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003472:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003476:	460b      	mov	r3, r1
 8003478:	4313      	orrs	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800347c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003482:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003486:	d01b      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003488:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800348c:	d814      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800348e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003492:	d017      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003494:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003498:	d80e      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d014      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800349e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034a2:	d109      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034a8:	3330      	adds	r3, #48	@ 0x30
 80034aa:	4618      	mov	r0, r3
 80034ac:	f002 fe7e 	bl	80061ac <RCCEx_PLL3_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80034b6:	e008      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80034be:	e004      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80034c0:	bf00      	nop
 80034c2:	e002      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80034c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80034d2:	4b73      	ldr	r3, [pc, #460]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80034d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034d8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80034dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e2:	4a6f      	ldr	r2, [pc, #444]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034ea:	e003      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800350a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	d03d      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800351c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003520:	d01b      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8003522:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003526:	d814      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800352c:	d017      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800352e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003532:	d80e      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d014      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8003538:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800353c:	d109      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800353e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003542:	3330      	adds	r3, #48	@ 0x30
 8003544:	4618      	mov	r0, r3
 8003546:	f002 fe31 	bl	80061ac <RCCEx_PLL3_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003550:	e008      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003558:	e004      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8003562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003564:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800356c:	4b4c      	ldr	r3, [pc, #304]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800356e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003572:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800357e:	4a48      	ldr	r2, [pc, #288]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003580:	430b      	orrs	r3, r1
 8003582:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003586:	e003      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800358c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800359c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80035aa:	460b      	mov	r3, r1
 80035ac:	4313      	orrs	r3, r2
 80035ae:	d035      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80035b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035bc:	d015      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x816>
 80035be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035c2:	d80e      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d012      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80035c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035cc:	d109      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035d2:	3330      	adds	r3, #48	@ 0x30
 80035d4:	4618      	mov	r0, r3
 80035d6:	f002 fde9 	bl	80061ac <RCCEx_PLL3_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80035e0:	e006      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80035e8:	e002      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80035ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80035f8:	4b29      	ldr	r3, [pc, #164]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035fe:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360a:	4a25      	ldr	r2, [pc, #148]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800360c:	430b      	orrs	r3, r1
 800360e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003612:	e003      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003618:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800361c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	2100      	movs	r1, #0
 8003626:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800362a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800362e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003632:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d037      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 800363c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003648:	d015      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800364a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800364e:	d80e      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d012      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003658:	d109      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800365a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800365e:	3330      	adds	r3, #48	@ 0x30
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fda3 	bl	80061ac <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800367a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800367c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10f      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003686:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800368a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800368e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	4a02      	ldr	r2, [pc, #8]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003698:	430b      	orrs	r3, r1
 800369a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800369e:	e005      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80036a0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	2100      	movs	r1, #0
 80036b6:	67b9      	str	r1, [r7, #120]	@ 0x78
 80036b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80036c8:	4bb8      	ldr	r3, [pc, #736]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4ab7      	ldr	r2, [pc, #732]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80036ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036d2:	61d3      	str	r3, [r2, #28]
 80036d4:	4bb5      	ldr	r3, [pc, #724]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80036e0:	4ab2      	ldr	r2, [pc, #712]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80036e2:	430b      	orrs	r3, r1
 80036e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80036f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80036f4:	2300      	movs	r3, #0
 80036f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80036f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80036fc:	460b      	mov	r3, r1
 80036fe:	4313      	orrs	r3, r2
 8003700:	d055      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800370a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800370e:	d031      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8003710:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003714:	d82a      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800371a:	d02d      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003720:	d824      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003726:	d029      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800372c:	d81e      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800372e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003732:	d011      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003738:	d818      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d020      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800373e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003742:	d113      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003748:	3308      	adds	r3, #8
 800374a:	4618      	mov	r0, r3
 800374c:	f002 fc96 	bl	800607c <RCCEx_PLL2_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003756:	e014      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375c:	3330      	adds	r3, #48	@ 0x30
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fd24 	bl	80061ac <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800376a:	e00a      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003772:	e006      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003774:	bf00      	nop
 8003776:	e004      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003778:	bf00      	nop
 800377a:	e002      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003782:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800378a:	4b88      	ldr	r3, [pc, #544]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800378c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003790:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800379c:	4a83      	ldr	r2, [pc, #524]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800379e:	430b      	orrs	r3, r1
 80037a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80037ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037bc:	2300      	movs	r3, #0
 80037be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d055      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80037d6:	d031      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80037d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80037dc:	d82a      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80037de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e2:	d02d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e8:	d824      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80037ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037ee:	d029      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80037f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037f4:	d81e      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037fa:	d011      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d818      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380a:	d113      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800380c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003810:	3308      	adds	r3, #8
 8003812:	4618      	mov	r0, r3
 8003814:	f002 fc32 	bl	800607c <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800381e:	e014      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003824:	3330      	adds	r3, #48	@ 0x30
 8003826:	4618      	mov	r0, r3
 8003828:	f002 fcc0 	bl	80061ac <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003832:	e00a      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800383a:	e006      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800383c:	bf00      	nop
 800383e:	e004      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003840:	bf00      	nop
 8003842:	e002      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003844:	bf00      	nop
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800384a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10d      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003852:	4b56      	ldr	r3, [pc, #344]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003854:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003858:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800385c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003864:	4a51      	ldr	r2, [pc, #324]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003866:	430b      	orrs	r3, r1
 8003868:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800386c:	e003      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003872:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003882:	663b      	str	r3, [r7, #96]	@ 0x60
 8003884:	2300      	movs	r3, #0
 8003886:	667b      	str	r3, [r7, #100]	@ 0x64
 8003888:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800388c:	460b      	mov	r3, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	d032      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003896:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800389a:	2b05      	cmp	r3, #5
 800389c:	d80f      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d211      	bcs.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d911      	bls.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d109      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ae:	3308      	adds	r3, #8
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 fbe3 	bl	800607c <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80038c4:	e002      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80038ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80038d4:	4b35      	ldr	r3, [pc, #212]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80038d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038da:	f023 0107 	bic.w	r1, r3, #7
 80038de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038e6:	4a31      	ldr	r2, [pc, #196]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80038ee:	e003      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80038f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	2100      	movs	r1, #0
 8003902:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800390a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800390e:	460b      	mov	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	d024      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8003920:	2b08      	cmp	r3, #8
 8003922:	d005      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800392a:	e002      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8003930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003932:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10d      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800393a:	4b1c      	ldr	r3, [pc, #112]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800393c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003940:	f023 0108 	bic.w	r1, r3, #8
 8003944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800394c:	4a17      	ldr	r2, [pc, #92]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800394e:	430b      	orrs	r3, r1
 8003950:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003956:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800395a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800395e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800396a:	653b      	str	r3, [r7, #80]	@ 0x50
 800396c:	2300      	movs	r3, #0
 800396e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003970:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	f000 80b9 	beq.w	8003aee <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800397c:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	4a0b      	ldr	r2, [pc, #44]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003988:	f7fd ff88 	bl	800189c <HAL_GetTick>
 800398c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003990:	e010      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fd ff83 	bl	800189c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d908      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039a8:	e00a      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80039aa:	bf00      	nop
 80039ac:	44020c00 	.word	0x44020c00
 80039b0:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039b4:	4bba      	ldr	r3, [pc, #744]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0e8      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80039c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 808e 	bne.w	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ca:	4bb6      	ldr	r3, [pc, #728]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80039cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80039d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d023      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80039e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039e4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039f0:	4bac      	ldr	r3, [pc, #688]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80039f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039fe:	4ba9      	ldr	r3, [pc, #676]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a04:	4aa7      	ldr	r2, [pc, #668]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a0e:	4ba5      	ldr	r3, [pc, #660]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a14:	4aa3      	ldr	r2, [pc, #652]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a1e:	4aa1      	ldr	r2, [pc, #644]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d019      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd ff32 	bl	800189c <HAL_GetTick>
 8003a38:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3c:	e00d      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f7fd ff2d 	bl	800189c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a48:	1ad2      	subs	r2, r2, r3
 8003a4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d903      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	4b92      	ldr	r3, [pc, #584]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ea      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8003a68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d135      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a80:	d110      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8003a82:	4b88      	ldr	r3, [pc, #544]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a98:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003a9c:	4a81      	ldr	r2, [pc, #516]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	61d3      	str	r3, [r2, #28]
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003aa4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4a7e      	ldr	r2, [pc, #504]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003aaa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003aae:	61d3      	str	r3, [r2, #28]
 8003ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ac0:	4b78      	ldr	r3, [pc, #480]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003ac2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad2:	4a74      	ldr	r2, [pc, #464]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ada:	e008      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003adc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ae0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003aea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003afc:	2300      	movs	r3, #0
 8003afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b04:	460b      	mov	r3, r1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	d035      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b12:	2b30      	cmp	r3, #48	@ 0x30
 8003b14:	d014      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8003b16:	2b30      	cmp	r3, #48	@ 0x30
 8003b18:	d80e      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d012      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d80a      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d106      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b34:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003b36:	e008      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b3e:	e004      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003b52:	4b54      	ldr	r3, [pc, #336]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b64:	4a4f      	ldr	r2, [pc, #316]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b6c:	e003      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b82:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b84:	2300      	movs	r3, #0
 8003b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d033      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8003b9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ba0:	d007      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003ba2:	e010      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003bb0:	e00d      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 fa5f 	bl	800607c <RCCEx_PLL2_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10d      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003bd6:	4b33      	ldr	r3, [pc, #204]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003bd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bdc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003be8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bf6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c08:	2300      	movs	r3, #0
 8003c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c10:	460b      	mov	r3, r1
 8003c12:	4313      	orrs	r3, r2
 8003c14:	d04c      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d827      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c3d 	.word	0x08003c3d
 8003c2c:	08003c4b 	.word	0x08003c4b
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c7b 	.word	0x08003c7b
 8003c38:	08003c7b 	.word	0x08003c7b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	4a18      	ldr	r2, [pc, #96]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c46:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c48:	e018      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c4e:	3308      	adds	r3, #8
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 fa13 	bl	800607c <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c62:	3330      	adds	r3, #48	@ 0x30
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 faa1 	bl	80061ac <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003c70:	e004      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003c84:	4b07      	ldr	r3, [pc, #28]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c8a:	f023 0107 	bic.w	r1, r3, #7
 8003c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c96:	4a03      	ldr	r2, [pc, #12]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c9e:	e007      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8003ca0:	44020800 	.word	0x44020800
 8003ca4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003cac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f000 8081 	beq.w	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d85f      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8003cda:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003d65 	.word	0x08003d65
 8003ce4:	08003d9b 	.word	0x08003d9b
 8003ce8:	08003d9b 	.word	0x08003d9b
 8003cec:	08003d9b 	.word	0x08003d9b
 8003cf0:	08003d9b 	.word	0x08003d9b
 8003cf4:	08003d9b 	.word	0x08003d9b
 8003cf8:	08003d9b 	.word	0x08003d9b
 8003cfc:	08003d9b 	.word	0x08003d9b
 8003d00:	08003d73 	.word	0x08003d73
 8003d04:	08003d9b 	.word	0x08003d9b
 8003d08:	08003d9b 	.word	0x08003d9b
 8003d0c:	08003d9b 	.word	0x08003d9b
 8003d10:	08003d9b 	.word	0x08003d9b
 8003d14:	08003d9b 	.word	0x08003d9b
 8003d18:	08003d9b 	.word	0x08003d9b
 8003d1c:	08003d9b 	.word	0x08003d9b
 8003d20:	08003d87 	.word	0x08003d87
 8003d24:	08003d9b 	.word	0x08003d9b
 8003d28:	08003d9b 	.word	0x08003d9b
 8003d2c:	08003d9b 	.word	0x08003d9b
 8003d30:	08003d9b 	.word	0x08003d9b
 8003d34:	08003d9b 	.word	0x08003d9b
 8003d38:	08003d9b 	.word	0x08003d9b
 8003d3c:	08003d9b 	.word	0x08003d9b
 8003d40:	08003da3 	.word	0x08003da3
 8003d44:	08003d9b 	.word	0x08003d9b
 8003d48:	08003d9b 	.word	0x08003d9b
 8003d4c:	08003d9b 	.word	0x08003d9b
 8003d50:	08003d9b 	.word	0x08003d9b
 8003d54:	08003d9b 	.word	0x08003d9b
 8003d58:	08003d9b 	.word	0x08003d9b
 8003d5c:	08003d9b 	.word	0x08003d9b
 8003d60:	08003da3 	.word	0x08003da3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d64:	4bb9      	ldr	r3, [pc, #740]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	4ab8      	ldr	r2, [pc, #736]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003d70:	e018      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d76:	3308      	adds	r3, #8
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f002 f97f 	bl	800607c <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003d84:	e00e      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d8a:	3330      	adds	r3, #48	@ 0x30
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 fa0d 	bl	80061ac <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003d98:	e004      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8003da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10d      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003dac:	4ba7      	ldr	r3, [pc, #668]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003db2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dbe:	4aa3      	ldr	r2, [pc, #652]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dcc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003de6:	460b      	mov	r3, r1
 8003de8:	4313      	orrs	r3, r2
 8003dea:	d04e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df8:	d02e      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dfe:	d827      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003e00:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e02:	d02b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003e04:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e06:	d823      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003e08:	2b80      	cmp	r3, #128	@ 0x80
 8003e0a:	d017      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8003e0c:	2b80      	cmp	r3, #128	@ 0x80
 8003e0e:	d81f      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8003e14:	2b40      	cmp	r3, #64	@ 0x40
 8003e16:	d007      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8003e18:	e01a      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1a:	4b8c      	ldr	r3, [pc, #560]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	4a8b      	ldr	r2, [pc, #556]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e24:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e26:	e01a      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f002 f924 	bl	800607c <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e010      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e40:	3330      	adds	r3, #48	@ 0x30
 8003e42:	4618      	mov	r0, r3
 8003e44:	f002 f9b2 	bl	80061ac <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003e4e:	e006      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e56:	e002      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003e66:	4b79      	ldr	r3, [pc, #484]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e6c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e78:	4974      	ldr	r1, [pc, #464]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e86:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d055      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003eae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003eb2:	d031      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8003eb4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003eb8:	d82a      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebe:	d02d      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec4:	d824      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003ec6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003eca:	d029      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8003ecc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ed0:	d81e      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	d011      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003edc:	d818      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d020      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8003ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee6:	d113      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eec:	3308      	adds	r3, #8
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 f8c4 	bl	800607c <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003efa:	e014      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f00:	3330      	adds	r3, #48	@ 0x30
 8003f02:	4618      	mov	r0, r3
 8003f04:	f002 f952 	bl	80061ac <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f16:	e006      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e004      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e002      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f26:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f34:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8003f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f40:	4942      	ldr	r1, [pc, #264]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003f48:	e003      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f4e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	61b9      	str	r1, [r7, #24]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d03c      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d81b      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8003f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fbb 	.word	0x08003fbb
 8003f84:	08003f91 	.word	0x08003f91
 8003f88:	08003f9f 	.word	0x08003f9f
 8003f8c:	08003fbb 	.word	0x08003fbb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f90:	4b2e      	ldr	r3, [pc, #184]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	4a2d      	ldr	r2, [pc, #180]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003f9c:	e00e      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f002 f869 	bl	800607c <RCCEx_PLL2_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003fb0:	e004      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8003fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003fc4:	4b21      	ldr	r3, [pc, #132]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003fc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fd6:	491d      	ldr	r1, [pc, #116]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fe4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	6139      	str	r1, [r7, #16]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	d03c      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004010:	d00e      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004016:	d815      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d019      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 800401c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004020:	d110      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004022:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	4a09      	ldr	r2, [pc, #36]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800402c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800402e:	e010      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004034:	3308      	adds	r3, #8
 8004036:	4618      	mov	r0, r3
 8004038:	f002 f820 	bl	800607c <RCCEx_PLL2_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004042:	e006      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800404a:	e002      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 800404c:	44020c00 	.word	0x44020c00
        break;
 8004050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004052:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800405a:	4b3d      	ldr	r3, [pc, #244]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800405c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004060:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406c:	4938      	ldr	r1, [pc, #224]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004074:	e003      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004076:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800407a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800407e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	2100      	movs	r1, #0
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d038      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800409a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800409e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040a2:	2b30      	cmp	r3, #48	@ 0x30
 80040a4:	d01b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80040a6:	2b30      	cmp	r3, #48	@ 0x30
 80040a8:	d815      	bhi.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d002      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d007      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80040b2:	e010      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b4:	4b26      	ldr	r3, [pc, #152]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	4a25      	ldr	r2, [pc, #148]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80040ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80040c0:	e00e      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c6:	3330      	adds	r3, #48	@ 0x30
 80040c8:	4618      	mov	r0, r3
 80040ca:	f002 f86f 	bl	80061ac <RCCEx_PLL3_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80040d4:	e004      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10d      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80040e8:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80040ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040fa:	4915      	ldr	r1, [pc, #84]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004108:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800410c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	2100      	movs	r1, #0
 8004116:	6039      	str	r1, [r7, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d00c      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800412a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800412e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004136:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800413a:	4905      	ldr	r1, [pc, #20]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004142:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8004146:	4618      	mov	r0, r3
 8004148:	37e8      	adds	r7, #232	@ 0xe8
 800414a:	46bd      	mov	sp, r7
 800414c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004150:	44020c00 	.word	0x44020c00

08004154 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004154:	b480      	push	{r7}
 8004156:	b08b      	sub	sp, #44	@ 0x2c
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800415c:	4bae      	ldr	r3, [pc, #696]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004164:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004166:	4bac      	ldr	r3, [pc, #688]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004170:	4ba9      	ldr	r3, [pc, #676]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800417a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800417c:	4ba6      	ldr	r3, [pc, #664]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004188:	4ba3      	ldr	r3, [pc, #652]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	08db      	lsrs	r3, r3, #3
 800418e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8126 	beq.w	80043f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d053      	beq.n	800425a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d86f      	bhi.n	8004298 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d003      	beq.n	80041c6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d02b      	beq.n	800421c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80041c4:	e068      	b.n	8004298 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041c6:	4b94      	ldr	r3, [pc, #592]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	08db      	lsrs	r3, r3, #3
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	4a92      	ldr	r2, [pc, #584]	@ (800441c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80041fe:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004420 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800421a:	e068      	b.n	80042ee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004424 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004238:	ed97 6a04 	vldr	s12, [r7, #16]
 800423c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004420 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004248:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800424c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004254:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004258:	e049      	b.n	80042ee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004264:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004428 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004276:	ed97 6a04 	vldr	s12, [r7, #16]
 800427a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004420 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004296:	e02a      	b.n	80042ee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004298:	4b5f      	ldr	r3, [pc, #380]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	08db      	lsrs	r3, r3, #3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	4a5e      	ldr	r2, [pc, #376]	@ (800441c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80042d0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004420 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80042d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80042ec:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042fa:	d121      	bne.n	8004340 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80042fc:	4b46      	ldr	r3, [pc, #280]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d017      	beq.n	8004338 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004308:	4b43      	ldr	r3, [pc, #268]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800430a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430c:	0a5b      	lsrs	r3, r3, #9
 800430e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800431a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800431e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004322:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e006      	b.n	8004346 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e002      	b.n	8004346 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004346:	4b34      	ldr	r3, [pc, #208]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004352:	d121      	bne.n	8004398 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004354:	4b30      	ldr	r3, [pc, #192]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d017      	beq.n	8004390 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004360:	4b2d      	ldr	r3, [pc, #180]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004376:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800437a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800437e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004386:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	e006      	b.n	800439e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	e002      	b.n	800439e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800439e:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043aa:	d121      	bne.n	80043f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80043ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d017      	beq.n	80043e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043b8:	4b17      	ldr	r3, [pc, #92]	@ (8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80043ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043bc:	0e1b      	lsrs	r3, r3, #24
 80043be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80043ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80043d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80043e6:	e010      	b.n	800440a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
}
 80043ee:	e00c      	b.n	800440a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	609a      	str	r2, [r3, #8]
}
 80043f6:	e008      	b.n	800440a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
}
 800440a:	bf00      	nop
 800440c:	372c      	adds	r7, #44	@ 0x2c
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	44020c00 	.word	0x44020c00
 800441c:	03d09000 	.word	0x03d09000
 8004420:	46000000 	.word	0x46000000
 8004424:	4a742400 	.word	0x4a742400
 8004428:	4bbebc20 	.word	0x4bbebc20

0800442c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800442c:	b480      	push	{r7}
 800442e:	b08b      	sub	sp, #44	@ 0x2c
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004434:	4bae      	ldr	r3, [pc, #696]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800443e:	4bac      	ldr	r3, [pc, #688]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004448:	4ba9      	ldr	r3, [pc, #676]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004452:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004454:	4ba6      	ldr	r3, [pc, #664]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004460:	4ba3      	ldr	r3, [pc, #652]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004478:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8126 	beq.w	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d053      	beq.n	8004532 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d86f      	bhi.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d02b      	beq.n	80044f4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800449c:	e068      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800449e:	4b94      	ldr	r3, [pc, #592]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	08db      	lsrs	r3, r3, #3
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	4a92      	ldr	r2, [pc, #584]	@ (80046f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80044aa:	fa22 f303 	lsr.w	r3, r2, r3
 80044ae:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80044d6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80044da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80044f2:	e068      	b.n	80045c6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004510:	ed97 6a04 	vldr	s12, [r7, #16]
 8004514:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004520:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004530:	e049      	b.n	80045c6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8004540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004552:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800456e:	e02a      	b.n	80045c6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004570:	4b5f      	ldr	r3, [pc, #380]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	08db      	lsrs	r3, r3, #3
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	4a5e      	ldr	r2, [pc, #376]	@ (80046f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80045a8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80045ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80045c4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045c6:	4b4a      	ldr	r3, [pc, #296]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d2:	d121      	bne.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80045d4:	4b46      	ldr	r3, [pc, #280]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d017      	beq.n	8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045e0:	4b43      	ldr	r3, [pc, #268]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80045e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e4:	0a5b      	lsrs	r3, r3, #9
 80045e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80045f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045f6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80045fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80045fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004606:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	e006      	b.n	800461e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e002      	b.n	800461e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800461e:	4b34      	ldr	r3, [pc, #208]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d121      	bne.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800462c:	4b30      	ldr	r3, [pc, #192]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d017      	beq.n	8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004638:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800463a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800464a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800464e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004652:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800465e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	e006      	b.n	8004676 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	e002      	b.n	8004676 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004676:	4b1e      	ldr	r3, [pc, #120]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800467e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004682:	d121      	bne.n	80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004684:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d017      	beq.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004690:	4b17      	ldr	r3, [pc, #92]	@ (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	0e1b      	lsrs	r3, r3, #24
 8004696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80046a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80046aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80046ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046be:	e010      	b.n	80046e2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
}
 80046c6:	e00c      	b.n	80046e2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
}
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
}
 80046e2:	bf00      	nop
 80046e4:	372c      	adds	r7, #44	@ 0x2c
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	44020c00 	.word	0x44020c00
 80046f4:	03d09000 	.word	0x03d09000
 80046f8:	46000000 	.word	0x46000000
 80046fc:	4a742400 	.word	0x4a742400
 8004700:	4bbebc20 	.word	0x4bbebc20

08004704 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004704:	b480      	push	{r7}
 8004706:	b08b      	sub	sp, #44	@ 0x2c
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800470c:	4bae      	ldr	r3, [pc, #696]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004714:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004716:	4bac      	ldr	r3, [pc, #688]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8004720:	4ba9      	ldr	r3, [pc, #676]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800472a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800472c:	4ba6      	ldr	r3, [pc, #664]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004738:	4ba3      	ldr	r3, [pc, #652]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800473a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004750:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8126 	beq.w	80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b03      	cmp	r3, #3
 8004760:	d053      	beq.n	800480a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d86f      	bhi.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d003      	beq.n	8004776 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d02b      	beq.n	80047cc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004774:	e068      	b.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004776:	4b94      	ldr	r3, [pc, #592]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	08db      	lsrs	r3, r3, #3
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	4a92      	ldr	r2, [pc, #584]	@ (80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004782:	fa22 f303 	lsr.w	r3, r2, r3
 8004786:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80047ae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80047b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80047ca:	e068      	b.n	800489e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80047da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	ee07 3a90 	vmov	s15, r3
 80047e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80047ec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80047f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004804:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004808:	e049      	b.n	800489e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004814:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8004818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a04 	vldr	s12, [r7, #16]
 800482a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004846:	e02a      	b.n	800489e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004848:	4b5f      	ldr	r3, [pc, #380]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	4a5e      	ldr	r2, [pc, #376]	@ (80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004880:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004898:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800489c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800489e:	4b4a      	ldr	r3, [pc, #296]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048aa:	d121      	bne.n	80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80048ac:	4b46      	ldr	r3, [pc, #280]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048b8:	4b43      	ldr	r3, [pc, #268]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80048ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048bc:	0a5b      	lsrs	r3, r3, #9
 80048be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80048ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80048d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80048d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048de:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e006      	b.n	80048f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e002      	b.n	80048f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048f6:	4b34      	ldr	r3, [pc, #208]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004902:	d121      	bne.n	8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004904:	4b30      	ldr	r3, [pc, #192]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004910:	4b2d      	ldr	r3, [pc, #180]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004926:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800492a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800492e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004936:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e006      	b.n	800494e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	e002      	b.n	800494e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800494e:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800495a:	d121      	bne.n	80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800495c:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d017      	beq.n	8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004968:	4b17      	ldr	r3, [pc, #92]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800496a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800497a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800497e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004982:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004996:	e010      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
}
 800499e:	e00c      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]
}
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	372c      	adds	r7, #44	@ 0x2c
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	44020c00 	.word	0x44020c00
 80049cc:	03d09000 	.word	0x03d09000
 80049d0:	46000000 	.word	0x46000000
 80049d4:	4a742400 	.word	0x4a742400
 80049d8:	4bbebc20 	.word	0x4bbebc20

080049dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b08f      	sub	sp, #60	@ 0x3c
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80049e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ea:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80049ee:	4321      	orrs	r1, r4
 80049f0:	d150      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80049f2:	4b26      	ldr	r3, [pc, #152]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80049fe:	4b23      	ldr	r3, [pc, #140]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d108      	bne.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a12:	d104      	bne.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a1a:	f001 bb20 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2c:	d108      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a34:	d104      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004a36:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3c:	f001 bb0f 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004a40:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a4c:	d119      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a54:	d115      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004a56:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a62:	d30a      	bcc.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004a64:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a6e:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004a76:	f001 baf2 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004a7e:	f001 baee 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a86:	f001 baea 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a8a:	bf00      	nop
 8004a8c:	44020c00 	.word	0x44020c00
 8004a90:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a98:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8004a9c:	ea50 0104 	orrs.w	r1, r0, r4
 8004aa0:	f000 8615 	beq.w	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8004aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aa8:	2801      	cmp	r0, #1
 8004aaa:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8004aae:	f081 82d3 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ab6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8004aba:	ea50 0104 	orrs.w	r1, r0, r4
 8004abe:	f000 84d8 	beq.w	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ac6:	2801      	cmp	r0, #1
 8004ac8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8004acc:	f081 82c4 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ad4:	f1a1 0410 	sub.w	r4, r1, #16
 8004ad8:	ea50 0104 	orrs.w	r1, r0, r4
 8004adc:	f001 8288 	beq.w	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8004ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ae4:	2801      	cmp	r0, #1
 8004ae6:	f171 0110 	sbcs.w	r1, r1, #16
 8004aea:	f081 82b5 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004af2:	f1a1 0408 	sub.w	r4, r1, #8
 8004af6:	ea50 0104 	orrs.w	r1, r0, r4
 8004afa:	f001 81fe 	beq.w	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8004afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b02:	2801      	cmp	r0, #1
 8004b04:	f171 0108 	sbcs.w	r1, r1, #8
 8004b08:	f081 82a6 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b10:	1f0c      	subs	r4, r1, #4
 8004b12:	ea50 0104 	orrs.w	r1, r0, r4
 8004b16:	f000 8753 	beq.w	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8004b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b1e:	2801      	cmp	r0, #1
 8004b20:	f171 0104 	sbcs.w	r1, r1, #4
 8004b24:	f081 8298 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b2c:	1e8c      	subs	r4, r1, #2
 8004b2e:	ea50 0104 	orrs.w	r1, r0, r4
 8004b32:	f001 8173 	beq.w	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8004b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b3a:	2801      	cmp	r0, #1
 8004b3c:	f171 0102 	sbcs.w	r1, r1, #2
 8004b40:	f081 828a 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b48:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8004b4c:	4321      	orrs	r1, r4
 8004b4e:	f001 80fe 	beq.w	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8004b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b56:	4ccb      	ldr	r4, [pc, #812]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004b58:	42a0      	cmp	r0, r4
 8004b5a:	f171 0100 	sbcs.w	r1, r1, #0
 8004b5e:	f081 827b 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b66:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8004b6a:	4321      	orrs	r1, r4
 8004b6c:	f001 8076 	beq.w	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8004b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b74:	4cc4      	ldr	r4, [pc, #784]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8004b76:	42a0      	cmp	r0, r4
 8004b78:	f171 0100 	sbcs.w	r1, r1, #0
 8004b7c:	f081 826c 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b84:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8004b88:	4321      	orrs	r1, r4
 8004b8a:	f000 87b5 	beq.w	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8004b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b92:	4cbe      	ldr	r4, [pc, #760]	@ (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8004b94:	42a0      	cmp	r0, r4
 8004b96:	f171 0100 	sbcs.w	r1, r1, #0
 8004b9a:	f081 825d 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ba2:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8004ba6:	4321      	orrs	r1, r4
 8004ba8:	f000 8738 	beq.w	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8004bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bb0:	4cb7      	ldr	r4, [pc, #732]	@ (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8004bb2:	42a0      	cmp	r0, r4
 8004bb4:	f171 0100 	sbcs.w	r1, r1, #0
 8004bb8:	f081 824e 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bc0:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8004bc4:	4321      	orrs	r1, r4
 8004bc6:	f001 81cd 	beq.w	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8004bca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bce:	4cb1      	ldr	r4, [pc, #708]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8004bd0:	42a0      	cmp	r0, r4
 8004bd2:	f171 0100 	sbcs.w	r1, r1, #0
 8004bd6:	f081 823f 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bde:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8004be2:	4321      	orrs	r1, r4
 8004be4:	f000 80d9 	beq.w	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bec:	4caa      	ldr	r4, [pc, #680]	@ (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8004bee:	42a0      	cmp	r0, r4
 8004bf0:	f171 0100 	sbcs.w	r1, r1, #0
 8004bf4:	f081 8230 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bfc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8004c00:	4321      	orrs	r1, r4
 8004c02:	f000 83da 	beq.w	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c0a:	4ca4      	ldr	r4, [pc, #656]	@ (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	f171 0100 	sbcs.w	r1, r1, #0
 8004c12:	f081 8221 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c1a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8004c1e:	4321      	orrs	r1, r4
 8004c20:	f000 8627 	beq.w	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8004c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c28:	4c9d      	ldr	r4, [pc, #628]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8004c2a:	42a0      	cmp	r0, r4
 8004c2c:	f171 0100 	sbcs.w	r1, r1, #0
 8004c30:	f081 8212 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c38:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8004c3c:	4321      	orrs	r1, r4
 8004c3e:	f000 857a 	beq.w	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c46:	4c97      	ldr	r4, [pc, #604]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8004c48:	42a0      	cmp	r0, r4
 8004c4a:	f171 0100 	sbcs.w	r1, r1, #0
 8004c4e:	f081 8203 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c56:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8004c5a:	4321      	orrs	r1, r4
 8004c5c:	f000 84fb 	beq.w	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c64:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8004c68:	f171 0100 	sbcs.w	r1, r1, #0
 8004c6c:	f081 81f4 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c74:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8004c78:	4321      	orrs	r1, r4
 8004c7a:	f000 84a9 	beq.w	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8004c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c82:	f248 0401 	movw	r4, #32769	@ 0x8001
 8004c86:	42a0      	cmp	r0, r4
 8004c88:	f171 0100 	sbcs.w	r1, r1, #0
 8004c8c:	f081 81e4 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c94:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8004c98:	4321      	orrs	r1, r4
 8004c9a:	f000 8456 	beq.w	800554a <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8004c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ca2:	f244 0401 	movw	r4, #16385	@ 0x4001
 8004ca6:	42a0      	cmp	r0, r4
 8004ca8:	f171 0100 	sbcs.w	r1, r1, #0
 8004cac:	f081 81d4 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cb4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8004cb8:	4321      	orrs	r1, r4
 8004cba:	f000 8403 	beq.w	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cc2:	f242 0401 	movw	r4, #8193	@ 0x2001
 8004cc6:	42a0      	cmp	r0, r4
 8004cc8:	f171 0100 	sbcs.w	r1, r1, #0
 8004ccc:	f081 81c4 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cd4:	2821      	cmp	r0, #33	@ 0x21
 8004cd6:	f171 0100 	sbcs.w	r1, r1, #0
 8004cda:	d255      	bcs.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce0:	4301      	orrs	r1, r0
 8004ce2:	f001 81b9 	beq.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cea:	1e42      	subs	r2, r0, #1
 8004cec:	f141 33ff 	adc.w	r3, r1, #4294967295
 8004cf0:	2a20      	cmp	r2, #32
 8004cf2:	f173 0100 	sbcs.w	r1, r3, #0
 8004cf6:	f081 81af 	bcs.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004cfa:	2a1f      	cmp	r2, #31
 8004cfc:	f201 81ac 	bhi.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004d00:	a101      	add	r1, pc, #4	@ (adr r1, 8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004d02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004ddf 	.word	0x08004ddf
 8004d0c:	08004edd 	.word	0x08004edd
 8004d10:	08006059 	.word	0x08006059
 8004d14:	08004f9d 	.word	0x08004f9d
 8004d18:	08006059 	.word	0x08006059
 8004d1c:	08006059 	.word	0x08006059
 8004d20:	08006059 	.word	0x08006059
 8004d24:	0800506d 	.word	0x0800506d
 8004d28:	08006059 	.word	0x08006059
 8004d2c:	08006059 	.word	0x08006059
 8004d30:	08006059 	.word	0x08006059
 8004d34:	08006059 	.word	0x08006059
 8004d38:	08006059 	.word	0x08006059
 8004d3c:	08006059 	.word	0x08006059
 8004d40:	08006059 	.word	0x08006059
 8004d44:	08005151 	.word	0x08005151
 8004d48:	08006059 	.word	0x08006059
 8004d4c:	08006059 	.word	0x08006059
 8004d50:	08006059 	.word	0x08006059
 8004d54:	08006059 	.word	0x08006059
 8004d58:	08006059 	.word	0x08006059
 8004d5c:	08006059 	.word	0x08006059
 8004d60:	08006059 	.word	0x08006059
 8004d64:	08006059 	.word	0x08006059
 8004d68:	08006059 	.word	0x08006059
 8004d6c:	08006059 	.word	0x08006059
 8004d70:	08006059 	.word	0x08006059
 8004d74:	08006059 	.word	0x08006059
 8004d78:	08006059 	.word	0x08006059
 8004d7c:	08006059 	.word	0x08006059
 8004d80:	08006059 	.word	0x08006059
 8004d84:	08005227 	.word	0x08005227
 8004d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004d90:	430b      	orrs	r3, r1
 8004d92:	f000 82b3 	beq.w	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8004d96:	f001 b95f 	b.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004d9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004d9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dac:	f107 0320 	add.w	r3, r7, #32
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff f9cf 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dba:	f001 b950 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d108      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fb2f 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dd2:	f001 b944 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dda:	f001 b940 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004dde:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7fd ffc4 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004df4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004df6:	f001 b932 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e06:	d10a      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fb0a 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1c:	e05c      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8004e1e:	4b22      	ldr	r3, [pc, #136]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e2a:	d10a      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d107      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fc64 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e40:	e04a      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004e42:	4b19      	ldr	r3, [pc, #100]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d109      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e54:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e66:	e037      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004e68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e74:	d11e      	bne.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e80:	e02a      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8004e82:	bf00      	nop
 8004e84:	40000001 	.word	0x40000001
 8004e88:	20000001 	.word	0x20000001
 8004e8c:	10000001 	.word	0x10000001
 8004e90:	08000001 	.word	0x08000001
 8004e94:	04000001 	.word	0x04000001
 8004e98:	00400001 	.word	0x00400001
 8004e9c:	00200001 	.word	0x00200001
 8004ea0:	00040001 	.word	0x00040001
 8004ea4:	00020001 	.word	0x00020001
 8004ea8:	44020c00 	.word	0x44020c00
 8004eac:	03d09000 	.word	0x03d09000
 8004eb0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004eb4:	4ba3      	ldr	r3, [pc, #652]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	2b05      	cmp	r3, #5
 8004ec6:	d103      	bne.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8004ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ece:	e003      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ed4:	f001 b8c3 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ed8:	f001 b8c1 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004edc:	4b99      	ldr	r3, [pc, #612]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ee6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004eee:	f7fd ff2f 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004ef2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ef4:	f001 b8b3 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004ef8:	4b92      	ldr	r3, [pc, #584]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f04:	d10a      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d107      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f0c:	f107 0314 	add.w	r3, r7, #20
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fa8b 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1a:	e03d      	b.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d108      	bne.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fbec 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f30:	f001 b895 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004f34:	4b83      	ldr	r3, [pc, #524]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d10c      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	2b18      	cmp	r3, #24
 8004f44:	d109      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f46:	4b7f      	ldr	r3, [pc, #508]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	08db      	lsrs	r3, r3, #3
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	4a7d      	ldr	r2, [pc, #500]	@ (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f58:	e01e      	b.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d102      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8004f6e:	4b77      	ldr	r3, [pc, #476]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f72:	e011      	b.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004f74:	4b73      	ldr	r3, [pc, #460]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d106      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	2b28      	cmp	r3, #40	@ 0x28
 8004f86:	d103      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8004f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8e:	e003      	b.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f94:	f001 b863 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f98:	f001 b861 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004f9c:	4b69      	ldr	r3, [pc, #420]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fa2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004fa6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fae:	f7fd fecf 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004fb2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004fb4:	f001 b853 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004fb8:	4b62      	ldr	r3, [pc, #392]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fc4:	d10a      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d107      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fcc:	f107 0314 	add.w	r3, r7, #20
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fa2b 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fda:	e045      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8004fdc:	4b59      	ldr	r3, [pc, #356]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fe8:	d10a      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	2b80      	cmp	r3, #128	@ 0x80
 8004fee:	d107      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ff0:	f107 0308 	add.w	r3, r7, #8
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fb85 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ffe:	e033      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005000:	4b50      	ldr	r3, [pc, #320]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d10c      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005010:	d109      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005012:	4b4c      	ldr	r3, [pc, #304]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	08db      	lsrs	r3, r3, #3
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	4a4a      	ldr	r2, [pc, #296]	@ (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
 8005024:	e020      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005026:	4b47      	ldr	r3, [pc, #284]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800502e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005032:	d106      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503a:	d102      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 800503c:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005040:	e012      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005042:	4b40      	ldr	r3, [pc, #256]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d107      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005056:	d103      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8005058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800505c:	637b      	str	r3, [r7, #52]	@ 0x34
 800505e:	e003      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005064:	f000 bffb 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005068:	f000 bff9 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800506c:	4b35      	ldr	r3, [pc, #212]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800506e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005072:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005076:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800507e:	f7fd fe67 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8005082:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005084:	f000 bfeb 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005088:	4b2e      	ldr	r3, [pc, #184]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005094:	d10b      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509c:	d107      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800509e:	f107 0314 	add.w	r3, r7, #20
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff f9c2 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ac:	e047      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80050ae:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c2:	d107      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050c4:	f107 0308 	add.w	r3, r7, #8
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fb1b 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d2:	e034      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80050d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d10d      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80050e6:	d109      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050e8:	4b16      	ldr	r3, [pc, #88]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fa:	e020      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80050fc:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005108:	d106      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005110:	d102      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8005112:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005114:	637b      	str	r3, [r7, #52]	@ 0x34
 8005116:	e012      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005118:	4b0a      	ldr	r3, [pc, #40]	@ (8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800511a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d107      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800512c:	d103      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
 8005134:	e003      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800513a:	f000 bf90 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800513e:	f000 bf8e 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005142:	bf00      	nop
 8005144:	44020c00 	.word	0x44020c00
 8005148:	03d09000 	.word	0x03d09000
 800514c:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005150:	4ba5      	ldr	r3, [pc, #660]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005152:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005156:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800515a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005162:	f7fd fdf5 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8005166:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005168:	f000 bf79 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800516c:	4b9e      	ldr	r3, [pc, #632]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005178:	d10b      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d107      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005182:	f107 0314 	add.w	r3, r7, #20
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f950 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005190:	e047      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005192:	4b95      	ldr	r3, [pc, #596]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800519a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800519e:	d10b      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a6:	d107      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051a8:	f107 0308 	add.w	r3, r7, #8
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff faa9 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b6:	e034      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80051b8:	4b8b      	ldr	r3, [pc, #556]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d10d      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051ca:	d109      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051cc:	4b86      	ldr	r3, [pc, #536]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a85      	ldr	r2, [pc, #532]	@ (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051de:	e020      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80051e0:	4b81      	ldr	r3, [pc, #516]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ec:	d106      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f4:	d102      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80051f6:	4b7e      	ldr	r3, [pc, #504]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fa:	e012      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80051fc:	4b7a      	ldr	r3, [pc, #488]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80051fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d107      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005210:	d103      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
 8005218:	e003      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800521e:	f000 bf1e 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005222:	f000 bf1c 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005226:	4b70      	ldr	r3, [pc, #448]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800522c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005230:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005238:	f7fd fd8a 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 800523c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800523e:	f000 bf0e 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005242:	4b69      	ldr	r3, [pc, #420]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800524a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800524e:	d10b      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005256:	d107      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff f8e5 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34
 8005266:	e047      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005268:	4b5f      	ldr	r3, [pc, #380]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005274:	d10b      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800527c:	d107      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fa3e 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
 800528c:	e034      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800528e:	4b56      	ldr	r3, [pc, #344]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d10d      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80052a0:	d109      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052a2:	4b51      	ldr	r3, [pc, #324]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	08db      	lsrs	r3, r3, #3
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	4a4f      	ldr	r2, [pc, #316]	@ (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80052ae:	fa22 f303 	lsr.w	r3, r2, r3
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b4:	e020      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80052b6:	4b4c      	ldr	r3, [pc, #304]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c2:	d106      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ca:	d102      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 80052cc:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d0:	e012      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80052d2:	4b45      	ldr	r3, [pc, #276]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80052d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d107      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80052e6:	d103      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80052e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ee:	e003      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052f4:	f000 beb3 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80052f8:	f000 beb1 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80052fc:	4b3a      	ldr	r3, [pc, #232]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80052fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005302:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005306:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800530e:	f7fd fd4b 	bl	8002da8 <HAL_RCC_GetPCLK3Freq>
 8005312:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005314:	f000 bea3 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800531e:	d108      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005320:	f107 0314 	add.w	r3, r7, #20
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f881 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800532e:	f000 be96 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005338:	d108      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800533a:	f107 0308 	add.w	r3, r7, #8
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff f9e0 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005348:	f000 be89 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800534c:	4b26      	ldr	r3, [pc, #152]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d10d      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800535e:	d109      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005360:	4b21      	ldr	r3, [pc, #132]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	4a20      	ldr	r2, [pc, #128]	@ (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	637b      	str	r3, [r7, #52]	@ 0x34
 8005372:	e020      	b.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005374:	4b1c      	ldr	r3, [pc, #112]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005380:	d106      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005388:	d102      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 800538a:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
 800538e:	e012      	b.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005390:	4b15      	ldr	r3, [pc, #84]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b02      	cmp	r3, #2
 800539c:	d107      	bne.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80053a4:	d103      	bne.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 80053a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ac:	e003      	b.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053b2:	f000 be54 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80053b6:	f000 be52 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80053bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80053cc:	f7fd fca4 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 80053d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80053d2:	f000 be44 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10b      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 80053dc:	f7fd fb70 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 80053e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80053e2:	f000 be3c 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80053e6:	bf00      	nop
 80053e8:	44020c00 	.word	0x44020c00
 80053ec:	03d09000 	.word	0x03d09000
 80053f0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d108      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053fa:	f107 0314 	add.w	r3, r7, #20
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff f814 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005408:	f000 be29 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800540c:	4b9f      	ldr	r3, [pc, #636]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005418:	d105      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	2b03      	cmp	r3, #3
 800541e:	d102      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8005420:	4b9b      	ldr	r3, [pc, #620]	@ (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
 8005424:	e023      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005426:	4b99      	ldr	r3, [pc, #612]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d10c      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	2b04      	cmp	r3, #4
 8005436:	d109      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005438:	4b94      	ldr	r3, [pc, #592]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	08db      	lsrs	r3, r3, #3
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	4a94      	ldr	r2, [pc, #592]	@ (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
 800544a:	e010      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800544c:	4b8f      	ldr	r3, [pc, #572]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005458:	d105      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	2b05      	cmp	r3, #5
 800545e:	d102      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8005460:	4b8d      	ldr	r3, [pc, #564]	@ (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
 8005464:	e003      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800546a:	f000 bdf8 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800546e:	f000 bdf6 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005472:	4b86      	ldr	r3, [pc, #536]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800547e:	4b83      	ldr	r3, [pc, #524]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
 8005498:	e012      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800549a:	4b7c      	ldr	r3, [pc, #496]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800549c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a8:	d106      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d103      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 80054b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b6:	e003      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80054bc:	f000 bdcf 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80054c0:	f000 bdcd 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80054c4:	4b71      	ldr	r3, [pc, #452]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80054c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80054d6:	f7fd fc3b 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80054da:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80054dc:	f000 bdbf 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e6:	d108      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff f909 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054f6:	f000 bdb2 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80054fa:	4b64      	ldr	r3, [pc, #400]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b02      	cmp	r3, #2
 8005504:	d10d      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800550c:	d109      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800550e:	4b5f      	ldr	r3, [pc, #380]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	08db      	lsrs	r3, r3, #3
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	4a5e      	ldr	r2, [pc, #376]	@ (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005520:	e011      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005522:	4b5a      	ldr	r3, [pc, #360]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800552a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800552e:	d106      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005536:	d102      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8005538:	4b57      	ldr	r3, [pc, #348]	@ (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
 800553c:	e003      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005542:	f000 bd8c 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005546:	f000 bd8a 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800554a:	4b50      	ldr	r3, [pc, #320]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800554c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005550:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005554:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800555c:	f7fd fbf8 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8005560:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005562:	f000 bd7c 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800556c:	d108      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff f8c6 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800557c:	f000 bd6f 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005580:	4b42      	ldr	r3, [pc, #264]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d10d      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005592:	d109      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005594:	4b3d      	ldr	r3, [pc, #244]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	08db      	lsrs	r3, r3, #3
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	4a3d      	ldr	r2, [pc, #244]	@ (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a6:	e011      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80055a8:	4b38      	ldr	r3, [pc, #224]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b4:	d106      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80055bc:	d102      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 80055be:	4b36      	ldr	r3, [pc, #216]	@ (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c2:	e003      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055c8:	f000 bd49 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80055cc:	f000 bd47 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80055d0:	4b2e      	ldr	r3, [pc, #184]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80055d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80055e2:	f7fd fbe1 	bl	8002da8 <HAL_RCC_GetPCLK3Freq>
 80055e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80055e8:	f000 bd39 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f2:	d108      	bne.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055f4:	f107 0308 	add.w	r3, r7, #8
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff f883 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005602:	f000 bd2c 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005606:	4b21      	ldr	r3, [pc, #132]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b02      	cmp	r3, #2
 8005610:	d10d      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005618:	d109      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800561a:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	4a1b      	ldr	r2, [pc, #108]	@ (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005626:	fa22 f303 	lsr.w	r3, r2, r3
 800562a:	637b      	str	r3, [r7, #52]	@ 0x34
 800562c:	e011      	b.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800562e:	4b17      	ldr	r3, [pc, #92]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563a:	d106      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005642:	d102      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8005644:	4b14      	ldr	r3, [pc, #80]	@ (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005646:	637b      	str	r3, [r7, #52]	@ 0x34
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800564e:	f000 bd06 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005652:	f000 bd04 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800565c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005660:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fd fb72 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 800566c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800566e:	f000 bcf6 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005678:	d110      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff f840 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005688:	f000 bce9 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800568c:	44020c00 	.word	0x44020c00
 8005690:	017d7840 	.word	0x017d7840
 8005694:	03d09000 	.word	0x03d09000
 8005698:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800569c:	4ba4      	ldr	r3, [pc, #656]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d10e      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056ae:	d10a      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056b0:	4b9f      	ldr	r3, [pc, #636]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	08db      	lsrs	r3, r3, #3
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	4a9e      	ldr	r2, [pc, #632]	@ (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056c2:	f000 bccc 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056ca:	f000 bcc8 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80056ce:	4b98      	ldr	r3, [pc, #608]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80056d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056d4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80056e0:	f7fd fb62 	bl	8002da8 <HAL_RCC_GetPCLK3Freq>
 80056e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80056e6:	f000 bcba 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f0:	d108      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056f2:	f107 0308 	add.w	r3, r7, #8
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff f804 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005700:	f000 bcad 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8005704:	4b8a      	ldr	r3, [pc, #552]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b02      	cmp	r3, #2
 800570e:	d10e      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8005710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005716:	d10a      	bne.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005718:	4b85      	ldr	r3, [pc, #532]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	4a84      	ldr	r2, [pc, #528]	@ (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800572a:	f000 bc98 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005732:	f000 bc94 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005736:	4b7e      	ldr	r3, [pc, #504]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005738:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800573c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005748:	d056      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005750:	f200 808b 	bhi.w	800586a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575a:	d03e      	beq.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005762:	f200 8082 	bhi.w	800586a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800576c:	d027      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005774:	d879      	bhi.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800577c:	d017      	beq.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005784:	d871      	bhi.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005792:	d004      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8005794:	e069      	b.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005796:	f7fd fb07 	bl	8002da8 <HAL_RCC_GetPCLK3Freq>
 800579a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800579c:	e068      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fe42 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057ac:	e060      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ae:	f107 0308 	add.w	r3, r7, #8
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe ffa6 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057bc:	e058      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057be:	4b5c      	ldr	r3, [pc, #368]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80057c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d103      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 80057cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80057d2:	e04d      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057d8:	e04a      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80057da:	4b55      	ldr	r3, [pc, #340]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80057dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057e8:	d103      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80057ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80057f0:	e03e      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057f6:	e03b      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80057fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005804:	4b4a      	ldr	r3, [pc, #296]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b02      	cmp	r3, #2
 800580e:	d10c      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005816:	4b46      	ldr	r3, [pc, #280]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	08db      	lsrs	r3, r3, #3
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	4a44      	ldr	r2, [pc, #272]	@ (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	637b      	str	r3, [r7, #52]	@ 0x34
 8005828:	e01e      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800582a:	4b41      	ldr	r3, [pc, #260]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005836:	d106      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583e:	d102      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005840:	4b3d      	ldr	r3, [pc, #244]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34
 8005844:	e010      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005846:	4b3a      	ldr	r3, [pc, #232]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005852:	d106      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585a:	d102      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800585c:	4b37      	ldr	r3, [pc, #220]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800585e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8005868:	e002      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800586e:	bf00      	nop
          }
        }
        break;
 8005870:	e3f5      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005872:	4b2f      	ldr	r3, [pc, #188]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005874:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005878:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800587c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005884:	d05f      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800588c:	f200 8094 	bhi.w	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005896:	d03f      	beq.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800589e:	f200 808b 	bhi.w	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058a8:	d028      	beq.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058b0:	f200 8082 	bhi.w	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ba:	d017      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c2:	d879      	bhi.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80058d2:	e071      	b.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fd fa3c 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80058d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80058da:	e070      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe fda3 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80058ea:	e068      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ec:	f107 0308 	add.w	r3, r7, #8
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe ff07 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80058fa:	e060      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80058fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d103      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005910:	e055      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005916:	e052      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005918:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800591a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800591e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005926:	d10b      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8005928:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800592c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800592e:	e046      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8005930:	44020c00 	.word	0x44020c00
 8005934:	03d09000 	.word	0x03d09000
 8005938:	003d0900 	.word	0x003d0900
 800593c:	017d7840 	.word	0x017d7840
              frequency = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005944:	e03b      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005946:	4bae      	ldr	r3, [pc, #696]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800594c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005952:	4bab      	ldr	r3, [pc, #684]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d10c      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005964:	4ba6      	ldr	r3, [pc, #664]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	4aa5      	ldr	r2, [pc, #660]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
 8005976:	e01e      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005978:	4ba1      	ldr	r3, [pc, #644]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005984:	d106      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8005986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d102      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800598e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34
 8005992:	e010      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005994:	4b9a      	ldr	r3, [pc, #616]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a0:	d106      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a8:	d102      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80059aa:	4b98      	ldr	r3, [pc, #608]	@ (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ae:	e002      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80059b4:	e003      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80059b6:	e002      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80059bc:	bf00      	nop
          }
        }
        break;
 80059be:	e34e      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80059c0:	4b8f      	ldr	r3, [pc, #572]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80059c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80059cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059d8:	d105      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80059e0:	4b8a      	ldr	r3, [pc, #552]	@ (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80059e4:	e33b      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ec:	d107      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059ee:	f107 0320 	add.w	r3, r7, #32
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fbae 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059fc:	e32f      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a04:	d107      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a06:	f107 0314 	add.w	r3, r7, #20
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fd0e 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a14:	e323      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a1a:	e320      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005a1c:	4b78      	ldr	r3, [pc, #480]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d860      	bhi.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a49 	.word	0x08005a49
 8005a38:	08005a59 	.word	0x08005a59
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a7f 	.word	0x08005a7f
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a48:	f107 0320 	add.w	r3, r7, #32
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fb81 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005a56:	e04e      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a58:	f107 0314 	add.w	r3, r7, #20
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe fce5 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005a66:	e046      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a68:	f107 0308 	add.w	r3, r7, #8
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe fe49 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005a76:	e03e      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005a78:	4b65      	ldr	r3, [pc, #404]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005a7c:	e03b      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a7e:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a84:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a9c:	4b58      	ldr	r3, [pc, #352]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	08db      	lsrs	r3, r3, #3
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	4a57      	ldr	r2, [pc, #348]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aae:	e01e      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ab0:	4b53      	ldr	r3, [pc, #332]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005abc:	d106      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8005abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac4:	d102      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ac6:	4b50      	ldr	r3, [pc, #320]	@ (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aca:	e010      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005acc:	4b4c      	ldr	r3, [pc, #304]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ad8:	d106      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ae0:	d102      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ae6:	e002      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005aec:	e003      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8005aee:	e002      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005af4:	bf00      	nop
          }
        }
        break;
 8005af6:	e2b2      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005af8:	4b41      	ldr	r3, [pc, #260]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b02:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	f200 80a4 	bhi.w	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b99 	.word	0x08005b99
 8005b18:	08005c55 	.word	0x08005c55
 8005b1c:	08005c55 	.word	0x08005c55
 8005b20:	08005c55 	.word	0x08005c55
 8005b24:	08005c55 	.word	0x08005c55
 8005b28:	08005c55 	.word	0x08005c55
 8005b2c:	08005c55 	.word	0x08005c55
 8005b30:	08005c55 	.word	0x08005c55
 8005b34:	08005ba9 	.word	0x08005ba9
 8005b38:	08005c55 	.word	0x08005c55
 8005b3c:	08005c55 	.word	0x08005c55
 8005b40:	08005c55 	.word	0x08005c55
 8005b44:	08005c55 	.word	0x08005c55
 8005b48:	08005c55 	.word	0x08005c55
 8005b4c:	08005c55 	.word	0x08005c55
 8005b50:	08005c55 	.word	0x08005c55
 8005b54:	08005bb9 	.word	0x08005bb9
 8005b58:	08005c55 	.word	0x08005c55
 8005b5c:	08005c55 	.word	0x08005c55
 8005b60:	08005c55 	.word	0x08005c55
 8005b64:	08005c55 	.word	0x08005c55
 8005b68:	08005c55 	.word	0x08005c55
 8005b6c:	08005c55 	.word	0x08005c55
 8005b70:	08005c55 	.word	0x08005c55
 8005b74:	08005bc9 	.word	0x08005bc9
 8005b78:	08005c55 	.word	0x08005c55
 8005b7c:	08005c55 	.word	0x08005c55
 8005b80:	08005c55 	.word	0x08005c55
 8005b84:	08005c55 	.word	0x08005c55
 8005b88:	08005c55 	.word	0x08005c55
 8005b8c:	08005c55 	.word	0x08005c55
 8005b90:	08005c55 	.word	0x08005c55
 8005b94:	08005bcf 	.word	0x08005bcf
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b98:	f107 0320 	add.w	r3, r7, #32
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe fad9 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005ba6:	e058      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe fc3d 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005bb6:	e050      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bb8:	f107 0308 	add.w	r3, r7, #8
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe fda1 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005bc6:	e048      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005bc8:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005bcc:	e045      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bce:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bd4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bda:	4b09      	ldr	r3, [pc, #36]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d116      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8005be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d113      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005bec:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	08db      	lsrs	r3, r3, #3
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	4a03      	ldr	r2, [pc, #12]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfe:	e028      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005c00:	44020c00 	.word	0x44020c00
 8005c04:	03d09000 	.word	0x03d09000
 8005c08:	003d0900 	.word	0x003d0900
 8005c0c:	017d7840 	.word	0x017d7840
 8005c10:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c14:	4b95      	ldr	r3, [pc, #596]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c20:	d106      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c28:	d102      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005c2a:	4b91      	ldr	r3, [pc, #580]	@ (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c2e:	e010      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c30:	4b8e      	ldr	r3, [pc, #568]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8005c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c44:	d102      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005c46:	4b8b      	ldr	r3, [pc, #556]	@ (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4a:	e002      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005c50:	e003      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8005c52:	e002      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005c58:	bf00      	nop
          }
        }
        break;
 8005c5a:	e200      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005c5c:	4b83      	ldr	r3, [pc, #524]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c62:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005c66:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c6e:	d031      	beq.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c76:	d866      	bhi.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c7c:	d027      	beq.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c82:	d860      	bhi.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	2b80      	cmp	r3, #128	@ 0x80
 8005c88:	d019      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	2b80      	cmp	r3, #128	@ 0x80
 8005c8e:	d85a      	bhi.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d008      	beq.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8005c9c:	e053      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c9e:	f107 0320 	add.w	r3, r7, #32
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fa56 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005cac:	e04e      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cae:	f107 0314 	add.w	r3, r7, #20
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fbba 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005cbc:	e046      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cbe:	f107 0308 	add.w	r3, r7, #8
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fd1e 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005ccc:	e03e      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005cce:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8005cd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005cd2:	e03b      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cd4:	4b65      	ldr	r3, [pc, #404]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cda:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ce0:	4b62      	ldr	r3, [pc, #392]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d10c      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	08db      	lsrs	r3, r3, #3
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d04:	e01e      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d06:	4b59      	ldr	r3, [pc, #356]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d12:	d106      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8005d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1a:	d102      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005d1c:	4b54      	ldr	r3, [pc, #336]	@ (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d20:	e010      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d22:	4b52      	ldr	r3, [pc, #328]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d2e:	d106      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8005d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d36:	d102      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005d38:	4b4e      	ldr	r3, [pc, #312]	@ (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3c:	e002      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8005d44:	e002      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005d4a:	bf00      	nop
          }
        }
        break;
 8005d4c:	e187      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8005d4e:	4b47      	ldr	r3, [pc, #284]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d54:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005d58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005d60:	f7fd f80c 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8005d64:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005d66:	e17a      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8005d68:	4b40      	ldr	r3, [pc, #256]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d74:	d10b      	bne.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d7e:	f107 0314 	add.w	r3, r7, #20
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fb52 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d8c:	e045      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8005d8e:	4b37      	ldr	r3, [pc, #220]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d9a:	d10b      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da2:	d107      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005da4:	f107 0308 	add.w	r3, r7, #8
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe fcab 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db2:	e032      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8005db4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d10d      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005dc6:	d109      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dc8:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	08db      	lsrs	r3, r3, #3
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	e01e      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005ddc:	4b23      	ldr	r3, [pc, #140]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de8:	d106      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df0:	d102      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8005df2:	4b1f      	ldr	r3, [pc, #124]	@ (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df6:	e010      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8005df8:	4b1c      	ldr	r3, [pc, #112]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e04:	d106      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005e0c:	d102      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8005e0e:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e12:	e002      	b.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e18:	e121      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005e1a:	e120      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e1c:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d861      	bhi.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8005e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e4d 	.word	0x08005e4d
 8005e3c:	08005e5d 	.word	0x08005e5d
 8005e40:	08005e81 	.word	0x08005e81
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005e44:	f7fc ff68 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8005e48:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005e4a:	e055      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e4c:	f107 0320 	add.w	r3, r7, #32
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe f97f 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e5a:	e04d      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe fae3 	bl	800442c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e6a:	e045      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005e6c:	44020c00 	.word	0x44020c00
 8005e70:	003d0900 	.word	0x003d0900
 8005e74:	017d7840 	.word	0x017d7840
 8005e78:	00bb8000 	.word	0x00bb8000
 8005e7c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e80:	4b79      	ldr	r3, [pc, #484]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e8c:	4b76      	ldr	r3, [pc, #472]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d10c      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e9e:	4b72      	ldr	r3, [pc, #456]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	4a70      	ldr	r2, [pc, #448]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8005eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb0:	e01e      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebe:	d106      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec6:	d102      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ec8:	4b69      	ldr	r3, [pc, #420]	@ (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8005eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ecc:	e010      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ece:	4b66      	ldr	r3, [pc, #408]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eda:	d106      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ee2:	d102      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005ee4:	4b63      	ldr	r3, [pc, #396]	@ (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8005ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005eee:	e003      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005ef0:	e002      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005ef6:	bf00      	nop
          }
        }
        break;
 8005ef8:	e0b1      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005efa:	4b5b      	ldr	r3, [pc, #364]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f04:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005f06:	4b58      	ldr	r3, [pc, #352]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d106      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8005f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f20:	e01f      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8005f22:	4b51      	ldr	r3, [pc, #324]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f30:	d106      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	2b40      	cmp	r3, #64	@ 0x40
 8005f36:	d103      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8005f38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3e:	e010      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005f40:	4b49      	ldr	r3, [pc, #292]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	2b80      	cmp	r3, #128	@ 0x80
 8005f52:	d103      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8005f54:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f5a:	e002      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005f60:	e07d      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005f62:	e07c      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005f64:	4b40      	ldr	r3, [pc, #256]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f6a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005f70:	4b3d      	ldr	r3, [pc, #244]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7c:	d105      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8005f84:	4b3c      	ldr	r3, [pc, #240]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f88:	e031      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005f8a:	4b37      	ldr	r3, [pc, #220]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f96:	d10a      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d107      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f9e:	f107 0320 	add.w	r3, r7, #32
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe f8d6 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fac:	e01f      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005fae:	4b2e      	ldr	r3, [pc, #184]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d106      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d103      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8005fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc8:	e011      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005fca:	4b27      	ldr	r3, [pc, #156]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd8:	d106      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	2b30      	cmp	r3, #48	@ 0x30
 8005fde:	d103      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8005fe0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe6:	e002      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005fec:	e037      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005fee:	e036      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005ff2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ff6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ffa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	d107      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006002:	f107 0320 	add.w	r3, r7, #32
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe f8a4 	bl	8004154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006010:	e025      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800601a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800601e:	d10a      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	2b20      	cmp	r3, #32
 8006024:	d107      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006026:	f107 0308 	add.w	r3, r7, #8
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fb6a 	bl	8004704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	637b      	str	r3, [r7, #52]	@ 0x34
 8006034:	e00f      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8006044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006046:	2b30      	cmp	r3, #48	@ 0x30
 8006048:	d102      	bne.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800604a:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
 800604e:	e002      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8006054:	e003      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006056:	e002      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800605c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800605e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006060:	4618      	mov	r0, r3
 8006062:	373c      	adds	r7, #60	@ 0x3c
 8006064:	46bd      	mov	sp, r7
 8006066:	bd90      	pop	{r4, r7, pc}
 8006068:	44020c00 	.word	0x44020c00
 800606c:	03d09000 	.word	0x03d09000
 8006070:	003d0900 	.word	0x003d0900
 8006074:	017d7840 	.word	0x017d7840
 8006078:	02dc6c00 	.word	0x02dc6c00

0800607c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006084:	4b48      	ldr	r3, [pc, #288]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a47      	ldr	r2, [pc, #284]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800608a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800608e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006090:	f7fb fc04 	bl	800189c <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006096:	e008      	b.n	80060aa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006098:	f7fb fc00 	bl	800189c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e07a      	b.n	80061a0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060aa:	4b3f      	ldr	r3, [pc, #252]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80060b6:	4b3c      	ldr	r3, [pc, #240]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6811      	ldr	r1, [r2, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6852      	ldr	r2, [r2, #4]
 80060ca:	0212      	lsls	r2, r2, #8
 80060cc:	430a      	orrs	r2, r1
 80060ce:	4936      	ldr	r1, [pc, #216]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	3b01      	subs	r3, #1
 80060da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	025b      	lsls	r3, r3, #9
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	061b      	lsls	r3, r3, #24
 8006100:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006104:	4928      	ldr	r1, [pc, #160]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006106:	4313      	orrs	r3, r2
 8006108:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800610a:	4b27      	ldr	r3, [pc, #156]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	f023 020c 	bic.w	r2, r3, #12
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	4924      	ldr	r1, [pc, #144]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006118:	4313      	orrs	r3, r2
 800611a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800611c:	4b22      	ldr	r3, [pc, #136]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	f023 0220 	bic.w	r2, r3, #32
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	491f      	ldr	r1, [pc, #124]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800612a:	4313      	orrs	r3, r2
 800612c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800612e:	4b1e      	ldr	r3, [pc, #120]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	491c      	ldr	r1, [pc, #112]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006138:	4313      	orrs	r3, r2
 800613a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800613c:	4b1a      	ldr	r3, [pc, #104]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006142:	f023 0310 	bic.w	r3, r3, #16
 8006146:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006148:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800614a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006150:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6a12      	ldr	r2, [r2, #32]
 8006158:	00d2      	lsls	r2, r2, #3
 800615a:	4913      	ldr	r1, [pc, #76]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800615c:	4313      	orrs	r3, r2
 800615e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006160:	4b11      	ldr	r3, [pc, #68]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006164:	4a10      	ldr	r2, [pc, #64]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006166:	f043 0310 	orr.w	r3, r3, #16
 800616a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800616c:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006172:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006176:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006178:	f7fb fb90 	bl	800189c <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800617e:	e008      	b.n	8006192 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006180:	f7fb fb8c 	bl	800189c <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e006      	b.n	80061a0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006192:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <RCCEx_PLL2_Config+0x12c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0

}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	44020c00 	.word	0x44020c00

080061ac <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80061b4:	4b48      	ldr	r3, [pc, #288]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a47      	ldr	r2, [pc, #284]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 80061ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061c0:	f7fb fb6c 	bl	800189c <HAL_GetTick>
 80061c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061c6:	e008      	b.n	80061da <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061c8:	f7fb fb68 	bl	800189c <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d901      	bls.n	80061da <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e07a      	b.n	80062d0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061da:	4b3f      	ldr	r3, [pc, #252]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f0      	bne.n	80061c8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80061e6:	4b3c      	ldr	r3, [pc, #240]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061ee:	f023 0303 	bic.w	r3, r3, #3
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6811      	ldr	r1, [r2, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6852      	ldr	r2, [r2, #4]
 80061fa:	0212      	lsls	r2, r2, #8
 80061fc:	430a      	orrs	r2, r1
 80061fe:	4936      	ldr	r1, [pc, #216]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006200:	4313      	orrs	r3, r2
 8006202:	630b      	str	r3, [r1, #48]	@ 0x30
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	3b01      	subs	r3, #1
 800620a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	3b01      	subs	r3, #1
 8006214:	025b      	lsls	r3, r3, #9
 8006216:	b29b      	uxth	r3, r3
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	3b01      	subs	r3, #1
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	3b01      	subs	r3, #1
 800622e:	061b      	lsls	r3, r3, #24
 8006230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006234:	4928      	ldr	r1, [pc, #160]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800623a:	4b27      	ldr	r3, [pc, #156]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	f023 020c 	bic.w	r2, r3, #12
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	4924      	ldr	r1, [pc, #144]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800624c:	4b22      	ldr	r3, [pc, #136]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 800624e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006250:	f023 0220 	bic.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	491f      	ldr	r1, [pc, #124]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800625e:	4b1e      	ldr	r3, [pc, #120]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	491c      	ldr	r1, [pc, #112]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006268:	4313      	orrs	r3, r2
 800626a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800626c:	4b1a      	ldr	r3, [pc, #104]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 800626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006270:	4a19      	ldr	r2, [pc, #100]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006272:	f023 0310 	bic.w	r3, r3, #16
 8006276:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8006278:	4b17      	ldr	r3, [pc, #92]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 800627a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800627c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006280:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6a12      	ldr	r2, [r2, #32]
 8006288:	00d2      	lsls	r2, r2, #3
 800628a:	4913      	ldr	r1, [pc, #76]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 800628c:	4313      	orrs	r3, r2
 800628e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8006290:	4b11      	ldr	r3, [pc, #68]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006294:	4a10      	ldr	r2, [pc, #64]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 8006296:	f043 0310 	orr.w	r3, r3, #16
 800629a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800629c:	4b0e      	ldr	r3, [pc, #56]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0d      	ldr	r2, [pc, #52]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 80062a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062a8:	f7fb faf8 	bl	800189c <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062ae:	e008      	b.n	80062c2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062b0:	f7fb faf4 	bl	800189c <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e006      	b.n	80062d0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062c2:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <RCCEx_PLL3_Config+0x12c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	44020c00 	.word	0x44020c00

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e042      	b.n	8006374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fb f8db 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	@ 0x24
 800630a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa74 	bl	8006814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f8c3 	bl	80064b8 <UART_SetConfig>
 8006332:	4603      	mov	r3, r0
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e01b      	b.n	8006374 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800634a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800635a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 faf3 	bl	8006958 <UART_CheckIdleState>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	@ 0x28
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006392:	2b20      	cmp	r3, #32
 8006394:	f040 808b 	bne.w	80064ae <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_UART_Transmit+0x28>
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e083      	b.n	80064b0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b2:	2b80      	cmp	r3, #128	@ 0x80
 80063b4:	d107      	bne.n	80063c6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063c4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2221      	movs	r2, #33	@ 0x21
 80063d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063d6:	f7fb fa61 	bl	800189c <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063f4:	d108      	bne.n	8006408 <HAL_UART_Transmit+0x8c>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e003      	b.n	8006410 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006410:	e030      	b.n	8006474 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2200      	movs	r2, #0
 800641a:	2180      	movs	r1, #128	@ 0x80
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fb45 	bl	8006aac <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e03d      	b.n	80064b0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006448:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	3302      	adds	r3, #2
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e007      	b.n	8006462 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1c8      	bne.n	8006412 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	2140      	movs	r1, #64	@ 0x40
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fb0e 	bl	8006aac <UART_WaitOnFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e006      	b.n	80064b0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064bc:	b094      	sub	sp, #80	@ 0x50
 80064be:	af00      	add	r7, sp, #0
 80064c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b83      	ldr	r3, [pc, #524]	@ (80066dc <UART_SetConfig+0x224>)
 80064ce:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	431a      	orrs	r2, r3
 80064da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	431a      	orrs	r2, r3
 80064e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	497c      	ldr	r1, [pc, #496]	@ (80066e0 <UART_SetConfig+0x228>)
 80064f0:	4019      	ands	r1, r3
 80064f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	68d9      	ldr	r1, [r3, #12]
 800650a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	ea40 0301 	orr.w	r3, r0, r1
 8006512:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b6f      	ldr	r3, [pc, #444]	@ (80066dc <UART_SetConfig+0x224>)
 8006520:	429a      	cmp	r2, r3
 8006522:	d009      	beq.n	8006538 <UART_SetConfig+0x80>
 8006524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b6e      	ldr	r3, [pc, #440]	@ (80066e4 <UART_SetConfig+0x22c>)
 800652a:	429a      	cmp	r2, r3
 800652c:	d004      	beq.n	8006538 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006534:	4313      	orrs	r3, r2
 8006536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006542:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800654c:	430b      	orrs	r3, r1
 800654e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006556:	f023 000f 	bic.w	r0, r3, #15
 800655a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	ea40 0301 	orr.w	r3, r0, r1
 8006566:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4b5e      	ldr	r3, [pc, #376]	@ (80066e8 <UART_SetConfig+0x230>)
 800656e:	429a      	cmp	r2, r3
 8006570:	d102      	bne.n	8006578 <UART_SetConfig+0xc0>
 8006572:	2301      	movs	r3, #1
 8006574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006576:	e032      	b.n	80065de <UART_SetConfig+0x126>
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4b5b      	ldr	r3, [pc, #364]	@ (80066ec <UART_SetConfig+0x234>)
 800657e:	429a      	cmp	r2, r3
 8006580:	d102      	bne.n	8006588 <UART_SetConfig+0xd0>
 8006582:	2302      	movs	r3, #2
 8006584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006586:	e02a      	b.n	80065de <UART_SetConfig+0x126>
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4b58      	ldr	r3, [pc, #352]	@ (80066f0 <UART_SetConfig+0x238>)
 800658e:	429a      	cmp	r2, r3
 8006590:	d102      	bne.n	8006598 <UART_SetConfig+0xe0>
 8006592:	2304      	movs	r3, #4
 8006594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006596:	e022      	b.n	80065de <UART_SetConfig+0x126>
 8006598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b55      	ldr	r3, [pc, #340]	@ (80066f4 <UART_SetConfig+0x23c>)
 800659e:	429a      	cmp	r2, r3
 80065a0:	d102      	bne.n	80065a8 <UART_SetConfig+0xf0>
 80065a2:	2308      	movs	r3, #8
 80065a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065a6:	e01a      	b.n	80065de <UART_SetConfig+0x126>
 80065a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	4b52      	ldr	r3, [pc, #328]	@ (80066f8 <UART_SetConfig+0x240>)
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d102      	bne.n	80065b8 <UART_SetConfig+0x100>
 80065b2:	2310      	movs	r3, #16
 80065b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b6:	e012      	b.n	80065de <UART_SetConfig+0x126>
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b4f      	ldr	r3, [pc, #316]	@ (80066fc <UART_SetConfig+0x244>)
 80065be:	429a      	cmp	r2, r3
 80065c0:	d102      	bne.n	80065c8 <UART_SetConfig+0x110>
 80065c2:	2320      	movs	r3, #32
 80065c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c6:	e00a      	b.n	80065de <UART_SetConfig+0x126>
 80065c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b43      	ldr	r3, [pc, #268]	@ (80066dc <UART_SetConfig+0x224>)
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d103      	bne.n	80065da <UART_SetConfig+0x122>
 80065d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065d8:	e001      	b.n	80065de <UART_SetConfig+0x126>
 80065da:	2300      	movs	r3, #0
 80065dc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b3e      	ldr	r3, [pc, #248]	@ (80066dc <UART_SetConfig+0x224>)
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d005      	beq.n	80065f4 <UART_SetConfig+0x13c>
 80065e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4b3d      	ldr	r3, [pc, #244]	@ (80066e4 <UART_SetConfig+0x22c>)
 80065ee:	429a      	cmp	r2, r3
 80065f0:	f040 8088 	bne.w	8006704 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80065f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f6:	2200      	movs	r2, #0
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80065fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006600:	f7fe f9ec 	bl	80049dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006604:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80eb 	beq.w	80067e4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	4a3b      	ldr	r2, [pc, #236]	@ (8006700 <UART_SetConfig+0x248>)
 8006614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006618:	461a      	mov	r2, r3
 800661a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800661c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4413      	add	r3, r2
 800662c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800662e:	429a      	cmp	r2, r3
 8006630:	d305      	bcc.n	800663e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800663a:	429a      	cmp	r2, r3
 800663c:	d903      	bls.n	8006646 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006644:	e048      	b.n	80066d8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006648:	2200      	movs	r2, #0
 800664a:	61bb      	str	r3, [r7, #24]
 800664c:	61fa      	str	r2, [r7, #28]
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	4a2b      	ldr	r2, [pc, #172]	@ (8006700 <UART_SetConfig+0x248>)
 8006654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006658:	b29b      	uxth	r3, r3
 800665a:	2200      	movs	r2, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	617a      	str	r2, [r7, #20]
 8006660:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006664:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006668:	f7f9 fe1c 	bl	80002a4 <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	020b      	lsls	r3, r1, #8
 800667e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006682:	0202      	lsls	r2, r0, #8
 8006684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006686:	6849      	ldr	r1, [r1, #4]
 8006688:	0849      	lsrs	r1, r1, #1
 800668a:	2000      	movs	r0, #0
 800668c:	460c      	mov	r4, r1
 800668e:	4605      	mov	r5, r0
 8006690:	eb12 0804 	adds.w	r8, r2, r4
 8006694:	eb43 0905 	adc.w	r9, r3, r5
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	60bb      	str	r3, [r7, #8]
 80066a0:	60fa      	str	r2, [r7, #12]
 80066a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066a6:	4640      	mov	r0, r8
 80066a8:	4649      	mov	r1, r9
 80066aa:	f7f9 fdfb 	bl	80002a4 <__aeabi_uldivmod>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4613      	mov	r3, r2
 80066b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066bc:	d308      	bcc.n	80066d0 <UART_SetConfig+0x218>
 80066be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066c4:	d204      	bcs.n	80066d0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80066c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	e003      	b.n	80066d8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80066d6:	e085      	b.n	80067e4 <UART_SetConfig+0x32c>
 80066d8:	e084      	b.n	80067e4 <UART_SetConfig+0x32c>
 80066da:	bf00      	nop
 80066dc:	44002400 	.word	0x44002400
 80066e0:	cfff69f3 	.word	0xcfff69f3
 80066e4:	54002400 	.word	0x54002400
 80066e8:	40013800 	.word	0x40013800
 80066ec:	40004400 	.word	0x40004400
 80066f0:	40004800 	.word	0x40004800
 80066f4:	40004c00 	.word	0x40004c00
 80066f8:	40005000 	.word	0x40005000
 80066fc:	40006400 	.word	0x40006400
 8006700:	080078ec 	.word	0x080078ec
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800670c:	d13c      	bne.n	8006788 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800670e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006710:	2200      	movs	r2, #0
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	607a      	str	r2, [r7, #4]
 8006716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671a:	f7fe f95f 	bl	80049dc <HAL_RCCEx_GetPeriphCLKFreq>
 800671e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d05e      	beq.n	80067e4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	4a39      	ldr	r2, [pc, #228]	@ (8006810 <UART_SetConfig+0x358>)
 800672c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006730:	461a      	mov	r2, r3
 8006732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006734:	fbb3 f3f2 	udiv	r3, r3, r2
 8006738:	005a      	lsls	r2, r3, #1
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	441a      	add	r2, r3
 8006742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	fbb2 f3f3 	udiv	r3, r2, r3
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800674c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800674e:	2b0f      	cmp	r3, #15
 8006750:	d916      	bls.n	8006780 <UART_SetConfig+0x2c8>
 8006752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006758:	d212      	bcs.n	8006780 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800675a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675c:	b29b      	uxth	r3, r3
 800675e:	f023 030f 	bic.w	r3, r3, #15
 8006762:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	b29b      	uxth	r3, r3
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	b29a      	uxth	r2, r3
 8006770:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006772:	4313      	orrs	r3, r2
 8006774:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800677c:	60da      	str	r2, [r3, #12]
 800677e:	e031      	b.n	80067e4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006786:	e02d      	b.n	80067e4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800678a:	2200      	movs	r2, #0
 800678c:	469a      	mov	sl, r3
 800678e:	4693      	mov	fp, r2
 8006790:	4650      	mov	r0, sl
 8006792:	4659      	mov	r1, fp
 8006794:	f7fe f922 	bl	80049dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006798:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800679a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d021      	beq.n	80067e4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006810 <UART_SetConfig+0x358>)
 80067a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	441a      	add	r2, r3
 80067ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d909      	bls.n	80067de <UART_SetConfig+0x326>
 80067ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d0:	d205      	bcs.n	80067de <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	e002      	b.n	80067e4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e6:	2201      	movs	r2, #1
 80067e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ee:	2201      	movs	r2, #1
 80067f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f6:	2200      	movs	r2, #0
 80067f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fc:	2200      	movs	r2, #0
 80067fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006800:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006804:	4618      	mov	r0, r3
 8006806:	3750      	adds	r7, #80	@ 0x50
 8006808:	46bd      	mov	sp, r7
 800680a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800680e:	bf00      	nop
 8006810:	080078ec 	.word	0x080078ec

08006814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01a      	beq.n	800692a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006912:	d10a      	bne.n	800692a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
  }
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b098      	sub	sp, #96	@ 0x60
 800695c:	af02      	add	r7, sp, #8
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006968:	f7fa ff98 	bl	800189c <HAL_GetTick>
 800696c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b08      	cmp	r3, #8
 800697a:	d12f      	bne.n	80069dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800697c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006984:	2200      	movs	r2, #0
 8006986:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f88e 	bl	8006aac <UART_WaitOnFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d022      	beq.n	80069dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e063      	b.n	8006aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d149      	bne.n	8006a7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069f2:	2200      	movs	r2, #0
 80069f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f857 	bl	8006aac <UART_WaitOnFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d03c      	beq.n	8006a7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	623b      	str	r3, [r7, #32]
   return(result);
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a56:	61fa      	str	r2, [r7, #28]
 8006a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	617b      	str	r3, [r7, #20]
   return(result);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e012      	b.n	8006aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3758      	adds	r7, #88	@ 0x58
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006abc:	e04f      	b.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d04b      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac6:	f7fa fee9 	bl	800189c <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d302      	bcc.n	8006adc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e04e      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d037      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b80      	cmp	r3, #128	@ 0x80
 8006af2:	d034      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d031      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d110      	bne.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f838 	bl	8006b86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2208      	movs	r2, #8
 8006b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e029      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b38:	d111      	bne.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f81e 	bl	8006b86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e00f      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	bf0c      	ite	eq
 8006b6e:	2301      	moveq	r3, #1
 8006b70:	2300      	movne	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d0a0      	beq.n	8006abe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b095      	sub	sp, #84	@ 0x54
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e6      	bne.n	8006b8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e3      	bne.n	8006bc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d118      	bne.n	8006c32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f023 0310 	bic.w	r3, r3, #16
 8006c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6979      	ldr	r1, [r7, #20]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e6      	bne.n	8006c00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c46:	bf00      	nop
 8006c48:	3754      	adds	r7, #84	@ 0x54
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e027      	b.n	8006cb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2224      	movs	r2, #36	@ 0x24
 8006c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e02d      	b.n	8006d38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2224      	movs	r2, #36	@ 0x24
 8006ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f84f 	bl	8006dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e02d      	b.n	8006db4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	@ 0x24
 8006d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f811 	bl	8006dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d108      	bne.n	8006dde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ddc:	e031      	b.n	8006e42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dde:	2308      	movs	r3, #8
 8006de0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006de2:	2308      	movs	r3, #8
 8006de4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	0e5b      	lsrs	r3, r3, #25
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	0f5b      	lsrs	r3, r3, #29
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	7b3a      	ldrb	r2, [r7, #12]
 8006e0a:	4911      	ldr	r1, [pc, #68]	@ (8006e50 <UARTEx_SetNbDataToProcess+0x94>)
 8006e0c:	5c8a      	ldrb	r2, [r1, r2]
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e12:	7b3a      	ldrb	r2, [r7, #12]
 8006e14:	490f      	ldr	r1, [pc, #60]	@ (8006e54 <UARTEx_SetNbDataToProcess+0x98>)
 8006e16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	7b7a      	ldrb	r2, [r7, #13]
 8006e28:	4909      	ldr	r1, [pc, #36]	@ (8006e50 <UARTEx_SetNbDataToProcess+0x94>)
 8006e2a:	5c8a      	ldrb	r2, [r1, r2]
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e30:	7b7a      	ldrb	r2, [r7, #13]
 8006e32:	4908      	ldr	r1, [pc, #32]	@ (8006e54 <UARTEx_SetNbDataToProcess+0x98>)
 8006e34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	08007904 	.word	0x08007904
 8006e54:	0800790c 	.word	0x0800790c

08006e58 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006e64:	f7fa fd1a 	bl	800189c <HAL_GetTick>
 8006e68:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e0bc      	b.n	8006ff0 <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a60      	ldr	r2, [pc, #384]	@ (8006ffc <HAL_XSPI_Init+0x1a4>)
 8006e7c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 80b1 	bne.w	8006ff0 <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fa fa5c 	bl	800134c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8006e94:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa5b 	bl	8007354 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	4b56      	ldr	r3, [pc, #344]	@ (8007000 <HAL_XSPI_Init+0x1a8>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68d1      	ldr	r1, [r2, #12]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6912      	ldr	r2, [r2, #16]
 8006eb0:	0412      	lsls	r2, r2, #16
 8006eb2:	4311      	orrs	r1, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6952      	ldr	r2, [r2, #20]
 8006eb8:	3a01      	subs	r2, #1
 8006eba:	0212      	lsls	r2, r2, #8
 8006ebc:	4311      	orrs	r1, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	69d2      	ldr	r2, [r2, #28]
 8006ec2:	4311      	orrs	r1, r2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a4a      	ldr	r2, [pc, #296]	@ (8006ffc <HAL_XSPI_Init+0x1a4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_XSPI_Init+0x88>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a4a      	ldr	r2, [pc, #296]	@ (8007004 <HAL_XSPI_Init+0x1ac>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d10a      	bne.n	8006ef6 <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f023 0108 	bic.w	r1, r3, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1a:	041a      	lsls	r2, r3, #16
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f2c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	021a      	lsls	r2, r3, #8
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	2120      	movs	r1, #32
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa0c 	bl	8007372 <XSPI_WaitFlagStateUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d145      	bne.n	8006ff0 <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f98:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d107      	bne.n	8006fd8 <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0202 	orr.w	r2, r2, #2
 8006fd6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fe0:	d103      	bne.n	8006fea <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	651a      	str	r2, [r3, #80]	@ 0x50
 8006fe8:	e002      	b.n	8006ff0 <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	47001400 	.word	0x47001400
 8007000:	f8e0c0fc 	.word	0xf8e0c0fc
 8007004:	57001400 	.word	0x57001400

08007008 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	@ 0x28
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007014:	f7fa fc42 	bl	800189c <HAL_GetTick>
 8007018:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007024:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d104      	bne.n	8007036 <HAL_XSPI_Command+0x2e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007034:	d115      	bne.n	8007062 <HAL_XSPI_Command+0x5a>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b14      	cmp	r3, #20
 800703a:	d107      	bne.n	800704c <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d00e      	beq.n	8007062 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8007048:	2b03      	cmp	r3, #3
 800704a:	d00a      	beq.n	8007062 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b24      	cmp	r3, #36	@ 0x24
 8007050:	d15e      	bne.n	8007110 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8007056:	2b01      	cmp	r3, #1
 8007058:	d003      	beq.n	8007062 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 800705e:	2b03      	cmp	r3, #3
 8007060:	d156      	bne.n	8007110 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2200      	movs	r2, #0
 800706a:	2120      	movs	r1, #32
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f980 	bl	8007372 <XSPI_WaitFlagStateUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d146      	bne.n	800710a <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f9ab 	bl	80073e0 <XSPI_ConfigCmd>
 800708a:	4603      	mov	r3, r0
 800708c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800708e:	7ffb      	ldrb	r3, [r7, #31]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d143      	bne.n	800711c <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10e      	bne.n	80070ba <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2200      	movs	r2, #0
 80070a4:	2120      	movs	r1, #32
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f963 	bl	8007372 <XSPI_WaitFlagStateUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2202      	movs	r2, #2
 80070b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80070b8:	e030      	b.n	800711c <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2204      	movs	r2, #4
 80070c6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80070c8:	e028      	b.n	800711c <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d10b      	bne.n	80070ea <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d6:	2b24      	cmp	r3, #36	@ 0x24
 80070d8:	d103      	bne.n	80070e2 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2204      	movs	r2, #4
 80070de:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80070e0:	e01c      	b.n	800711c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2214      	movs	r2, #20
 80070e6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80070e8:	e018      	b.n	800711c <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d114      	bne.n	800711c <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f6:	2b14      	cmp	r3, #20
 80070f8:	d103      	bne.n	8007102 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2204      	movs	r2, #4
 80070fe:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8007100:	e00c      	b.n	800711c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2224      	movs	r2, #36	@ 0x24
 8007106:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8007108:	e008      	b.n	800711c <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 800710a:	2302      	movs	r3, #2
 800710c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 800710e:	e005      	b.n	800711c <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2210      	movs	r2, #16
 8007118:	655a      	str	r2, [r3, #84]	@ 0x54
 800711a:	e000      	b.n	800711e <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 800711c:	bf00      	nop
  }

  return status;
 800711e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	@ 0x28
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007134:	f7fa fbb2 	bl	800189c <HAL_GetTick>
 8007138:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3350      	adds	r3, #80	@ 0x50
 8007140:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d105      	bne.n	8007154 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2208      	movs	r2, #8
 8007150:	655a      	str	r2, [r3, #84]	@ 0x54
 8007152:	e057      	b.n	8007204 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007158:	2b04      	cmp	r3, #4
 800715a:	d14e      	bne.n	80071fa <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007184:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2201      	movs	r2, #1
 800718e:	2104      	movs	r1, #4
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f8ee 	bl	8007372 <XSPI_WaitFlagStateUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800719a:	7ffb      	ldrb	r3, [r7, #31]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d113      	bne.n	80071c8 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b8:	1e5a      	subs	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1df      	bne.n	8007186 <HAL_XSPI_Transmit+0x5e>
 80071c6:	e000      	b.n	80071ca <HAL_XSPI_Transmit+0xa2>
          break;
 80071c8:	bf00      	nop

      if (status == HAL_OK)
 80071ca:	7ffb      	ldrb	r3, [r7, #31]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d119      	bne.n	8007204 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2201      	movs	r2, #1
 80071d8:	2102      	movs	r1, #2
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f8c9 	bl	8007372 <XSPI_WaitFlagStateUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80071e4:	7ffb      	ldrb	r3, [r7, #31]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2202      	movs	r2, #2
 80071f0:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2202      	movs	r2, #2
 80071f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80071f8:	e004      	b.n	8007204 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2210      	movs	r2, #16
 8007202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8007204:	7ffb      	ldrb	r3, [r7, #31]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	@ 0x30
 8007212:	af02      	add	r7, sp, #8
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800721a:	f7fa fb3f 	bl	800189c <HAL_GetTick>
 800721e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3350      	adds	r3, #80	@ 0x50
 8007226:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800722e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007238:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2208      	movs	r2, #8
 800724a:	655a      	str	r2, [r3, #84]	@ 0x54
 800724c:	e07c      	b.n	8007348 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007252:	2b04      	cmp	r3, #4
 8007254:	d172      	bne.n	800733c <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007282:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800728c:	d104      	bne.n	8007298 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	649a      	str	r2, [r3, #72]	@ 0x48
 8007296:	e011      	b.n	80072bc <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80072a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	649a      	str	r2, [r3, #72]	@ 0x48
 80072b0:	e004      	b.n	80072bc <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	2201      	movs	r2, #1
 80072c4:	2106      	movs	r1, #6
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f853 	bl	8007372 <XSPI_WaitFlagStateUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 80072d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d114      	bne.n	8007304 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f4:	1e5a      	subs	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1dc      	bne.n	80072bc <HAL_XSPI_Receive+0xae>
 8007302:	e000      	b.n	8007306 <HAL_XSPI_Receive+0xf8>
          break;
 8007304:	bf00      	nop

      if (status == HAL_OK)
 8007306:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11c      	bne.n	8007348 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	2201      	movs	r2, #1
 8007316:	2102      	movs	r1, #2
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f82a 	bl	8007372 <XSPI_WaitFlagStateUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8007324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2202      	movs	r2, #2
 8007332:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2202      	movs	r2, #2
 8007338:	651a      	str	r2, [r3, #80]	@ 0x50
 800733a:	e005      	b.n	8007348 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2210      	movs	r2, #16
 8007346:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8007348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800734c:	4618      	mov	r0, r3
 800734e:	3728      	adds	r7, #40	@ 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	603b      	str	r3, [r7, #0]
 800737e:	4613      	mov	r3, r2
 8007380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8007382:	e019      	b.n	80073b8 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d015      	beq.n	80073b8 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738c:	f7fa fa86 	bl	800189c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	429a      	cmp	r2, r3
 800739a:	d302      	bcc.n	80073a2 <XSPI_WaitFlagStateUntilTimeout+0x30>
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2202      	movs	r2, #2
 80073a6:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ac:	f043 0201 	orr.w	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e00e      	b.n	80073d6 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bf14      	ite	ne
 80073c6:	2301      	movne	r3, #1
 80073c8:	2300      	moveq	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d1d7      	bne.n	8007384 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b089      	sub	sp, #36	@ 0x24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80073fc:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d114      	bne.n	800744e <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800742c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8007436:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8007440:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e02c      	b.n	80074a8 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b03      	cmp	r3, #3
 8007454:	d114      	bne.n	8007480 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800745e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007468:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007472:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	e013      	b.n	80074a8 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007488:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8007492:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800749c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80074a6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b0:	431a      	orrs	r2, r3
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d105      	bne.n	80074ca <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d012      	beq.n	80074f8 <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ea:	4319      	orrs	r1, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f0:	430b      	orrs	r3, r1
 80074f2:	431a      	orrs	r2, r3
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f023 021f 	bic.w	r2, r3, #31
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007504:	431a      	orrs	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d009      	beq.n	8007526 <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3a01      	subs	r2, #1
 8007524:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01e      	beq.n	800756c <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007536:	d10a      	bne.n	800754e <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8007548:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800754c:	e00e      	b.n	800756c <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007556:	d109      	bne.n	800756c <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007568:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8099 	beq.w	80076a8 <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d055      	beq.n	800762a <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	d01e      	beq.n	80075c4 <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b68      	ldr	r3, [pc, #416]	@ (800772c <XSPI_ConfigCmd+0x34c>)
 800758c:	4013      	ands	r3, r2
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	68d1      	ldr	r1, [r2, #12]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	6952      	ldr	r2, [r2, #20]
 8007596:	4311      	orrs	r1, r2
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	6912      	ldr	r2, [r2, #16]
 800759c:	4311      	orrs	r1, r2
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	69d2      	ldr	r2, [r2, #28]
 80075a2:	4311      	orrs	r1, r2
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075a8:	4311      	orrs	r1, r2
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	6a12      	ldr	r2, [r2, #32]
 80075ae:	4311      	orrs	r1, r2
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80075b4:	4311      	orrs	r1, r2
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80075ba:	430a      	orrs	r2, r1
 80075bc:	431a      	orrs	r2, r3
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	e028      	b.n	8007616 <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	68d1      	ldr	r1, [r2, #12]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	6952      	ldr	r2, [r2, #20]
 80075d8:	4311      	orrs	r1, r2
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	6912      	ldr	r2, [r2, #16]
 80075de:	4311      	orrs	r1, r2
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	69d2      	ldr	r2, [r2, #28]
 80075e4:	4311      	orrs	r1, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075ea:	4311      	orrs	r1, r2
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	6a12      	ldr	r2, [r2, #32]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	431a      	orrs	r2, r3
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007600:	d109      	bne.n	8007616 <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8007606:	2b08      	cmp	r3, #8
 8007608:	d105      	bne.n	8007616 <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	6992      	ldr	r2, [r2, #24]
 8007626:	649a      	str	r2, [r3, #72]	@ 0x48
 8007628:	e078      	b.n	800771c <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762e:	2b00      	cmp	r3, #0
 8007630:	d017      	beq.n	8007662 <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800763a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68d1      	ldr	r1, [r2, #12]
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	6952      	ldr	r2, [r2, #20]
 8007646:	4311      	orrs	r1, r2
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	6912      	ldr	r2, [r2, #16]
 800764c:	4311      	orrs	r1, r2
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007652:	4311      	orrs	r1, r2
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007658:	430a      	orrs	r2, r1
 800765a:	431a      	orrs	r2, r3
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	e01d      	b.n	800769e <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68d9      	ldr	r1, [r3, #12]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	4319      	orrs	r1, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	430b      	orrs	r3, r1
 800767a:	431a      	orrs	r2, r3
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007688:	d109      	bne.n	800769e <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 800768e:	2b08      	cmp	r3, #8
 8007690:	d105      	bne.n	800769e <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e039      	b.n	800771c <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d030      	beq.n	8007712 <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d017      	beq.n	80076e8 <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80076c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	69d1      	ldr	r1, [r2, #28]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076cc:	4311      	orrs	r1, r2
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	6a12      	ldr	r2, [r2, #32]
 80076d2:	4311      	orrs	r1, r2
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80076d8:	4311      	orrs	r1, r2
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80076de:	430a      	orrs	r2, r1
 80076e0:	431a      	orrs	r2, r3
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e00e      	b.n	8007706 <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	69d9      	ldr	r1, [r3, #28]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	4319      	orrs	r1, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	430b      	orrs	r3, r1
 8007700:	431a      	orrs	r2, r3
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	6992      	ldr	r2, [r2, #24]
 800770e:	649a      	str	r2, [r3, #72]	@ 0x48
 8007710:	e004      	b.n	800771c <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2208      	movs	r2, #8
 800771a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 800771c:	7ffb      	ldrb	r3, [r7, #31]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3724      	adds	r7, #36	@ 0x24
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	f0ffc0c0 	.word	0xf0ffc0c0

08007730 <memset>:
 8007730:	4402      	add	r2, r0
 8007732:	4603      	mov	r3, r0
 8007734:	4293      	cmp	r3, r2
 8007736:	d100      	bne.n	800773a <memset+0xa>
 8007738:	4770      	bx	lr
 800773a:	f803 1b01 	strb.w	r1, [r3], #1
 800773e:	e7f9      	b.n	8007734 <memset+0x4>

08007740 <__libc_init_array>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4d0d      	ldr	r5, [pc, #52]	@ (8007778 <__libc_init_array+0x38>)
 8007744:	2600      	movs	r6, #0
 8007746:	4c0d      	ldr	r4, [pc, #52]	@ (800777c <__libc_init_array+0x3c>)
 8007748:	1b64      	subs	r4, r4, r5
 800774a:	10a4      	asrs	r4, r4, #2
 800774c:	42a6      	cmp	r6, r4
 800774e:	d109      	bne.n	8007764 <__libc_init_array+0x24>
 8007750:	4d0b      	ldr	r5, [pc, #44]	@ (8007780 <__libc_init_array+0x40>)
 8007752:	2600      	movs	r6, #0
 8007754:	4c0b      	ldr	r4, [pc, #44]	@ (8007784 <__libc_init_array+0x44>)
 8007756:	f000 f817 	bl	8007788 <_init>
 800775a:	1b64      	subs	r4, r4, r5
 800775c:	10a4      	asrs	r4, r4, #2
 800775e:	42a6      	cmp	r6, r4
 8007760:	d105      	bne.n	800776e <__libc_init_array+0x2e>
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	f855 3b04 	ldr.w	r3, [r5], #4
 8007768:	3601      	adds	r6, #1
 800776a:	4798      	blx	r3
 800776c:	e7ee      	b.n	800774c <__libc_init_array+0xc>
 800776e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007772:	3601      	adds	r6, #1
 8007774:	4798      	blx	r3
 8007776:	e7f2      	b.n	800775e <__libc_init_array+0x1e>
 8007778:	0800791c 	.word	0x0800791c
 800777c:	0800791c 	.word	0x0800791c
 8007780:	0800791c 	.word	0x0800791c
 8007784:	08007920 	.word	0x08007920

08007788 <_init>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr

08007794 <_fini>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr
