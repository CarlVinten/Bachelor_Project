
BP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa4  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080071f8  080071f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072fc  080072fc  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072fc  080072fc  000082fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007304  08007304  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007308  08007308  00008308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800730c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08007318  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08007318  0000911c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119ce  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f95  00000000  00000000  0001aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0001c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f5  00000000  00000000  0001d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afbe  00000000  00000000  0001de3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa0d  00000000  00000000  00048dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dfd2  00000000  00000000  00058808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001667da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  00166820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001698b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	080071e0 	.word	0x080071e0

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	080071e0 	.word	0x080071e0

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b9b0 	b.w	800061c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	4688      	mov	r8, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	468e      	mov	lr, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d95f      	bls.n	80003aa <__udivmoddi4+0xd6>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	40b4      	lsls	r4, r6
 80002fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000300:	ea43 0e0e 	orr.w	lr, r3, lr
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fbbe f1f8 	udiv	r1, lr, r8
 8000312:	fb08 ee11 	mls	lr, r8, r1, lr
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x5e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x5c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 8154 	bhi.w	80005d8 <__udivmoddi4+0x304>
 8000330:	4601      	mov	r1, r0
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	b2a2      	uxth	r2, r4
 8000336:	fbb3 f0f8 	udiv	r0, r3, r8
 800033a:	fb08 3310 	mls	r3, r8, r0, r3
 800033e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000346:	4594      	cmp	ip, r2
 8000348:	d90b      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034a:	18ba      	adds	r2, r7, r2
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	bf2c      	ite	cs
 8000352:	2401      	movcs	r4, #1
 8000354:	2400      	movcc	r4, #0
 8000356:	4594      	cmp	ip, r2
 8000358:	d902      	bls.n	8000360 <__udivmoddi4+0x8c>
 800035a:	2c00      	cmp	r4, #0
 800035c:	f000 813f 	beq.w	80005de <__udivmoddi4+0x30a>
 8000360:	4618      	mov	r0, r3
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba2 020c 	sub.w	r2, r2, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f2      	lsrs	r2, r6
 8000370:	2300      	movs	r3, #0
 8000372:	e9c5 2300 	strd	r2, r3, [r5]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14e      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000392:	4543      	cmp	r3, r8
 8000394:	f0c0 8112 	bcc.w	80005bc <__udivmoddi4+0x2e8>
 8000398:	4282      	cmp	r2, r0
 800039a:	f240 810f 	bls.w	80005bc <__udivmoddi4+0x2e8>
 800039e:	4608      	mov	r0, r1
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d0e8      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003a4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a8:	e7e5      	b.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	f000 80ac 	beq.w	8000508 <__udivmoddi4+0x234>
 80003b0:	fab2 f682 	clz	r6, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	f040 80bb 	bne.w	8000530 <__udivmoddi4+0x25c>
 80003ba:	1a8b      	subs	r3, r1, r2
 80003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003c0:	b2bc      	uxth	r4, r7
 80003c2:	2101      	movs	r1, #1
 80003c4:	0c02      	lsrs	r2, r0, #16
 80003c6:	b280      	uxth	r0, r0
 80003c8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003d4:	fb04 f20c 	mul.w	r2, r4, ip
 80003d8:	429a      	cmp	r2, r3
 80003da:	d90e      	bls.n	80003fa <__udivmoddi4+0x126>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80ec 	beq.w	80005d0 <__udivmoddi4+0x2fc>
 80003f8:	46c4      	mov	ip, r8
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	fbb3 f8fe 	udiv	r8, r3, lr
 8000400:	fb0e 3318 	mls	r3, lr, r8, r3
 8000404:	fb04 f408 	mul.w	r4, r4, r8
 8000408:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800040c:	4294      	cmp	r4, r2
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x154>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 33ff 	add.w	r3, r8, #4294967295
 8000416:	bf2c      	ite	cs
 8000418:	2001      	movcs	r0, #1
 800041a:	2000      	movcc	r0, #0
 800041c:	4294      	cmp	r4, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x152>
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80d1 	beq.w	80005c8 <__udivmoddi4+0x2f4>
 8000426:	4698      	mov	r8, r3
 8000428:	1b12      	subs	r2, r2, r4
 800042a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa08 f401 	lsl.w	r4, r8, r1
 800043a:	fa00 f901 	lsl.w	r9, r0, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa28 f806 	lsr.w	r8, r8, r6
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f306 	lsr.w	r3, r0, r6
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fa1f fc87 	uxth.w	ip, r7
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fbb8 fef0 	udiv	lr, r8, r0
 800045c:	fb00 881e 	mls	r8, r0, lr, r8
 8000460:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000464:	fb0e f80c 	mul.w	r8, lr, ip
 8000468:	45a0      	cmp	r8, r4
 800046a:	d90e      	bls.n	800048a <__udivmoddi4+0x1b6>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000472:	bf2c      	ite	cs
 8000474:	f04f 0b01 	movcs.w	fp, #1
 8000478:	f04f 0b00 	movcc.w	fp, #0
 800047c:	45a0      	cmp	r8, r4
 800047e:	d903      	bls.n	8000488 <__udivmoddi4+0x1b4>
 8000480:	f1bb 0f00 	cmp.w	fp, #0
 8000484:	f000 80b8 	beq.w	80005f8 <__udivmoddi4+0x324>
 8000488:	46d6      	mov	lr, sl
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fa1f f883 	uxth.w	r8, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d90e      	bls.n	80004c4 <__udivmoddi4+0x1f0>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	bf2c      	ite	cs
 80004ae:	f04f 0801 	movcs.w	r8, #1
 80004b2:	f04f 0800 	movcc.w	r8, #0
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d903      	bls.n	80004c2 <__udivmoddi4+0x1ee>
 80004ba:	f1b8 0f00 	cmp.w	r8, #0
 80004be:	f000 809f 	beq.w	8000600 <__udivmoddi4+0x32c>
 80004c2:	4603      	mov	r3, r0
 80004c4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c8:	eba4 040c 	sub.w	r4, r4, ip
 80004cc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004d0:	4564      	cmp	r4, ip
 80004d2:	4673      	mov	r3, lr
 80004d4:	46e0      	mov	r8, ip
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0x20a>
 80004d8:	d107      	bne.n	80004ea <__udivmoddi4+0x216>
 80004da:	45f1      	cmp	r9, lr
 80004dc:	d205      	bcs.n	80004ea <__udivmoddi4+0x216>
 80004de:	ebbe 0302 	subs.w	r3, lr, r2
 80004e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e6:	3801      	subs	r0, #1
 80004e8:	46e0      	mov	r8, ip
 80004ea:	b15d      	cbz	r5, 8000504 <__udivmoddi4+0x230>
 80004ec:	ebb9 0203 	subs.w	r2, r9, r3
 80004f0:	eb64 0408 	sbc.w	r4, r4, r8
 80004f4:	fa04 f606 	lsl.w	r6, r4, r6
 80004f8:	fa22 f301 	lsr.w	r3, r2, r1
 80004fc:	40cc      	lsrs	r4, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e736      	b.n	8000376 <__udivmoddi4+0xa2>
 8000508:	fbb1 fcf2 	udiv	ip, r1, r2
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4614      	mov	r4, r2
 8000510:	b280      	uxth	r0, r0
 8000512:	4696      	mov	lr, r2
 8000514:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000518:	2620      	movs	r6, #32
 800051a:	4690      	mov	r8, r2
 800051c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000520:	4610      	mov	r0, r2
 8000522:	fbb1 f1f2 	udiv	r1, r1, r2
 8000526:	eba3 0308 	sub.w	r3, r3, r8
 800052a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052e:	e74b      	b.n	80003c8 <__udivmoddi4+0xf4>
 8000530:	40b7      	lsls	r7, r6
 8000532:	f1c6 0320 	rsb	r3, r6, #32
 8000536:	fa01 f206 	lsl.w	r2, r1, r6
 800053a:	fa21 f803 	lsr.w	r8, r1, r3
 800053e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000542:	fa20 f303 	lsr.w	r3, r0, r3
 8000546:	b2bc      	uxth	r4, r7
 8000548:	40b0      	lsls	r0, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	0c02      	lsrs	r2, r0, #16
 800054e:	0c19      	lsrs	r1, r3, #16
 8000550:	b280      	uxth	r0, r0
 8000552:	fbb8 f9fe 	udiv	r9, r8, lr
 8000556:	fb0e 8819 	mls	r8, lr, r9, r8
 800055a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	4588      	cmp	r8, r1
 8000564:	d951      	bls.n	800060a <__udivmoddi4+0x336>
 8000566:	1879      	adds	r1, r7, r1
 8000568:	f109 3cff 	add.w	ip, r9, #4294967295
 800056c:	bf2c      	ite	cs
 800056e:	f04f 0a01 	movcs.w	sl, #1
 8000572:	f04f 0a00 	movcc.w	sl, #0
 8000576:	4588      	cmp	r8, r1
 8000578:	d902      	bls.n	8000580 <__udivmoddi4+0x2ac>
 800057a:	f1ba 0f00 	cmp.w	sl, #0
 800057e:	d031      	beq.n	80005e4 <__udivmoddi4+0x310>
 8000580:	eba1 0108 	sub.w	r1, r1, r8
 8000584:	fbb1 f9fe 	udiv	r9, r1, lr
 8000588:	fb09 f804 	mul.w	r8, r9, r4
 800058c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000590:	b29b      	uxth	r3, r3
 8000592:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000596:	4543      	cmp	r3, r8
 8000598:	d235      	bcs.n	8000606 <__udivmoddi4+0x332>
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a0:	bf2c      	ite	cs
 80005a2:	f04f 0a01 	movcs.w	sl, #1
 80005a6:	f04f 0a00 	movcc.w	sl, #0
 80005aa:	4543      	cmp	r3, r8
 80005ac:	d2bb      	bcs.n	8000526 <__udivmoddi4+0x252>
 80005ae:	f1ba 0f00 	cmp.w	sl, #0
 80005b2:	d1b8      	bne.n	8000526 <__udivmoddi4+0x252>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e7b4      	b.n	8000526 <__udivmoddi4+0x252>
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb68 0203 	sbc.w	r2, r8, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	4696      	mov	lr, r2
 80005c6:	e6eb      	b.n	80003a0 <__udivmoddi4+0xcc>
 80005c8:	443a      	add	r2, r7
 80005ca:	f1a8 0802 	sub.w	r8, r8, #2
 80005ce:	e72b      	b.n	8000428 <__udivmoddi4+0x154>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	443b      	add	r3, r7
 80005d6:	e710      	b.n	80003fa <__udivmoddi4+0x126>
 80005d8:	3902      	subs	r1, #2
 80005da:	443b      	add	r3, r7
 80005dc:	e6a9      	b.n	8000332 <__udivmoddi4+0x5e>
 80005de:	443a      	add	r2, r7
 80005e0:	3802      	subs	r0, #2
 80005e2:	e6be      	b.n	8000362 <__udivmoddi4+0x8e>
 80005e4:	eba7 0808 	sub.w	r8, r7, r8
 80005e8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005ec:	4441      	add	r1, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c9      	b.n	800058c <__udivmoddi4+0x2b8>
 80005f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005fc:	443c      	add	r4, r7
 80005fe:	e744      	b.n	800048a <__udivmoddi4+0x1b6>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e75e      	b.n	80004c4 <__udivmoddi4+0x1f0>
 8000606:	4649      	mov	r1, r9
 8000608:	e78d      	b.n	8000526 <__udivmoddi4+0x252>
 800060a:	eba1 0108 	sub.w	r1, r1, r8
 800060e:	46cc      	mov	ip, r9
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7b8      	b.n	800058c <__udivmoddi4+0x2b8>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 8000626:	af00      	add	r7, sp, #0
#ifdef READ_WRITE_SEQ_2
	char *spi_buf_2 = malloc(4 * sizeof(char));
#endif
	uint8_t uart_buf[257];
	uint8_t spi_buf[16];
	HAL_StatusTypeDef octo_spi_return = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 3376 	strb.w	r3, [r7, #886]	@ 0x376
	XSPI_RegularCmdTypeDef spi_command = {
 800062e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8000632:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8000636:	4a40      	ldr	r2, [pc, #256]	@ (8000738 <main+0x118>)
 8000638:	4618      	mov	r0, r3
 800063a:	4611      	mov	r1, r2
 800063c:	2350      	movs	r3, #80	@ 0x50
 800063e:	461a      	mov	r2, r3
 8000640:	f006 fdc0 	bl	80071c4 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fd8c 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f884 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f96c 	bl	8000928 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f91e 	bl	8000890 <MX_USART2_UART_Init>
  MX_OCTOSPI1_Init();
 8000654:	f000 f8de 	bl	8000814 <MX_OCTOSPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_print(uart_buf, "Initializing\r\n", &huart2);
 8000658:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800065c:	4a37      	ldr	r2, [pc, #220]	@ (800073c <main+0x11c>)
 800065e:	4938      	ldr	r1, [pc, #224]	@ (8000740 <main+0x120>)
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f9bb 	bl	80009dc <uart_print>

  if(hospi1.State == HAL_XSPI_STATE_READY){
 8000666:	4b37      	ldr	r3, [pc, #220]	@ (8000744 <main+0x124>)
 8000668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800066a:	2b02      	cmp	r3, #2
 800066c:	d107      	bne.n	800067e <main+0x5e>
	  uart_print(uart_buf, "HAL OK\r\n", &huart2);
 800066e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000672:	4a32      	ldr	r2, [pc, #200]	@ (800073c <main+0x11c>)
 8000674:	4934      	ldr	r1, [pc, #208]	@ (8000748 <main+0x128>)
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f9b0 	bl	80009dc <uart_print>
 800067c:	e006      	b.n	800068c <main+0x6c>
  }else{
	  uart_print(uart_buf, "HAL NOT OK\r\n", &huart2);
 800067e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000682:	4a2e      	ldr	r2, [pc, #184]	@ (800073c <main+0x11c>)
 8000684:	4931      	ldr	r1, [pc, #196]	@ (800074c <main+0x12c>)
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f9a8 	bl	80009dc <uart_print>
  /*octo_spi_return = HAL_XSPI_Command(&hospi1, &spi_command, 60000);

  uart_print(uart_buf, "Cmd Init\r\n", &huart2);
  get_HAL_error(octo_spi_return, &huart2);*/

  strcpy((char *)spi_buf, "AAAAAAAAAAAAAAA");
 800068c:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8000690:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8000694:	4a2e      	ldr	r2, [pc, #184]	@ (8000750 <main+0x130>)
 8000696:	461c      	mov	r4, r3
 8000698:	4613      	mov	r3, r2
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  }*/
	  //dummy_buf = itoa(HAL_XSPI_GetState(&hospi1), (char *)dummy_buf, 1);
	  //uart_print(uart_buf, (char *)dummy_buf, &huart2);
	  //HAL_Delay(1000);
#ifdef WRITE_READ_SEQ_1
	  for(char write_character = 0x01; write_character < 256; write_character++){
 80006a0:	2301      	movs	r3, #1
 80006a2:	f887 3377 	strb.w	r3, [r7, #887]	@ 0x377
	  fill_page_buffer_2(spi_write_buffer_1);
 80006a6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fa00 	bl	8000ab0 <fill_page_buffer_2>
	  uint32_t address = 0x000fff;
 80006b0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80006b4:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
	  get_HAL_error(write_page(spi_write_buffer_1, &hospi1, address), &huart2);
 80006b8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80006bc:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 80006c0:	4920      	ldr	r1, [pc, #128]	@ (8000744 <main+0x124>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fa9d 	bl	8000c02 <write_page>
 80006c8:	4603      	mov	r3, r0
 80006ca:	491c      	ldr	r1, [pc, #112]	@ (800073c <main+0x11c>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f99f 	bl	8000a10 <get_HAL_error>
	  HAL_Delay(2500);
 80006d2:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80006d6:	f000 fe01 	bl	80012dc <HAL_Delay>
	  get_HAL_error(read_page(spi_read_buffer_1, &hospi1, address), &huart2);
 80006da:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 80006de:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 80006e2:	4918      	ldr	r1, [pc, #96]	@ (8000744 <main+0x124>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fa4c 	bl	8000b82 <read_page>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4913      	ldr	r1, [pc, #76]	@ (800073c <main+0x11c>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f98e 	bl	8000a10 <get_HAL_error>
	  HAL_Delay(2500);
 80006f4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80006f8:	f000 fdf0 	bl	80012dc <HAL_Delay>
	  uart_print(uart_buf, spi_read_buffer_1, &huart2);
 80006fc:	f507 711b 	add.w	r1, r7, #620	@ 0x26c
 8000700:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000704:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <main+0x11c>)
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f968 	bl	80009dc <uart_print>
	  get_HAL_error(erase_sector(&hospi1, address), &huart2);
 800070c:	f8d7 1370 	ldr.w	r1, [r7, #880]	@ 0x370
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <main+0x124>)
 8000712:	f000 fae9 	bl	8000ce8 <erase_sector>
 8000716:	4603      	mov	r3, r0
 8000718:	4908      	ldr	r1, [pc, #32]	@ (800073c <main+0x11c>)
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f978 	bl	8000a10 <get_HAL_error>
	  HAL_Delay(2500);
 8000720:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000724:	f000 fdda 	bl	80012dc <HAL_Delay>
	  for(char write_character = 0x01; write_character < 256; write_character++){
 8000728:	f897 3377 	ldrb.w	r3, [r7, #887]	@ 0x377
 800072c:	3301      	adds	r3, #1
 800072e:	f887 3377 	strb.w	r3, [r7, #887]	@ 0x377
 8000732:	bf00      	nop
 8000734:	e7b7      	b.n	80006a6 <main+0x86>
 8000736:	bf00      	nop
 8000738:	08007234 	.word	0x08007234
 800073c:	20000084 	.word	0x20000084
 8000740:	080071f8 	.word	0x080071f8
 8000744:	20000028 	.word	0x20000028
 8000748:	08007208 	.word	0x08007208
 800074c:	08007214 	.word	0x08007214
 8000750:	08007224 	.word	0x08007224

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09c      	sub	sp, #112	@ 0x70
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2250      	movs	r2, #80	@ 0x50
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f006 fcfa 	bl	800715c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <SystemClock_Config+0xb8>)
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	4a23      	ldr	r2, [pc, #140]	@ (800080c <SystemClock_Config+0xb8>)
 8000780:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000784:	6113      	str	r3, [r2, #16]
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <SystemClock_Config+0xb8>)
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000792:	bf00      	nop
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemClock_Config+0xb8>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	2b08      	cmp	r3, #8
 800079e:	d1f9      	bne.n	8000794 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80007a8:	2308      	movs	r3, #8
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2340      	movs	r3, #64	@ 0x40
 80007ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f8a7 	bl	800190c <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007c4:	f000 f904 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	231f      	movs	r3, #31
 80007ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fcc8 	bl	800217c <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007f2:	f000 f8ed 	bl	80009d0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <SystemClock_Config+0xbc>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <SystemClock_Config+0xbc>)
 80007fc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000800:	6013      	str	r3, [r2, #0]
}
 8000802:	bf00      	nop
 8000804:	3770      	adds	r7, #112	@ 0x70
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	44020800 	.word	0x44020800
 8000810:	40022000 	.word	0x40022000

08000814 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <MX_OCTOSPI1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThresholdByte = 31;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000820:	221f      	movs	r2, #31
 8000822:	605a      	str	r2, [r3, #4]
  hospi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 800082c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000830:	60da      	str	r2, [r3, #12]
  hospi1.Init.MemorySize = HAL_XSPI_SIZE_64MB;
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000834:	2216      	movs	r2, #22
 8000836:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTimeCycle = 1;
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 800083a:	2201      	movs	r2, #1
 800083c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000844:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000852:	2202      	movs	r2, #2
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_128MB;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000864:	2218      	movs	r2, #24
 8000866:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_XSPI_DELAY_BLOCK_BYPASS;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 800086a:	2208      	movs	r2, #8
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.Refresh = 0;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_XSPI_Init(&hospi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_OCTOSPI1_Init+0x74>)
 8000876:	f006 f805 	bl	8006884 <HAL_XSPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f8a6 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000028 	.word	0x20000028
 800088c:	47001400 	.word	0x47001400

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <MX_USART2_UART_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d8:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008da:	f005 fa15 	bl	8005d08 <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 f874 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008ec:	f005 ff00 	bl	80066f0 <HAL_UARTEx_SetTxFifoThreshold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008f6:	f000 f86b 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 80008fe:	f005 ff35 	bl	800676c <HAL_UARTEx_SetRxFifoThreshold>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f862 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_USART2_UART_Init+0x90>)
 800090e:	f005 feb6 	bl	800667e <HAL_UARTEx_DisableFifoMode>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f85a 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000084 	.word	0x20000084
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 8000940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000944:	4a20      	ldr	r2, [pc, #128]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800094e:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 8000950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 800095e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000962:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 800096e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000980:	4a11      	ldr	r2, [pc, #68]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_GPIO_Init+0xa0>)
 800098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2120      	movs	r1, #32
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_GPIO_Init+0xa4>)
 800099e:	f000 ff83 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009a2:	2320      	movs	r3, #32
 80009a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_GPIO_Init+0xa4>)
 80009ba:	f000 fe17 	bl	80015ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	44020c00 	.word	0x44020c00
 80009cc:	42020000 	.word	0x42020000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <uart_print>:

#include "my_hal.h"



void uart_print(uint8_t *buf, char *text, UART_HandleTypeDef * husart){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	strcpy((char*)buf, text);
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f006 fbe2 	bl	80071b4 <strcpy>
	HAL_UART_Transmit(husart, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fc4f 	bl	8000294 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	68f9      	ldr	r1, [r7, #12]
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f005 f9d1 	bl	8005da8 <HAL_UART_Transmit>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <get_HAL_error>:


void get_HAL_error(HAL_StatusTypeDef return_value, UART_HandleTypeDef * husart){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
#ifdef HUART_DEBUG
	uint8_t buf[16];
	 switch(return_value){
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d82a      	bhi.n	8000a78 <get_HAL_error+0x68>
 8000a22:	a201      	add	r2, pc, #4	@ (adr r2, 8000a28 <get_HAL_error+0x18>)
 8000a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a28:	08000a39 	.word	0x08000a39
 8000a2c:	08000a49 	.word	0x08000a49
 8000a30:	08000a69 	.word	0x08000a69
 8000a34:	08000a59 	.word	0x08000a59
		  case HAL_OK:
			  uart_print(buf, "HAL_OK\r\n", husart);
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4917      	ldr	r1, [pc, #92]	@ (8000a9c <get_HAL_error+0x8c>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ffcb 	bl	80009dc <uart_print>
			  break;
 8000a46:	e017      	b.n	8000a78 <get_HAL_error+0x68>
		  case HAL_ERROR:
			  uart_print(buf, "HAL ERROR\r\n", husart);
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	4914      	ldr	r1, [pc, #80]	@ (8000aa0 <get_HAL_error+0x90>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffc3 	bl	80009dc <uart_print>
			  break;
 8000a56:	e00f      	b.n	8000a78 <get_HAL_error+0x68>
		  case HAL_TIMEOUT:
			  uart_print(buf, "HAL TIMEOUT\r\n", husart);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	4911      	ldr	r1, [pc, #68]	@ (8000aa4 <get_HAL_error+0x94>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffbb 	bl	80009dc <uart_print>
			  break;
 8000a66:	e007      	b.n	8000a78 <get_HAL_error+0x68>
		  case HAL_BUSY:
			  uart_print(buf, "HAL BUSY\r\n", husart);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	490e      	ldr	r1, [pc, #56]	@ (8000aa8 <get_HAL_error+0x98>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffb3 	bl	80009dc <uart_print>
			  break;
 8000a76:	bf00      	nop
		  }
#endif
#ifdef LED_DEBUG
	 	if(return_value != HAL_OK){
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d009      	beq.n	8000a92 <get_HAL_error+0x82>
	 		while(1){
	 			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a7e:	2120      	movs	r1, #32
 8000a80:	480a      	ldr	r0, [pc, #40]	@ (8000aac <get_HAL_error+0x9c>)
 8000a82:	f000 ff29 	bl	80018d8 <HAL_GPIO_TogglePin>
	 			HAL_Delay(500);
 8000a86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a8a:	f000 fc27 	bl	80012dc <HAL_Delay>
	 			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a8e:	bf00      	nop
 8000a90:	e7f5      	b.n	8000a7e <get_HAL_error+0x6e>
	 		}
	 	}
#endif
	 return;
 8000a92:	bf00      	nop
}
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08007284 	.word	0x08007284
 8000aa0:	08007290 	.word	0x08007290
 8000aa4:	0800729c 	.word	0x0800729c
 8000aa8:	080072ac 	.word	0x080072ac
 8000aac:	42020000 	.word	0x42020000

08000ab0 <fill_page_buffer_2>:
		buffer[i] = character;
	}
	buffer[256] = '\0';
	return;
}
void fill_page_buffer_2(char *buffer){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < PAGE_SIZE; i++){
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e008      	b.n	8000ad0 <fill_page_buffer_2+0x20>
		buffer[i] = i;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < PAGE_SIZE; i++){
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2bff      	cmp	r3, #255	@ 0xff
 8000ad4:	ddf3      	ble.n	8000abe <fill_page_buffer_2+0xe>
	}
	buffer[256] = '\0';
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
	return;
 8000ae0:	bf00      	nop
}
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <set_spi_command>:
#include "my_spi.h"
#include "stm32h5xx_hal_xspi.h"

void set_spi_command(XSPI_RegularCmdTypeDef *command_struct, uint32_t instruction, uint32_t instruction_length, //
		uint32_t instruction_wires, uint32_t address, uint32_t address_wires, //
		uint32_t data_wires, uint32_t data_length, uint32_t dummy_cycles){
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	603b      	str	r3, [r7, #0]
	command_struct->OperationType         = HAL_XSPI_OPTYPE_COMMON_CFG; 		// Constant.
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
	command_struct->IOSelect 		      = HAL_XSPI_SELECT_IO_3_0;				// Constant. Always the same pins
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
	command_struct->Instruction	          = instruction;						// Not constant.
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	609a      	str	r2, [r3, #8]
	// Use defined instructions
	command_struct->InstructionMode	      = instruction_wires;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	60da      	str	r2, [r3, #12]
	// Not constant. Number of wires for transferring instructions.
	command_struct->InstructionWidth 	  = instruction_length;		// Constant - always 1 byte
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	611a      	str	r2, [r3, #16]
	command_struct->InstructionDTRMode    = HAL_XSPI_INSTRUCTION_DTR_DISABLE;	// Constant - DTR = Double transfer rate
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
	command_struct->Address 			  = address;							// Not constant
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	619a      	str	r2, [r3, #24]
	// Between 0x00 and 0xFFFFFFFF.
	command_struct->AddressMode           = address_wires;						// Not constant
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	61da      	str	r2, [r3, #28]
	// Number of wires for sending the address.
	command_struct->AddressWidth          = HAL_XSPI_ADDRESS_24_BITS;		// constant
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b30:	621a      	str	r2, [r3, #32]
	command_struct->AddressDTRMode        = HAL_XSPI_ADDRESS_DTR_DISABLE;		// Constant - IDK
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24
	command_struct->AlternateBytes        = 0x00;							    // I don't what alternate bytes are but it isn't used in the flash
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
	command_struct->AlternateBytesMode    = HAL_XSPI_ALT_BYTES_NONE;			// ---
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
	command_struct->AlternateBytesWidth   = HAL_XSPI_ALT_BYTES_32_BITS;			// ---
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b4a:	631a      	str	r2, [r3, #48]	@ 0x30
	command_struct->AlternateBytesDTRMode = HAL_XSPI_ALT_BYTES_DTR_DISABLE;		// ---
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	635a      	str	r2, [r3, #52]	@ 0x34
	command_struct->DataMode 			  = data_wires;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6a3a      	ldr	r2, [r7, #32]
 8000b56:	639a      	str	r2, [r3, #56]	@ 0x38
	// Number of wires for sending and receiving data.
	command_struct->DataLength 		      = data_length;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Length in bytes
	command_struct->DataDTRMode 		  = HAL_XSPI_DATA_DTR_DISABLE;			// Constant
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	641a      	str	r2, [r3, #64]	@ 0x40
	command_struct->DummyCycles 		  = dummy_cycles;						// Not constant
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b68:	645a      	str	r2, [r3, #68]	@ 0x44
	// Enter number of dummy cycles.
	command_struct->DQSMode 			  = HAL_XSPI_DQS_DISABLE;				// Constant - IDK
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	649a      	str	r2, [r3, #72]	@ 0x48
	command_struct->SIOOMode 			  = HAL_XSPI_SIOO_INST_EVERY_CMD;		// Constant - IDK
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <read_page>:
	read_buffer[1] = '\0';
	return octo_spi_return;
}

// Read page
HAL_StatusTypeDef read_page(char *read_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address){
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b0a0      	sub	sp, #128	@ 0x80
 8000b86:	af06      	add	r7, sp, #24
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	//Set spi command
	set_spi_command(&spi_command, MY_READ, INST_LEN_1_BYTE, INST_1_WIRE, address, ADDR_1_WIRE, DATA_1_WIRE, PAGE_SIZE, DUMMY_0);
 8000b8e:	f107 0014 	add.w	r0, r7, #20
 8000b92:	2300      	movs	r3, #0
 8000b94:	9304      	str	r3, [sp, #16]
 8000b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9a:	9303      	str	r3, [sp, #12]
 8000b9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	f7ff ff9b 	bl	8000aec <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f005 ff37 	bl	8006a34 <HAL_XSPI_Command>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(octo_spi_return != HAL_OK){
 8000bcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <read_page+0x58>
			return octo_spi_return;
 8000bd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bd8:	e00f      	b.n	8000bfa <read_page+0x78>
	}
	octo_spi_return = HAL_XSPI_Receive(octo_spi_handle, (uint8_t *) read_buffer, ONE_MINUTE);
 8000bda:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000bde:	68f9      	ldr	r1, [r7, #12]
 8000be0:	68b8      	ldr	r0, [r7, #8]
 8000be2:	f006 f82a 	bl	8006c3a <HAL_XSPI_Receive>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	read_buffer[PAGE_SIZE] = '\0';
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	return octo_spi_return;
 8000bf6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3768      	adds	r7, #104	@ 0x68
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <write_page>:

// Write page
HAL_StatusTypeDef write_page(char *write_buffer, XSPI_HandleTypeDef *octo_spi_handle, uint32_t address){
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b0a0      	sub	sp, #128	@ 0x80
 8000c06:	af06      	add	r7, sp, #24
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
	char WREN_BUF[] = {MY_WREN, '\0'};
 8000c0e:	2306      	movs	r3, #6
 8000c10:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	//Set spi command - Write enable
	set_spi_command(&spi_command, MY_WREN, INST_LEN_1_BYTE, INST_1_WIRE, ADDR_NONE, 0x00, DATA_NONE, ONE_BYTE, DUMMY_0);
 8000c14:	f107 0014 	add.w	r0, r7, #20
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9304      	str	r3, [sp, #16]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9303      	str	r3, [sp, #12]
 8000c20:	2300      	movs	r3, #0
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	2300      	movs	r3, #0
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2106      	movs	r1, #6
 8000c32:	f7ff ff5b 	bl	8000aec <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000c3e:	4619      	mov	r1, r3
 8000c40:	68b8      	ldr	r0, [r7, #8]
 8000c42:	f005 fef7 	bl	8006a34 <HAL_XSPI_Command>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(octo_spi_return != HAL_OK){
 8000c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <write_page+0x58>
			return octo_spi_return;
 8000c54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c58:	e042      	b.n	8000ce0 <write_page+0xde>
	}

	octo_spi_return = HAL_XSPI_Transmit(octo_spi_handle, (uint8_t *) WREN_BUF, ONE_MINUTE);
 8000c5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c5e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000c62:	4619      	mov	r1, r3
 8000c64:	68b8      	ldr	r0, [r7, #8]
 8000c66:	f005 ff75 	bl	8006b54 <HAL_XSPI_Transmit>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(octo_spi_return != HAL_OK){
 8000c70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <write_page+0x7c>
				return octo_spi_return;
 8000c78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c7c:	e030      	b.n	8000ce0 <write_page+0xde>
	}

	set_spi_command(&spi_command, MY_PP, INST_LEN_1_BYTE, INST_1_WIRE, address, ADDR_1_WIRE, DATA_1_WIRE, PAGE_SIZE, DUMMY_0);
 8000c7e:	f107 0014 	add.w	r0, r7, #20
 8000c82:	2300      	movs	r3, #0
 8000c84:	9304      	str	r3, [sp, #16]
 8000c86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8a:	9303      	str	r3, [sp, #12]
 8000c8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c90:	9302      	str	r3, [sp, #8]
 8000c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	f7ff ff23 	bl	8000aec <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68b8      	ldr	r0, [r7, #8]
 8000cb2:	f005 febf 	bl	8006a34 <HAL_XSPI_Command>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(octo_spi_return != HAL_OK){
 8000cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <write_page+0xc8>
			return octo_spi_return;
 8000cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cc8:	e00a      	b.n	8000ce0 <write_page+0xde>
	}

	octo_spi_return = HAL_XSPI_Transmit(octo_spi_handle, (uint8_t *) write_buffer, ONE_MINUTE);
 8000cca:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	68b8      	ldr	r0, [r7, #8]
 8000cd2:	f005 ff3f 	bl	8006b54 <HAL_XSPI_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	return octo_spi_return;
 8000cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3768      	adds	r7, #104	@ 0x68
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <erase_sector>:


// Erase page
HAL_StatusTypeDef erase_sector(XSPI_HandleTypeDef *octo_spi_handle, uint32_t address){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09e      	sub	sp, #120	@ 0x78
 8000cec:	af06      	add	r7, sp, #24
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	char *empty_buffer = "";
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <erase_sector+0x78>)
 8000cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	HAL_StatusTypeDef octo_spi_return;
	XSPI_RegularCmdTypeDef spi_command;
	set_spi_command(&spi_command, (uint16_t)(MY_SE + (MY_WREN << 8)), INST_LEN_2_BYTES, INST_1_WIRE, address, ADDR_1_WIRE, DATA_NONE, DATA_NONE, DUMMY_0);
 8000cf6:	f107 0008 	add.w	r0, r7, #8
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9304      	str	r3, [sp, #16]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9303      	str	r3, [sp, #12]
 8000d02:	2300      	movs	r3, #0
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2301      	movs	r3, #1
 8000d12:	2210      	movs	r2, #16
 8000d14:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8000d18:	f7ff fee8 	bl	8000aec <set_spi_command>
	octo_spi_return = HAL_XSPI_Command(octo_spi_handle, &spi_command, ONE_MINUTE);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f005 fe84 	bl	8006a34 <HAL_XSPI_Command>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		if(octo_spi_return != HAL_OK){
 8000d32:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <erase_sector+0x58>
			return octo_spi_return;
 8000d3a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d3e:	e00a      	b.n	8000d56 <erase_sector+0x6e>
		}

	octo_spi_return = HAL_XSPI_Transmit(octo_spi_handle, (uint8_t *) empty_buffer, ONE_MINUTE);
 8000d40:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d44:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f005 ff04 	bl	8006b54 <HAL_XSPI_Transmit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	return octo_spi_return;
 8000d52:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b

}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3760      	adds	r7, #96	@ 0x60
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	080072b8 	.word	0x080072b8

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0c0      	sub	sp, #256	@ 0x100
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	22d0      	movs	r2, #208	@ 0xd0
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f006 f9e1 	bl	800715c <memset>
  if(hxspi->Instance==OCTOSPI1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8000ed0 <HAL_XSPI_MspInit+0x15c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	f040 8090 	bne.w	8000ec6 <HAL_XSPI_MspInit+0x152>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	f04f 0302 	mov.w	r3, #2
 8000dae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_HCLK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fd1f 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_XSPI_MspInit+0x58>
    {
      Error_Handler();
 8000dc8:	f7ff fe02 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000dcc:	4b41      	ldr	r3, [pc, #260]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dd2:	4a40      	ldr	r2, [pc, #256]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000dd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df0:	4a38      	ldr	r2, [pc, #224]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dfa:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b32      	ldr	r3, [pc, #200]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0e:	4a31      	ldr	r2, [pc, #196]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e2c:	4a29      	ldr	r2, [pc, #164]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e36:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <HAL_XSPI_MspInit+0x160>)
 8000e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> OCTOSPI1_IO3
    PB2     ------> OCTOSPI1_CLK
    PB10     ------> OCTOSPI1_NCS
    PC10     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8000e44:	f240 430c 	movw	r3, #1036	@ 0x40c
 8000e48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000e5e:	2309      	movs	r3, #9
 8000e60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481b      	ldr	r0, [pc, #108]	@ (8000ed8 <HAL_XSPI_MspInit+0x164>)
 8000e6c:	f000 fbbe 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000e88:	2309      	movs	r3, #9
 8000e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e92:	4619      	mov	r1, r3
 8000e94:	4811      	ldr	r0, [pc, #68]	@ (8000edc <HAL_XSPI_MspInit+0x168>)
 8000e96:	f000 fba9 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000e9a:	f240 4304 	movw	r3, #1028	@ 0x404
 8000e9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPI1;
 8000eb4:	2309      	movs	r3, #9
 8000eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	@ (8000ee0 <HAL_XSPI_MspInit+0x16c>)
 8000ec2:	f000 fb93 	bl	80015ec <HAL_GPIO_Init>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8000ec6:	bf00      	nop
 8000ec8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	47001400 	.word	0x47001400
 8000ed4:	44020c00 	.word	0x44020c00
 8000ed8:	42020800 	.word	0x42020800
 8000edc:	42020000 	.word	0x42020000
 8000ee0:	42020400 	.word	0x42020400

08000ee4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0be      	sub	sp, #248	@ 0xf8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	22d0      	movs	r2, #208	@ 0xd0
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 f929 	bl	800715c <memset>
  if(huart->Instance==USART2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a26      	ldr	r2, [pc, #152]	@ (8000fa8 <HAL_UART_MspInit+0xc4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d144      	bne.n	8000f9e <HAL_UART_MspInit+0xba>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f14:	f04f 0202 	mov.w	r2, #2
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fc69 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000f34:	f7ff fd4c 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HAL_UART_MspInit+0xc8>)
 8000f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <HAL_UART_MspInit+0xc8>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f44:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_UART_MspInit+0xc8>)
 8000f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_UART_MspInit+0xc8>)
 8000f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f5c:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <HAL_UART_MspInit+0xc8>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_UART_MspInit+0xc8>)
 8000f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f74:	230c      	movs	r3, #12
 8000f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <HAL_UART_MspInit+0xcc>)
 8000f9a:	f000 fb27 	bl	80015ec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f9e:	bf00      	nop
 8000fa0:	37f8      	adds	r7, #248	@ 0xf8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	44020c00 	.word	0x44020c00
 8000fb0:	42020000 	.word	0x42020000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100a:	f000 f947 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800101a:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <SystemInit+0xdc>)
 800101c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001020:	4a33      	ldr	r2, [pc, #204]	@ (80010f0 <SystemInit+0xdc>)
 8001022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001026:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800102a:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <SystemInit+0xe0>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <SystemInit+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <SystemInit+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800103c:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <SystemInit+0xe0>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	492c      	ldr	r1, [pc, #176]	@ (80010f4 <SystemInit+0xe0>)
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <SystemInit+0xe4>)
 8001044:	4013      	ands	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001048:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <SystemInit+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800104e:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <SystemInit+0xe0>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001054:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <SystemInit+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800105a:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <SystemInit+0xe0>)
 800105c:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <SystemInit+0xe8>)
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001060:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <SystemInit+0xe0>)
 8001062:	2200      	movs	r2, #0
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001066:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <SystemInit+0xe0>)
 8001068:	4a24      	ldr	r2, [pc, #144]	@ (80010fc <SystemInit+0xe8>)
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800106c:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <SystemInit+0xe0>)
 800106e:	2200      	movs	r2, #0
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <SystemInit+0xe0>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <SystemInit+0xe8>)
 8001076:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <SystemInit+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <SystemInit+0xe0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1c      	ldr	r2, [pc, #112]	@ (80010f4 <SystemInit+0xe0>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001088:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <SystemInit+0xe0>)
 800108c:	2200      	movs	r2, #0
 800108e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <SystemInit+0xdc>)
 8001092:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001096:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <SystemInit+0xec>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80010a0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80010a8:	d003      	beq.n	80010b2 <SystemInit+0x9e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80010b0:	d117      	bne.n	80010e2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <SystemInit+0xec>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <SystemInit+0xec>)
 80010c0:	4a10      	ldr	r2, [pc, #64]	@ (8001104 <SystemInit+0xf0>)
 80010c2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <SystemInit+0xec>)
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <SystemInit+0xf4>)
 80010c8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <SystemInit+0xec>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <SystemInit+0xec>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <SystemInit+0xec>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <SystemInit+0xec>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	61d3      	str	r3, [r2, #28]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	44020c00 	.word	0x44020c00
 80010f8:	eae2eae3 	.word	0xeae2eae3
 80010fc:	01010280 	.word	0x01010280
 8001100:	40022000 	.word	0x40022000
 8001104:	08192a3b 	.word	0x08192a3b
 8001108:	4c5d6e7f 	.word	0x4c5d6e7f

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800110c:	480d      	ldr	r0, [pc, #52]	@ (8001144 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001110:	f7ff ff80 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800113a:	f006 f817 	bl	800716c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff fa6f 	bl	8000620 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   r0, =_estack
 8001144:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	0800730c 	.word	0x0800730c
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	2000011c 	.word	0x2000011c

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>
	...

08001160 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f96c 	bl	8001442 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800116a:	f001 f9bf 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 800116e:	4602      	mov	r2, r0
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_Init+0x44>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	490b      	ldr	r1, [pc, #44]	@ (80011a8 <HAL_Init+0x48>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <HAL_Init+0x4c>)
 8001182:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001184:	2004      	movs	r0, #4
 8001186:	f000 f9a3 	bl	80014d0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118a:	200f      	movs	r0, #15
 800118c:	f000 f810 	bl	80011b0 <HAL_InitTick>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e002      	b.n	80011a0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800119a:	f7ff fde3 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	44020c00 	.word	0x44020c00
 80011a8:	080072bc 	.word	0x080072bc
 80011ac:	20000000 	.word	0x20000000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <HAL_InitTick+0xdc>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e05c      	b.n	8001282 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011c8:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <HAL_InitTick+0xe0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d10c      	bne.n	80011ee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80011d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_InitTick+0xe4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <HAL_InitTick+0xdc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e037      	b.n	800125e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80011ee:	f000 f9c7 	bl	8001580 <HAL_SYSTICK_GetCLKSourceConfig>
 80011f2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d023      	beq.n	8001242 <HAL_InitTick+0x92>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d82d      	bhi.n	800125c <HAL_InitTick+0xac>
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_InitTick+0x5e>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d00d      	beq.n	8001228 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800120c:	e026      	b.n	800125c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_InitTick+0xe4>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <HAL_InitTick+0xdc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800121c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	60fb      	str	r3, [r7, #12]
        break;
 8001226:	e01a      	b.n	800125e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_InitTick+0xdc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001232:	fbb3 f3f2 	udiv	r3, r3, r2
 8001236:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	60fb      	str	r3, [r7, #12]
        break;
 8001240:	e00d      	b.n	800125e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_InitTick+0xdc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001250:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001254:	fbb2 f3f3 	udiv	r3, r2, r3
 8001258:	60fb      	str	r3, [r7, #12]
        break;
 800125a:	e000      	b.n	800125e <HAL_InitTick+0xae>
        break;
 800125c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f914 	bl	800148c <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e009      	b.n	8001282 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126e:	2200      	movs	r2, #0
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	f04f 30ff 	mov.w	r0, #4294967295
 8001276:	f000 f8ef 	bl	8001458 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800127a:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <HAL_InitTick+0xe8>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	e000e010 	.word	0xe000e010
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000118 	.word	0x20000118

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000118 	.word	0x20000118

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff6a 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001466:	f7ff ff81 	bl	800136c <__NVIC_GetPriorityGrouping>
 800146a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f7ff ffb3 	bl	80013dc <NVIC_EncodePriority>
 8001476:	4602      	mov	r2, r0
 8001478:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff82 	bl	8001388 <__NVIC_SetPriority>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800149c:	d301      	bcc.n	80014a2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800149e:	2301      	movs	r3, #1
 80014a0:	e00d      	b.n	80014be <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_SYSTICK_Config+0x40>)
 80014b6:	f043 0303 	orr.w	r3, r3, #3
 80014ba:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d844      	bhi.n	8001568 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80014de:	a201      	add	r2, pc, #4	@ (adr r2, 80014e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80014e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e4:	08001507 	.word	0x08001507
 80014e8:	08001525 	.word	0x08001525
 80014ec:	08001547 	.word	0x08001547
 80014f0:	08001569 	.word	0x08001569
 80014f4:	080014f9 	.word	0x080014f9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6013      	str	r3, [r2, #0]
      break;
 8001504:	e031      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001514:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800151a:	f023 030c 	bic.w	r3, r3, #12
 800151e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001522:	e022      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001536:	f023 030c 	bic.w	r3, r3, #12
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001544:	e011      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001558:	f023 030c 	bic.w	r3, r3, #12
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001566:	e000      	b.n	800156a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001568:	bf00      	nop
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010
 800157c:	44020c00 	.word	0x44020c00

08001580 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001592:	2304      	movs	r3, #4
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e01e      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800159a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d00f      	beq.n	80015ca <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d80f      	bhi.n	80015d0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d003      	beq.n	80015c4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80015bc:	e008      	b.n	80015d0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
        break;
 80015c2:	e008      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
        break;
 80015c8:	e005      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80015ca:	2302      	movs	r3, #2
 80015cc:	607b      	str	r3, [r7, #4]
        break;
 80015ce:	e002      	b.n	80015d6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
        break;
 80015d4:	bf00      	nop
    }
  }
  return systick_source;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e010 	.word	0xe000e010
 80015e8:	44020c00 	.word	0x44020c00

080015ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015fa:	e142      	b.n	8001882 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8134 	beq.w	800187c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x38>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d125      	bne.n	8001670 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f003 020f 	and.w	r2, r3, #15
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4013      	ands	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d00b      	beq.n	80016c4 <HAL_GPIO_Init+0xd8>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b8:	2b11      	cmp	r3, #17
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d130      	bne.n	8001726 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016fa:	2201      	movs	r2, #1
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4013      	ands	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 0201 	and.w	r2, r3, #1
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b03      	cmp	r3, #3
 8001730:	d109      	bne.n	8001746 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d11b      	bne.n	8001776 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d017      	beq.n	8001776 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	4013      	ands	r3, r2
 800175c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d07c      	beq.n	800187c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001782:	4a47      	ldr	r2, [pc, #284]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3318      	adds	r3, #24
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	4013      	ands	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0a9a      	lsrs	r2, r3, #10
 80017aa:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	00d2      	lsls	r2, r2, #3
 80017b6:	4093      	lsls	r3, r2
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017be:	4938      	ldr	r1, [pc, #224]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3318      	adds	r3, #24
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80017cc:	4b34      	ldr	r3, [pc, #208]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4013      	ands	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80017f0:	4a2b      	ldr	r2, [pc, #172]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4013      	ands	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800181a:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 8001822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001826:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4013      	ands	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001846:	4a16      	ldr	r2, [pc, #88]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 8001850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001854:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_GPIO_Init+0x2b4>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	3301      	adds	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	f47f aeb5 	bne.w	80015fc <HAL_GPIO_Init+0x10>
  }
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	44022000 	.word	0x44022000
 80018a4:	002f7f7f 	.word	0x002f7f7f

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43d9      	mvns	r1, r3
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	400b      	ands	r3, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f000 bc28 	b.w	8002170 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001920:	4b94      	ldr	r3, [pc, #592]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f003 0318 	and.w	r3, r3, #24
 8001928:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800192a:	4b92      	ldr	r3, [pc, #584]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d05b      	beq.n	80019f8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b08      	cmp	r3, #8
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x46>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	2b18      	cmp	r3, #24
 800194a:	d114      	bne.n	8001976 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d111      	bne.n	8001976 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	f000 bc08 	b.w	8002170 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001960:	4b84      	ldr	r3, [pc, #528]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	4981      	ldr	r1, [pc, #516]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001970:	4313      	orrs	r3, r2
 8001972:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001974:	e040      	b.n	80019f8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d023      	beq.n	80019c6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800197e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7c      	ldr	r2, [pc, #496]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fc9b 	bl	80012c4 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001992:	f7ff fc97 	bl	80012c4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e3e5      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80019a4:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80019b0:	4b70      	ldr	r3, [pc, #448]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	496d      	ldr	r1, [pc, #436]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	618b      	str	r3, [r1, #24]
 80019c4:	e018      	b.n	80019f8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 80019cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fc77 	bl	80012c4 <HAL_GetTick>
 80019d6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80019da:	f7ff fc73 	bl	80012c4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e3c1      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019ec:	4b61      	ldr	r3, [pc, #388]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a0 	beq.w	8001b46 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_OscConfig+0x10c>
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b18      	cmp	r3, #24
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 8092 	bne.w	8001b46 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e3a4      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x132>
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e058      	b.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d112      	bne.n	8001a6c <HAL_RCC_OscConfig+0x160>
 8001a46:	4b4b      	ldr	r3, [pc, #300]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b48      	ldr	r3, [pc, #288]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a47      	ldr	r2, [pc, #284]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b45      	ldr	r3, [pc, #276]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a44      	ldr	r2, [pc, #272]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e041      	b.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a74:	d112      	bne.n	8001a9c <HAL_RCC_OscConfig+0x190>
 8001a76:	4b3f      	ldr	r3, [pc, #252]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b3c      	ldr	r3, [pc, #240]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3b      	ldr	r2, [pc, #236]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a38      	ldr	r2, [pc, #224]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e029      	b.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001aa4:	d112      	bne.n	8001acc <HAL_RCC_OscConfig+0x1c0>
 8001aa6:	4b33      	ldr	r3, [pc, #204]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a32      	ldr	r2, [pc, #200]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b30      	ldr	r3, [pc, #192]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ab8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e011      	b.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
 8001acc:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a28      	ldr	r2, [pc, #160]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a25      	ldr	r2, [pc, #148]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a22      	ldr	r2, [pc, #136]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001aea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fbe4 	bl	80012c4 <HAL_GetTick>
 8001afc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fbe0 	bl	80012c4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	@ 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e32e      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x1f4>
 8001b1e:	e012      	b.n	8001b46 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fbd0 	bl	80012c4 <HAL_GetTick>
 8001b24:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fbcc 	bl	80012c4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e31a      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_RCC_OscConfig+0x268>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 809a 	beq.w	8001c88 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_RCC_OscConfig+0x25a>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	2b18      	cmp	r3, #24
 8001b5e:	d149      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d146      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d104      	bne.n	8001b78 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e2fe      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
 8001b72:	bf00      	nop
 8001b74:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001b7e:	4b9a      	ldr	r3, [pc, #616]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0218 	and.w	r2, r3, #24
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d014      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001b8e:	4b96      	ldr	r3, [pc, #600]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0218 	bic.w	r2, r3, #24
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	4993      	ldr	r1, [pc, #588]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001ba0:	f000 fdd0 	bl	8002744 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ba4:	4b91      	ldr	r3, [pc, #580]	@ (8001dec <HAL_RCC_OscConfig+0x4e0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fb01 	bl	80011b0 <HAL_InitTick>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e2db      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fb84 	bl	80012c4 <HAL_GetTick>
 8001bbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fb80 	bl	80012c4 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e2ce      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd2:	4b85      	ldr	r3, [pc, #532]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001bde:	4b82      	ldr	r3, [pc, #520]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	041b      	lsls	r3, r3, #16
 8001bec:	497e      	ldr	r1, [pc, #504]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001bf2:	e049      	b.n	8001c88 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d02c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001bfc:	4b7a      	ldr	r3, [pc, #488]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 0218 	bic.w	r2, r3, #24
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	4977      	ldr	r1, [pc, #476]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001c0e:	4b76      	ldr	r3, [pc, #472]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a75      	ldr	r2, [pc, #468]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fb53 	bl	80012c4 <HAL_GetTick>
 8001c1e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fb4f 	bl	80012c4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e29d      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	4b6c      	ldr	r3, [pc, #432]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001c40:	4b69      	ldr	r3, [pc, #420]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	4966      	ldr	r1, [pc, #408]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	610b      	str	r3, [r1, #16]
 8001c54:	e018      	b.n	8001c88 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b64      	ldr	r3, [pc, #400]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a63      	ldr	r2, [pc, #396]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb2f 	bl	80012c4 <HAL_GetTick>
 8001c66:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb2b 	bl	80012c4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e279      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d03c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9c:	4b52      	ldr	r3, [pc, #328]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ca2:	4a51      	ldr	r2, [pc, #324]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ca8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff fb0a 	bl	80012c4 <HAL_GetTick>
 8001cb0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fb06 	bl	80012c4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e254      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001cc6:	4b48      	ldr	r3, [pc, #288]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ef      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x3a8>
 8001cd4:	e01b      	b.n	8001d0e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	4b44      	ldr	r3, [pc, #272]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cdc:	4a42      	ldr	r2, [pc, #264]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001cde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff faed 	bl	80012c4 <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fae9 	bl	80012c4 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e237      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d00:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ef      	bne.n	8001cee <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80d2 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d1c:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <HAL_RCC_OscConfig+0x4e4>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d118      	bne.n	8001d5a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <HAL_RCC_OscConfig+0x4e4>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <HAL_RCC_OscConfig+0x4e4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fac6 	bl	80012c4 <HAL_GetTick>
 8001d38:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7ff fac2 	bl	80012c4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e210      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <HAL_RCC_OscConfig+0x4e4>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x468>
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d68:	4a1f      	ldr	r2, [pc, #124]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d72:	e074      	b.n	8001e5e <HAL_RCC_OscConfig+0x552>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d118      	bne.n	8001dae <HAL_RCC_OscConfig+0x4a2>
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d82:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d92:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001da2:	4a11      	ldr	r2, [pc, #68]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dac:	e057      	b.n	8001e5e <HAL_RCC_OscConfig+0x552>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d11e      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4e8>
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dd6:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ddc:	4a02      	ldr	r2, [pc, #8]	@ (8001de8 <HAL_RCC_OscConfig+0x4dc>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001de6:	e03a      	b.n	8001e5e <HAL_RCC_OscConfig+0x552>
 8001de8:	44020c00 	.word	0x44020c00
 8001dec:	20000004 	.word	0x20000004
 8001df0:	44020800 	.word	0x44020800
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b85      	cmp	r3, #133	@ 0x85
 8001dfa:	d118      	bne.n	8001e2e <HAL_RCC_OscConfig+0x522>
 8001dfc:	4ba2      	ldr	r3, [pc, #648]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e02:	4aa1      	ldr	r2, [pc, #644]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e0c:	4b9e      	ldr	r3, [pc, #632]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e12:	4a9d      	ldr	r2, [pc, #628]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e1c:	4b9a      	ldr	r3, [pc, #616]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e22:	4a99      	ldr	r2, [pc, #612]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e2c:	e017      	b.n	8001e5e <HAL_RCC_OscConfig+0x552>
 8001e2e:	4b96      	ldr	r3, [pc, #600]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e34:	4a94      	ldr	r2, [pc, #592]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e3e:	4b92      	ldr	r3, [pc, #584]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e44:	4a90      	ldr	r2, [pc, #576]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e4e:	4b8e      	ldr	r3, [pc, #568]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e54:	4a8c      	ldr	r2, [pc, #560]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d016      	beq.n	8001e94 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff fa2d 	bl	80012c4 <HAL_GetTick>
 8001e6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fa29 	bl	80012c4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e175      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e84:	4b80      	ldr	r3, [pc, #512]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ed      	beq.n	8001e6e <HAL_RCC_OscConfig+0x562>
 8001e92:	e015      	b.n	8001ec0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff fa16 	bl	80012c4 <HAL_GetTick>
 8001e98:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fa12 	bl	80012c4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e15e      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb2:	4b75      	ldr	r3, [pc, #468]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ed      	bne.n	8001e9c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d036      	beq.n	8001f3a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d019      	beq.n	8001f08 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001eda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f9f0 	bl	80012c4 <HAL_GetTick>
 8001ee4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ee8:	f7ff f9ec 	bl	80012c4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e13a      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001efa:	4b63      	ldr	r3, [pc, #396]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x5dc>
 8001f06:	e018      	b.n	8001f3a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f08:	4b5f      	ldr	r3, [pc, #380]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7ff f9d6 	bl	80012c4 <HAL_GetTick>
 8001f18:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001f1c:	f7ff f9d2 	bl	80012c4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e120      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f2e:	4b56      	ldr	r3, [pc, #344]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8115 	beq.w	800216e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b18      	cmp	r3, #24
 8001f48:	f000 80af 	beq.w	80020aa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	f040 8086 	bne.w	8002062 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f56:	4b4c      	ldr	r3, [pc, #304]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4b      	ldr	r2, [pc, #300]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001f5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff f9af 	bl	80012c4 <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff f9ab 	bl	80012c4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0f9      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f7c:	4b42      	ldr	r3, [pc, #264]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001f88:	4b3f      	ldr	r3, [pc, #252]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001f90:	f023 0303 	bic.w	r3, r3, #3
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f9c:	0212      	lsls	r2, r2, #8
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	4939      	ldr	r1, [pc, #228]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	628b      	str	r3, [r1, #40]	@ 0x28
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	025b      	lsls	r3, r3, #9
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001fd6:	492c      	ldr	r1, [pc, #176]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe0:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001fe2:	f023 0310 	bic.w	r3, r3, #16
 8001fe6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001ff2:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff6:	4a24      	ldr	r2, [pc, #144]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	f023 020c 	bic.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	491f      	ldr	r1, [pc, #124]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002010:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	f023 0220 	bic.w	r2, r3, #32
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201c:	491a      	ldr	r1, [pc, #104]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 800201e:	4313      	orrs	r3, r2
 8002020:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002022:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	4a18      	ldr	r2, [pc, #96]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800202e:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff f943 	bl	80012c4 <HAL_GetTick>
 800203e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002042:	f7ff f93f 	bl	80012c4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e08d      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x736>
 8002060:	e085      	b.n	800216e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002068:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800206c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff f929 	bl	80012c4 <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002076:	f7ff f925 	bl	80012c4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d903      	bls.n	800208c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e073      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
 8002088:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800208c:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002098:	4b37      	ldr	r3, [pc, #220]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	4a36      	ldr	r2, [pc, #216]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 800209e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	6293      	str	r3, [r2, #40]	@ 0x28
 80020a8:	e061      	b.n	800216e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80020aa:	4b33      	ldr	r3, [pc, #204]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020b0:	4b31      	ldr	r3, [pc, #196]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 80020b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d031      	beq.n	8002122 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d12a      	bne.n	8002122 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d122      	bne.n	8002122 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d11a      	bne.n	8002122 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0a5b      	lsrs	r3, r3, #9
 80020f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d111      	bne.n	8002122 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d108      	bne.n	8002122 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0e1b      	lsrs	r3, r3, #24
 8002114:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e024      	b.n	8002170 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002126:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 8002128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212a:	08db      	lsrs	r3, r3, #3
 800212c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002134:	429a      	cmp	r2, r3
 8002136:	d01a      	beq.n	800216e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 800213e:	f023 0310 	bic.w	r3, r3, #16
 8002142:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f8be 	bl	80012c4 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800214a:	bf00      	nop
 800214c:	f7ff f8ba 	bl	80012c4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4293      	cmp	r3, r2
 8002156:	d0f9      	beq.n	800214c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215c:	4a06      	ldr	r2, [pc, #24]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_RCC_OscConfig+0x86c>)
 8002168:	f043 0310 	orr.w	r3, r3, #16
 800216c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	44020c00 	.word	0x44020c00

0800217c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e19e      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b83      	ldr	r3, [pc, #524]	@ (80023a0 <HAL_RCC_ClockConfig+0x224>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b80      	ldr	r3, [pc, #512]	@ (80023a0 <HAL_RCC_ClockConfig+0x224>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	497e      	ldr	r1, [pc, #504]	@ (80023a0 <HAL_RCC_ClockConfig+0x224>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b7c      	ldr	r3, [pc, #496]	@ (80023a0 <HAL_RCC_ClockConfig+0x224>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e186      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d012      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	4b74      	ldr	r3, [pc, #464]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021da:	429a      	cmp	r2, r3
 80021dc:	d909      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80021de:	4b71      	ldr	r3, [pc, #452]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	496d      	ldr	r1, [pc, #436]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d012      	beq.n	8002224 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220c:	429a      	cmp	r2, r3
 800220e:	d909      	bls.n	8002224 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002210:	4b64      	ldr	r3, [pc, #400]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	4961      	ldr	r1, [pc, #388]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002220:	4313      	orrs	r3, r2
 8002222:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4b5b      	ldr	r3, [pc, #364]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800223c:	429a      	cmp	r2, r3
 800223e:	d908      	bls.n	8002252 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002240:	4b58      	ldr	r3, [pc, #352]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4955      	ldr	r1, [pc, #340]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 800224e:	4313      	orrs	r3, r2
 8002250:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	429a      	cmp	r2, r3
 800226c:	d908      	bls.n	8002280 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800226e:	4b4d      	ldr	r3, [pc, #308]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	494a      	ldr	r1, [pc, #296]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 800227c:	4313      	orrs	r3, r2
 800227e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8093 	beq.w	80023b4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002296:	4b43      	ldr	r3, [pc, #268]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d121      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e113      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ae:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e107      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022c6:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0fb      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d6:	4b33      	ldr	r3, [pc, #204]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0f3      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80022e6:	4b2f      	ldr	r3, [pc, #188]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	492c      	ldr	r1, [pc, #176]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f8:	f7fe ffe4 	bl	80012c4 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d112      	bne.n	800232c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe ffdc 	bl	80012c4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0d7      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0318 	and.w	r3, r3, #24
 8002326:	2b18      	cmp	r3, #24
 8002328:	d1ee      	bne.n	8002308 <HAL_RCC_ClockConfig+0x18c>
 800232a:	e043      	b.n	80023b4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d112      	bne.n	800235a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002334:	e00a      	b.n	800234c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002336:	f7fe ffc5 	bl	80012c4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0c0      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800234c:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f003 0318 	and.w	r3, r3, #24
 8002354:	2b10      	cmp	r3, #16
 8002356:	d1ee      	bne.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
 8002358:	e02c      	b.n	80023b4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d122      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7fe ffae 	bl	80012c4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0a9      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_ClockConfig+0x228>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 0318 	and.w	r3, r3, #24
 8002382:	2b08      	cmp	r3, #8
 8002384:	d1ee      	bne.n	8002364 <HAL_RCC_ClockConfig+0x1e8>
 8002386:	e015      	b.n	80023b4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe ff9c 	bl	80012c4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d906      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e097      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a8:	4b4b      	ldr	r3, [pc, #300]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f003 0318 	and.w	r3, r3, #24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e9      	bne.n	8002388 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b44      	ldr	r3, [pc, #272]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d208      	bcs.n	80023e2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80023d0:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f023 020f 	bic.w	r2, r3, #15
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	493e      	ldr	r1, [pc, #248]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e2:	4b3e      	ldr	r3, [pc, #248]	@ (80024dc <HAL_RCC_ClockConfig+0x360>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d210      	bcs.n	8002412 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f0:	4b3a      	ldr	r3, [pc, #232]	@ (80024dc <HAL_RCC_ClockConfig+0x360>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 020f 	bic.w	r2, r3, #15
 80023f8:	4938      	ldr	r1, [pc, #224]	@ (80024dc <HAL_RCC_ClockConfig+0x360>)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <HAL_RCC_ClockConfig+0x360>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e05d      	b.n	80024ce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d010      	beq.n	8002440 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800242a:	429a      	cmp	r2, r3
 800242c:	d208      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800242e:	4b2a      	ldr	r3, [pc, #168]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4927      	ldr	r1, [pc, #156]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	4b21      	ldr	r3, [pc, #132]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800245a:	429a      	cmp	r2, r3
 800245c:	d209      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800245e:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	491a      	ldr	r1, [pc, #104]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 800246e:	4313      	orrs	r3, r2
 8002470:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800248c:	429a      	cmp	r2, r3
 800248e:	d209      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	490e      	ldr	r1, [pc, #56]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024a4:	f000 f822 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCC_ClockConfig+0x35c>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	490b      	ldr	r1, [pc, #44]	@ (80024e0 <HAL_RCC_ClockConfig+0x364>)
 80024b4:	5ccb      	ldrb	r3, [r1, r3]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <HAL_RCC_ClockConfig+0x368>)
 80024bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_RCC_ClockConfig+0x36c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fe74 	bl	80011b0 <HAL_InitTick>
 80024c8:	4603      	mov	r3, r0
 80024ca:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80024cc:	7afb      	ldrb	r3, [r7, #11]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	44020c00 	.word	0x44020c00
 80024dc:	40022000 	.word	0x40022000
 80024e0:	080072bc 	.word	0x080072bc
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80024f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0318 	and.w	r3, r3, #24
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80024fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e107      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002504:	4b87      	ldr	r3, [pc, #540]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f003 0318 	and.w	r3, r3, #24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d112      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002510:	4b84      	ldr	r3, [pc, #528]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800251c:	4b81      	ldr	r3, [pc, #516]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	4a81      	ldr	r2, [pc, #516]	@ (800272c <HAL_RCC_GetSysClockFreq+0x240>)
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e0f1      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002530:	4b7e      	ldr	r3, [pc, #504]	@ (800272c <HAL_RCC_GetSysClockFreq+0x240>)
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	e0ee      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002536:	4b7b      	ldr	r3, [pc, #492]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0318 	and.w	r3, r3, #24
 800253e:	2b10      	cmp	r3, #16
 8002540:	d102      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002542:	4b7b      	ldr	r3, [pc, #492]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x244>)
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e0e5      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002548:	4b76      	ldr	r3, [pc, #472]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f003 0318 	and.w	r3, r3, #24
 8002550:	2b18      	cmp	r3, #24
 8002552:	f040 80dd 	bne.w	8002710 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002556:	4b73      	ldr	r3, [pc, #460]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002560:	4b70      	ldr	r3, [pc, #448]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800256a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800256c:	4b6d      	ldr	r3, [pc, #436]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002578:	4b6a      	ldr	r3, [pc, #424]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 800257a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002590:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80b7 	beq.w	800270a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0xbe>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d056      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x16a>
 80025a8:	e077      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80025aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d02d      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80025b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	08db      	lsrs	r3, r3, #3
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	4a5a      	ldr	r2, [pc, #360]	@ (800272c <HAL_RCC_GetSysClockFreq+0x240>)
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e0:	4b50      	ldr	r3, [pc, #320]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 80025e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80025f4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002734 <HAL_RCC_GetSysClockFreq+0x248>
 80025f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002604:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002610:	e065      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002738 <HAL_RCC_GetSysClockFreq+0x24c>
 8002620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002624:	4b3f      	ldr	r3, [pc, #252]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 8002626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002634:	ed97 6a02 	vldr	s12, [r7, #8]
 8002638:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002734 <HAL_RCC_GetSysClockFreq+0x248>
 800263c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002640:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002648:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800264c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002650:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002654:	e043      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002660:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800273c <HAL_RCC_GetSysClockFreq+0x250>
 8002664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002668:	4b2e      	ldr	r3, [pc, #184]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 800266a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002678:	ed97 6a02 	vldr	s12, [r7, #8]
 800267c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002734 <HAL_RCC_GetSysClockFreq+0x248>
 8002680:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002684:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800268c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002694:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002698:	e021      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002740 <HAL_RCC_GetSysClockFreq+0x254>
 80026a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 80026ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80026c0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002734 <HAL_RCC_GetSysClockFreq+0x248>
 80026c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80026dc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x238>)
 80026e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e2:	0a5b      	lsrs	r3, r3, #9
 80026e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026e8:	3301      	adds	r3, #1
 80026ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80026fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002702:	ee17 3a90 	vmov	r3, s15
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	e004      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e001      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_GetSysClockFreq+0x240>)
 8002712:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002714:	69fb      	ldr	r3, [r7, #28]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	@ 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	44020c00 	.word	0x44020c00
 8002728:	003d0900 	.word	0x003d0900
 800272c:	03d09000 	.word	0x03d09000
 8002730:	017d7840 	.word	0x017d7840
 8002734:	46000000 	.word	0x46000000
 8002738:	4c742400 	.word	0x4c742400
 800273c:	4bbebc20 	.word	0x4bbebc20
 8002740:	4a742400 	.word	0x4a742400

08002744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002748:	f7ff fed0 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002752:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002756:	4907      	ldr	r1, [pc, #28]	@ (8002774 <HAL_RCC_GetHCLKFreq+0x30>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800275a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a05      	ldr	r2, [pc, #20]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x34>)
 8002764:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002766:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x34>)
 8002768:	681b      	ldr	r3, [r3, #0]
}
 800276a:	4618      	mov	r0, r3
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	44020c00 	.word	0x44020c00
 8002774:	080072bc 	.word	0x080072bc
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002780:	f7ff ffe0 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4904      	ldr	r1, [pc, #16]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	44020c00 	.word	0x44020c00
 80027a4:	080072cc 	.word	0x080072cc

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80027ac:	f7ff ffca 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4904      	ldr	r1, [pc, #16]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	44020c00 	.word	0x44020c00
 80027d0:	080072cc 	.word	0x080072cc

080027d4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80027d8:	f7ff ffb4 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	0b1b      	lsrs	r3, r3, #12
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4904      	ldr	r1, [pc, #16]	@ (80027fc <HAL_RCC_GetPCLK3Freq+0x28>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	44020c00 	.word	0x44020c00
 80027fc:	080072cc 	.word	0x080072cc

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b0ba      	sub	sp, #232	@ 0xe8
 8002806:	af00      	add	r7, sp, #0
 8002808:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800280c:	2300      	movs	r3, #0
 800280e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002812:	2300      	movs	r3, #0
 8002814:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002824:	2500      	movs	r5, #0
 8002826:	ea54 0305 	orrs.w	r3, r4, r5
 800282a:	d00b      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800282c:	4bcd      	ldr	r3, [pc, #820]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800282e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002832:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800283a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283c:	4ac9      	ldr	r2, [pc, #804]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800283e:	430b      	orrs	r3, r1
 8002840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f002 0801 	and.w	r8, r2, #1
 8002850:	f04f 0900 	mov.w	r9, #0
 8002854:	ea58 0309 	orrs.w	r3, r8, r9
 8002858:	d042      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800285a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	2b05      	cmp	r3, #5
 8002862:	d823      	bhi.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002864:	a201      	add	r2, pc, #4	@ (adr r2, 800286c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	080028b5 	.word	0x080028b5
 8002870:	08002885 	.word	0x08002885
 8002874:	08002899 	.word	0x08002899
 8002878:	080028b5 	.word	0x080028b5
 800287c:	080028b5 	.word	0x080028b5
 8002880:	080028b5 	.word	0x080028b5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002888:	3308      	adds	r3, #8
 800288a:	4618      	mov	r0, r3
 800288c:	f003 f90c 	bl	8005aa8 <RCCEx_PLL2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002896:	e00e      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800289c:	3330      	adds	r3, #48	@ 0x30
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 f99a 	bl	8005bd8 <RCCEx_PLL3_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80028aa:	e004      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80028b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80028be:	4ba9      	ldr	r3, [pc, #676]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028c4:	f023 0107 	bic.w	r1, r3, #7
 80028c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	4aa5      	ldr	r2, [pc, #660]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028d0:	430b      	orrs	r3, r1
 80028d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028d6:	e003      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80028dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f002 0a02 	and.w	sl, r2, #2
 80028ec:	f04f 0b00 	mov.w	fp, #0
 80028f0:	ea5a 030b 	orrs.w	r3, sl, fp
 80028f4:	f000 8088 	beq.w	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80028f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fe:	2b28      	cmp	r3, #40	@ 0x28
 8002900:	d868      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002902:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	080029dd 	.word	0x080029dd
 800290c:	080029d5 	.word	0x080029d5
 8002910:	080029d5 	.word	0x080029d5
 8002914:	080029d5 	.word	0x080029d5
 8002918:	080029d5 	.word	0x080029d5
 800291c:	080029d5 	.word	0x080029d5
 8002920:	080029d5 	.word	0x080029d5
 8002924:	080029d5 	.word	0x080029d5
 8002928:	080029ad 	.word	0x080029ad
 800292c:	080029d5 	.word	0x080029d5
 8002930:	080029d5 	.word	0x080029d5
 8002934:	080029d5 	.word	0x080029d5
 8002938:	080029d5 	.word	0x080029d5
 800293c:	080029d5 	.word	0x080029d5
 8002940:	080029d5 	.word	0x080029d5
 8002944:	080029d5 	.word	0x080029d5
 8002948:	080029c1 	.word	0x080029c1
 800294c:	080029d5 	.word	0x080029d5
 8002950:	080029d5 	.word	0x080029d5
 8002954:	080029d5 	.word	0x080029d5
 8002958:	080029d5 	.word	0x080029d5
 800295c:	080029d5 	.word	0x080029d5
 8002960:	080029d5 	.word	0x080029d5
 8002964:	080029d5 	.word	0x080029d5
 8002968:	080029dd 	.word	0x080029dd
 800296c:	080029d5 	.word	0x080029d5
 8002970:	080029d5 	.word	0x080029d5
 8002974:	080029d5 	.word	0x080029d5
 8002978:	080029d5 	.word	0x080029d5
 800297c:	080029d5 	.word	0x080029d5
 8002980:	080029d5 	.word	0x080029d5
 8002984:	080029d5 	.word	0x080029d5
 8002988:	080029dd 	.word	0x080029dd
 800298c:	080029d5 	.word	0x080029d5
 8002990:	080029d5 	.word	0x080029d5
 8002994:	080029d5 	.word	0x080029d5
 8002998:	080029d5 	.word	0x080029d5
 800299c:	080029d5 	.word	0x080029d5
 80029a0:	080029d5 	.word	0x080029d5
 80029a4:	080029d5 	.word	0x080029d5
 80029a8:	080029dd 	.word	0x080029dd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029b0:	3308      	adds	r3, #8
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 f878 	bl	8005aa8 <RCCEx_PLL2_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80029be:	e00e      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029c4:	3330      	adds	r3, #48	@ 0x30
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 f906 	bl	8005bd8 <RCCEx_PLL3_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80029d2:	e004      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80029dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80029e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029ec:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80029f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029f8:	430b      	orrs	r3, r1
 80029fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f002 0304 	and.w	r3, r2, #4
 8002a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002a22:	460b      	mov	r3, r1
 8002a24:	4313      	orrs	r3, r2
 8002a26:	d04e      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a32:	d02c      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002a34:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a38:	d825      	bhi.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3e:	d028      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a44:	d81f      	bhi.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a48:	d025      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a4c:	d81b      	bhi.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a4e:	2b80      	cmp	r3, #128	@ 0x80
 8002a50:	d00f      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002a52:	2b80      	cmp	r3, #128	@ 0x80
 8002a54:	d817      	bhi.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01f      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002a5a:	2b40      	cmp	r3, #64	@ 0x40
 8002a5c:	d113      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a62:	3308      	adds	r3, #8
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 f81f 	bl	8005aa8 <RCCEx_PLL2_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002a70:	e014      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a76:	3330      	adds	r3, #48	@ 0x30
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 f8ad 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002a84:	e00a      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002a8c:	e006      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a8e:	bf00      	nop
 8002a90:	e004      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a92:	bf00      	nop
 8002a94:	e002      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a96:	bf00      	nop
 8002a98:	e000      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002aa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002aaa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002abc:	e003      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ac2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	f002 0308 	and.w	r3, r2, #8
 8002ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	d056      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002af0:	d031      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002af2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002af6:	d82a      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002afc:	d02d      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b02:	d824      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b08:	d029      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002b0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b0e:	d81e      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b14:	d011      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1a:	d818      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d023      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b24:	d113      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 ffbb 	bl	8005aa8 <RCCEx_PLL2_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002b38:	e017      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b3e:	3330      	adds	r3, #48	@ 0x30
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 f849 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002b4c:	e00d      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002b54:	e009      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b56:	bf00      	nop
 8002b58:	e007      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b5a:	bf00      	nop
 8002b5c:	e005      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b5e:	bf00      	nop
 8002b60:	e003      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002b62:	bf00      	nop
 8002b64:	44020c00 	.word	0x44020c00
        break;
 8002b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002b72:	4bb9      	ldr	r3, [pc, #740]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b78:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b82:	4ab5      	ldr	r2, [pc, #724]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002b84:	430b      	orrs	r3, r1
 8002b86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b8a:	e003      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f002 0310 	and.w	r3, r2, #16
 8002ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002baa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	d053      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002bbe:	d031      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002bc0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002bc4:	d82a      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bca:	d02d      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002bcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bd0:	d824      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bd6:	d029      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002bd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bdc:	d81e      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be2:	d011      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be8:	d818      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d020      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf2:	d113      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 ff54 	bl	8005aa8 <RCCEx_PLL2_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002c06:	e014      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c0c:	3330      	adds	r3, #48	@ 0x30
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 ffe2 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002c22:	e006      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c24:	bf00      	nop
 8002c26:	e004      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c28:	bf00      	nop
 8002c2a:	e002      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c3a:	4b87      	ldr	r3, [pc, #540]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4a:	4a83      	ldr	r2, [pc, #524]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c52:	e003      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f002 0320 	and.w	r3, r2, #32
 8002c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	d053      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002c86:	d031      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002c88:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002c8c:	d82a      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c92:	d02d      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c98:	d824      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c9a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002c9e:	d029      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002ca0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002ca4:	d81e      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002caa:	d011      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb0:	d818      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d020      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cba:	d113      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 fef0 	bl	8005aa8 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002cce:	e014      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cd4:	3330      	adds	r3, #48	@ 0x30
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 ff7e 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002cea:	e006      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cec:	bf00      	nop
 8002cee:	e004      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cf0:	bf00      	nop
 8002cf2:	e002      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002d02:	4b55      	ldr	r3, [pc, #340]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d08:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	4a51      	ldr	r2, [pc, #324]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d14:	430b      	orrs	r3, r1
 8002d16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d1a:	e003      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d3a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4313      	orrs	r3, r2
 8002d42:	d053      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002d4e:	d031      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002d50:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002d54:	d82a      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d5a:	d02d      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d60:	d824      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d66:	d029      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d6c:	d81e      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d72:	d011      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d78:	d818      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d020      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002d7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d82:	d113      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d88:	3308      	adds	r3, #8
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 fe8c 	bl	8005aa8 <RCCEx_PLL2_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002d96:	e014      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d9c:	3330      	adds	r3, #48	@ 0x30
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 ff1a 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002db2:	e006      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002db4:	bf00      	nop
 8002db6:	e004      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002db8:	bf00      	nop
 8002dba:	e002      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002dca:	4b23      	ldr	r3, [pc, #140]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dda:	4a1f      	ldr	r2, [pc, #124]	@ (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002de2:	e003      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002de8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002df8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002e02:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	d03d      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e16:	d01b      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002e18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e1c:	d814      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e22:	d017      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8002e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e28:	d80e      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e32:	d109      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e38:	3330      	adds	r3, #48	@ 0x30
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fecc 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002e46:	e00a      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e4e:	e006      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002e50:	bf00      	nop
 8002e52:	e004      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002e54:	bf00      	nop
 8002e56:	e002      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8002e58:	44020c00 	.word	0x44020c00
        break;
 8002e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002e66:	4b99      	ldr	r3, [pc, #612]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e6c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e76:	4a95      	ldr	r2, [pc, #596]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002e7e:	e003      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eb2:	d01b      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8002eb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eb8:	d814      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002eba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ebe:	d017      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8002ec0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ec4:	d80e      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d014      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8002eca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ed4:	3330      	adds	r3, #48	@ 0x30
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 fe7e 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002eea:	e004      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002eec:	bf00      	nop
 8002eee:	e002      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002ef0:	bf00      	nop
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8002ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002efe:	4b73      	ldr	r3, [pc, #460]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f04:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f0e:	4a6f      	ldr	r2, [pc, #444]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002f16:	e003      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f1c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	d03d      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f4c:	d01b      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8002f4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f52:	d814      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002f54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f58:	d017      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8002f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f5e:	d80e      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d014      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8002f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f68:	d109      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f6e:	3330      	adds	r3, #48	@ 0x30
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fe31 	bl	8005bd8 <RCCEx_PLL3_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002f7c:	e008      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f84:	e004      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f90:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002f98:	4b4c      	ldr	r3, [pc, #304]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002faa:	4a48      	ldr	r2, [pc, #288]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fb8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fd2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	d035      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fe8:	d015      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fee:	d80e      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff8:	d109      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ffe:	3330      	adds	r3, #48	@ 0x30
 8003000:	4618      	mov	r0, r3
 8003002:	f002 fde9 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800300c:	e006      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003014:	e002      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800301a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10d      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003024:	4b29      	ldr	r3, [pc, #164]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003026:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800302a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800302e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003036:	4a25      	ldr	r2, [pc, #148]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003038:	430b      	orrs	r3, r1
 800303a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003044:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	2100      	movs	r1, #0
 8003052:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8003056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800305a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800305e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003062:	460b      	mov	r3, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	d037      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003074:	d015      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800307a:	d80e      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d012      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8003080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003084:	d109      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800308a:	3330      	adds	r3, #48	@ 0x30
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fda3 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003098:	e006      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80030a6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80030a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10f      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c2:	4a02      	ldr	r2, [pc, #8]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030c4:	430b      	orrs	r3, r1
 80030c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80030cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80030d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	2100      	movs	r1, #0
 80030e2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80030e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80030f4:	4bb8      	ldr	r3, [pc, #736]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4ab7      	ldr	r2, [pc, #732]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80030fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030fe:	61d3      	str	r3, [r2, #28]
 8003100:	4bb5      	ldr	r3, [pc, #724]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003108:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800310c:	4ab2      	ldr	r2, [pc, #712]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800310e:	430b      	orrs	r3, r1
 8003110:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800311e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003120:	2300      	movs	r3, #0
 8003122:	677b      	str	r3, [r7, #116]	@ 0x74
 8003124:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003128:	460b      	mov	r3, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	d055      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800312e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003136:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800313a:	d031      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800313c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003140:	d82a      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d02d      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314c:	d824      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800314e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003152:	d029      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8003154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003158:	d81e      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800315a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315e:	d011      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003164:	d818      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d020      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800316a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800316e:	d113      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003174:	3308      	adds	r3, #8
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fc96 	bl	8005aa8 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003182:	e014      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003188:	3330      	adds	r3, #48	@ 0x30
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fd24 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003196:	e00a      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800319e:	e006      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80031a0:	bf00      	nop
 80031a2:	e004      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80031a4:	bf00      	nop
 80031a6:	e002      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80031a8:	bf00      	nop
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80031ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80031b6:	4b88      	ldr	r3, [pc, #544]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80031bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80031c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c8:	4a83      	ldr	r2, [pc, #524]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80031d0:	e003      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031d6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80031e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031e8:	2300      	movs	r3, #0
 80031ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80031f0:	460b      	mov	r3, r1
 80031f2:	4313      	orrs	r3, r2
 80031f4:	d055      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80031f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003202:	d031      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8003204:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003208:	d82a      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800320a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800320e:	d02d      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003214:	d824      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003216:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800321a:	d029      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800321c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003220:	d81e      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003226:	d011      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322c:	d818      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d020      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003236:	d113      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800323c:	3308      	adds	r3, #8
 800323e:	4618      	mov	r0, r3
 8003240:	f002 fc32 	bl	8005aa8 <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800324a:	e014      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800324c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003250:	3330      	adds	r3, #48	@ 0x30
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fcc0 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800325e:	e00a      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003266:	e006      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003268:	bf00      	nop
 800326a:	e004      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800326c:	bf00      	nop
 800326e:	e002      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8003274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003276:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800327e:	4b56      	ldr	r3, [pc, #344]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003280:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003284:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003290:	4a51      	ldr	r2, [pc, #324]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003292:	430b      	orrs	r3, r1
 8003294:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800329e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80032a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80032ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80032b0:	2300      	movs	r3, #0
 80032b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80032b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80032b8:	460b      	mov	r3, r1
 80032ba:	4313      	orrs	r3, r2
 80032bc:	d032      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80032be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d80f      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d211      	bcs.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d911      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d109      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032da:	3308      	adds	r3, #8
 80032dc:	4618      	mov	r0, r3
 80032de:	f002 fbe3 	bl	8005aa8 <RCCEx_PLL2_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032e8:	e006      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80032f0:	e002      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80032f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003300:	4b35      	ldr	r3, [pc, #212]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003306:	f023 0107 	bic.w	r1, r3, #7
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800330e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003312:	4a31      	ldr	r2, [pc, #196]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003314:	430b      	orrs	r3, r1
 8003316:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800331a:	e003      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003320:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332c:	2100      	movs	r1, #0
 800332e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003336:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800333a:	460b      	mov	r3, r1
 800333c:	4313      	orrs	r3, r2
 800333e:	d024      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800334c:	2b08      	cmp	r3, #8
 800334e:	d005      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003356:	e002      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800335c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003366:	4b1c      	ldr	r3, [pc, #112]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800336c:	f023 0108 	bic.w	r1, r3, #8
 8003370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003378:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800337a:	430b      	orrs	r3, r1
 800337c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003380:	e003      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003382:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003386:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800338a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003396:	653b      	str	r3, [r7, #80]	@ 0x50
 8003398:	2300      	movs	r3, #0
 800339a:	657b      	str	r3, [r7, #84]	@ 0x54
 800339c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80033a0:	460b      	mov	r3, r1
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f000 80b9 	beq.w	800351a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	4a0b      	ldr	r2, [pc, #44]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b4:	f7fd ff86 	bl	80012c4 <HAL_GetTick>
 80033b8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033bc:	e010      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fd ff81 	bl	80012c4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d908      	bls.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033d4:	e00a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80033d6:	bf00      	nop
 80033d8:	44020c00 	.word	0x44020c00
 80033dc:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033e0:	4bba      	ldr	r3, [pc, #744]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0e8      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80033ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 808e 	bne.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033f6:	4bb6      	ldr	r3, [pc, #728]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80033f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003400:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d023      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800340c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003410:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003418:	4293      	cmp	r3, r2
 800341a:	d01b      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800341c:	4bac      	ldr	r3, [pc, #688]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800341e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800342a:	4ba9      	ldr	r3, [pc, #676]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800342c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003430:	4aa7      	ldr	r2, [pc, #668]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343a:	4ba5      	ldr	r3, [pc, #660]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800343c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003440:	4aa3      	ldr	r2, [pc, #652]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003446:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800344a:	4aa1      	ldr	r2, [pc, #644]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003450:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d019      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fd ff30 	bl	80012c4 <HAL_GetTick>
 8003464:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003468:	e00d      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fd ff2b 	bl	80012c4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003474:	1ad2      	subs	r2, r2, r3
 8003476:	f241 3388 	movw	r3, #5000	@ 0x1388
 800347a:	429a      	cmp	r2, r3
 800347c:	d903      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003486:	4b92      	ldr	r3, [pc, #584]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ea      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8003494:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d135      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800349c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ac:	d110      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80034ae:	4b88      	ldr	r3, [pc, #544]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034c4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034c8:	4a81      	ldr	r2, [pc, #516]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034ca:	430b      	orrs	r3, r1
 80034cc:	61d3      	str	r3, [r2, #28]
 80034ce:	e005      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80034d0:	4b7f      	ldr	r3, [pc, #508]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4a7e      	ldr	r2, [pc, #504]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034da:	61d3      	str	r3, [r2, #28]
 80034dc:	4b7c      	ldr	r3, [pc, #496]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034e2:	4a7b      	ldr	r2, [pc, #492]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034ec:	4b78      	ldr	r3, [pc, #480]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80034ee:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80034f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fe:	4a74      	ldr	r2, [pc, #464]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003500:	430b      	orrs	r3, r1
 8003502:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003506:	e008      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003508:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800350c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003510:	e003      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003512:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003516:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800351a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003528:	2300      	movs	r3, #0
 800352a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800352c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	d035      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800353a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800353e:	2b30      	cmp	r3, #48	@ 0x30
 8003540:	d014      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8003542:	2b30      	cmp	r3, #48	@ 0x30
 8003544:	d80e      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8003546:	2b20      	cmp	r3, #32
 8003548:	d012      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800354a:	2b20      	cmp	r3, #32
 800354c:	d80a      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8003552:	2b10      	cmp	r3, #16
 8003554:	d106      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003556:	4b5e      	ldr	r3, [pc, #376]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355a:	4a5d      	ldr	r2, [pc, #372]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003560:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800356c:	bf00      	nop
 800356e:	e002      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800357e:	4b54      	ldr	r3, [pc, #336]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003584:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800358c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003590:	4a4f      	ldr	r2, [pc, #316]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003592:	430b      	orrs	r3, r1
 8003594:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800359e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80035b0:	2300      	movs	r3, #0
 80035b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80035b8:	460b      	mov	r3, r1
 80035ba:	4313      	orrs	r3, r2
 80035bc:	d033      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80035be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d007      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80035ce:	e010      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d0:	4b3f      	ldr	r3, [pc, #252]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	4a3e      	ldr	r2, [pc, #248]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80035dc:	e00d      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035e2:	3308      	adds	r3, #8
 80035e4:	4618      	mov	r0, r3
 80035e6:	f002 fa5f 	bl	8005aa8 <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80035f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10d      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003602:	4b33      	ldr	r3, [pc, #204]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003604:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003608:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800360c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003610:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003614:	4a2e      	ldr	r2, [pc, #184]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003616:	430b      	orrs	r3, r1
 8003618:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003622:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003634:	2300      	movs	r3, #0
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003638:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800363c:	460b      	mov	r3, r1
 800363e:	4313      	orrs	r3, r2
 8003640:	d04c      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800364a:	2b04      	cmp	r3, #4
 800364c:	d827      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800364e:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003669 	.word	0x08003669
 8003658:	08003677 	.word	0x08003677
 800365c:	0800368b 	.word	0x0800368b
 8003660:	080036a7 	.word	0x080036a7
 8003664:	080036a7 	.word	0x080036a7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003668:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003672:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003674:	e018      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800367a:	3308      	adds	r3, #8
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fa13 	bl	8005aa8 <RCCEx_PLL2_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003688:	e00e      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800368a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800368e:	3330      	adds	r3, #48	@ 0x30
 8003690:	4618      	mov	r0, r3
 8003692:	f002 faa1 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800369c:	e004      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80036a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80036b0:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b6:	f023 0107 	bic.w	r1, r3, #7
 80036ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036c2:	4a03      	ldr	r2, [pc, #12]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036c4:	430b      	orrs	r3, r1
 80036c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036ca:	e007      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80036cc:	44020800 	.word	0x44020800
 80036d0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80036dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80036e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f000 8081 	beq.w	80037fc <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003702:	2b20      	cmp	r3, #32
 8003704:	d85f      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8003706:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	08003791 	.word	0x08003791
 8003710:	080037c7 	.word	0x080037c7
 8003714:	080037c7 	.word	0x080037c7
 8003718:	080037c7 	.word	0x080037c7
 800371c:	080037c7 	.word	0x080037c7
 8003720:	080037c7 	.word	0x080037c7
 8003724:	080037c7 	.word	0x080037c7
 8003728:	080037c7 	.word	0x080037c7
 800372c:	0800379f 	.word	0x0800379f
 8003730:	080037c7 	.word	0x080037c7
 8003734:	080037c7 	.word	0x080037c7
 8003738:	080037c7 	.word	0x080037c7
 800373c:	080037c7 	.word	0x080037c7
 8003740:	080037c7 	.word	0x080037c7
 8003744:	080037c7 	.word	0x080037c7
 8003748:	080037c7 	.word	0x080037c7
 800374c:	080037b3 	.word	0x080037b3
 8003750:	080037c7 	.word	0x080037c7
 8003754:	080037c7 	.word	0x080037c7
 8003758:	080037c7 	.word	0x080037c7
 800375c:	080037c7 	.word	0x080037c7
 8003760:	080037c7 	.word	0x080037c7
 8003764:	080037c7 	.word	0x080037c7
 8003768:	080037c7 	.word	0x080037c7
 800376c:	080037cf 	.word	0x080037cf
 8003770:	080037c7 	.word	0x080037c7
 8003774:	080037c7 	.word	0x080037c7
 8003778:	080037c7 	.word	0x080037c7
 800377c:	080037c7 	.word	0x080037c7
 8003780:	080037c7 	.word	0x080037c7
 8003784:	080037c7 	.word	0x080037c7
 8003788:	080037c7 	.word	0x080037c7
 800378c:	080037cf 	.word	0x080037cf
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4bb9      	ldr	r3, [pc, #740]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	4ab8      	ldr	r2, [pc, #736]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800379c:	e018      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800379e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037a2:	3308      	adds	r3, #8
 80037a4:	4618      	mov	r0, r3
 80037a6:	f002 f97f 	bl	8005aa8 <RCCEx_PLL2_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80037b0:	e00e      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b6:	3330      	adds	r3, #48	@ 0x30
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fa0d 	bl	8005bd8 <RCCEx_PLL3_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80037c4:	e004      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80037ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10d      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80037d8:	4ba7      	ldr	r3, [pc, #668]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80037e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037ea:	4aa3      	ldr	r2, [pc, #652]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80037f8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80037fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800380a:	2300      	movs	r3, #0
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800380e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d04e      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800381c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003824:	d02e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800382a:	d827      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800382c:	2bc0      	cmp	r3, #192	@ 0xc0
 800382e:	d02b      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003830:	2bc0      	cmp	r3, #192	@ 0xc0
 8003832:	d823      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003834:	2b80      	cmp	r3, #128	@ 0x80
 8003836:	d017      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8003838:	2b80      	cmp	r3, #128	@ 0x80
 800383a:	d81f      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8003840:	2b40      	cmp	r3, #64	@ 0x40
 8003842:	d007      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8003844:	e01a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003846:	4b8c      	ldr	r3, [pc, #560]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	4a8b      	ldr	r2, [pc, #556]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800384c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003850:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003852:	e01a      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003858:	3308      	adds	r3, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f002 f924 	bl	8005aa8 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003866:	e010      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800386c:	3330      	adds	r3, #48	@ 0x30
 800386e:	4618      	mov	r0, r3
 8003870:	f002 f9b2 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800387a:	e006      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003882:	e002      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003892:	4b79      	ldr	r3, [pc, #484]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003898:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800389c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038a4:	4974      	ldr	r1, [pc, #464]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80038b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038cc:	460b      	mov	r3, r1
 80038ce:	4313      	orrs	r3, r2
 80038d0:	d055      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80038d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038da:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80038de:	d031      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80038e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80038e4:	d82a      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80038e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ea:	d02d      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80038ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f0:	d824      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80038f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038f6:	d029      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80038f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038fc:	d81e      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d011      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003908:	d818      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d020      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800390e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003912:	d113      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003918:	3308      	adds	r3, #8
 800391a:	4618      	mov	r0, r3
 800391c:	f002 f8c4 	bl	8005aa8 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003926:	e014      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800392c:	3330      	adds	r3, #48	@ 0x30
 800392e:	4618      	mov	r0, r3
 8003930:	f002 f952 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800393a:	e00a      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003942:	e006      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003944:	bf00      	nop
 8003946:	e004      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003948:	bf00      	nop
 800394a:	e002      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800394c:	bf00      	nop
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003952:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800395c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003960:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8003964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003968:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800396c:	4942      	ldr	r1, [pc, #264]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800397a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800397e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	2100      	movs	r1, #0
 8003988:	61b9      	str	r1, [r7, #24]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d03c      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800399a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800399e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d81b      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80039a6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039e7 	.word	0x080039e7
 80039b0:	080039bd 	.word	0x080039bd
 80039b4:	080039cb 	.word	0x080039cb
 80039b8:	080039e7 	.word	0x080039e7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80039c8:	e00e      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ce:	3308      	adds	r3, #8
 80039d0:	4618      	mov	r0, r3
 80039d2:	f002 f869 	bl	8005aa8 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80039dc:	e004      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80039e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80039f0:	4b21      	ldr	r3, [pc, #132]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a02:	491d      	ldr	r1, [pc, #116]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003a0a:	e003      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a10:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	6139      	str	r1, [r7, #16]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d03c      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003a30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3c:	d00e      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a42:	d815      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d019      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4c:	d110      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a5a:	e010      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a60:	3308      	adds	r3, #8
 8003a62:	4618      	mov	r0, r3
 8003a64:	f002 f820 	bl	8005aa8 <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a6e:	e006      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8003a78:	44020c00 	.word	0x44020c00
        break;
 8003a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003a86:	4b3d      	ldr	r3, [pc, #244]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a98:	4938      	ldr	r1, [pc, #224]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003aa6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	d038      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ace:	2b30      	cmp	r3, #48	@ 0x30
 8003ad0:	d01b      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8003ad2:	2b30      	cmp	r3, #48	@ 0x30
 8003ad4:	d815      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d002      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d007      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8003ade:	e010      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae0:	4b26      	ldr	r3, [pc, #152]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	4a25      	ldr	r2, [pc, #148]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aec:	e00e      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003af2:	3330      	adds	r3, #48	@ 0x30
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 f86f 	bl	8005bd8 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003b00:	e004      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8003b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10d      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003b14:	4b19      	ldr	r3, [pc, #100]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b26:	4915      	ldr	r1, [pc, #84]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b34:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	2100      	movs	r1, #0
 8003b42:	6039      	str	r1, [r7, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00c      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003b54:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b66:	4905      	ldr	r1, [pc, #20]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8003b6e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	37e8      	adds	r7, #232	@ 0xe8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b7c:	44020c00 	.word	0x44020c00

08003b80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b08b      	sub	sp, #44	@ 0x2c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003b88:	4bae      	ldr	r3, [pc, #696]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b90:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b92:	4bac      	ldr	r3, [pc, #688]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003b9c:	4ba9      	ldr	r3, [pc, #676]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003ba8:	4ba6      	ldr	r3, [pc, #664]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bb4:	4ba3      	ldr	r3, [pc, #652]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bcc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8126 	beq.w	8003e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d053      	beq.n	8003c86 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d86f      	bhi.n	8003cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d02b      	beq.n	8003c48 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003bf0:	e068      	b.n	8003cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003bf2:	4b94      	ldr	r3, [pc, #592]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	4a92      	ldr	r2, [pc, #584]	@ (8003e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c2a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003c46:	e068      	b.n	8003d1a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c52:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c64:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c68:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003c84:	e049      	b.n	8003d1a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c90:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca2:	ed97 6a04 	vldr	s12, [r7, #16]
 8003ca6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003cc2:	e02a      	b.n	8003d1a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cc4:	4b5f      	ldr	r3, [pc, #380]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	4a5e      	ldr	r2, [pc, #376]	@ (8003e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf8:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cfc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003d18:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d26:	d121      	bne.n	8003d6c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003d28:	4b46      	ldr	r3, [pc, #280]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d017      	beq.n	8003d64 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d34:	4b43      	ldr	r3, [pc, #268]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d38:	0a5b      	lsrs	r3, r3, #9
 8003d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003d4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e006      	b.n	8003d72 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e002      	b.n	8003d72 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d72:	4b34      	ldr	r3, [pc, #208]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d7e:	d121      	bne.n	8003dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003d80:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003da2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003da6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	e006      	b.n	8003dca <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	e002      	b.n	8003dca <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003dca:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd6:	d121      	bne.n	8003e1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003de4:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de8:	0e1b      	lsrs	r3, r3, #24
 8003dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003dfe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e0a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003e12:	e010      	b.n	8003e36 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
}
 8003e1a:	e00c      	b.n	8003e36 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]
}
 8003e22:	e008      	b.n	8003e36 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
}
 8003e36:	bf00      	nop
 8003e38:	372c      	adds	r7, #44	@ 0x2c
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	44020c00 	.word	0x44020c00
 8003e48:	03d09000 	.word	0x03d09000
 8003e4c:	46000000 	.word	0x46000000
 8003e50:	4a742400 	.word	0x4a742400
 8003e54:	4bbebc20 	.word	0x4bbebc20

08003e58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b08b      	sub	sp, #44	@ 0x2c
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e60:	4bae      	ldr	r3, [pc, #696]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e6a:	4bac      	ldr	r3, [pc, #688]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003e74:	4ba9      	ldr	r3, [pc, #676]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e7e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003e80:	4ba6      	ldr	r3, [pc, #664]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003e8c:	4ba3      	ldr	r3, [pc, #652]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	08db      	lsrs	r3, r3, #3
 8003e92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	ee07 3a90 	vmov	s15, r3
 8003ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8126 	beq.w	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d053      	beq.n	8003f5e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d86f      	bhi.n	8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d003      	beq.n	8003eca <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d02b      	beq.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003ec8:	e068      	b.n	8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003eca:	4b94      	ldr	r3, [pc, #592]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	08db      	lsrs	r3, r3, #3
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	4a92      	ldr	r2, [pc, #584]	@ (8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efe:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f02:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003f1e:	e068      	b.n	8003ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004128 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f40:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f5c:	e049      	b.n	8003ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f68:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800412c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f7e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003f9a:	e02a      	b.n	8003ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fac:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fd4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8003fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003ff0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ffe:	d121      	bne.n	8004044 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004000:	4b46      	ldr	r3, [pc, #280]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d017      	beq.n	800403c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800400c:	4b43      	ldr	r3, [pc, #268]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800400e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004010:	0a5b      	lsrs	r3, r3, #9
 8004012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800401e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004022:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004026:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800402a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800402e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004032:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e006      	b.n	800404a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e002      	b.n	800404a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800404a:	4b34      	ldr	r3, [pc, #208]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004056:	d121      	bne.n	800409c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004058:	4b30      	ldr	r3, [pc, #192]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d017      	beq.n	8004094 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004064:	4b2d      	ldr	r3, [pc, #180]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800407a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800407e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	e006      	b.n	80040a2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	e002      	b.n	80040a2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80040a2:	4b1e      	ldr	r3, [pc, #120]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ae:	d121      	bne.n	80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80040b0:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d017      	beq.n	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040bc:	4b17      	ldr	r3, [pc, #92]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80040be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c0:	0e1b      	lsrs	r3, r3, #24
 80040c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80040ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80040d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80040da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040ea:	e010      	b.n	800410e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
}
 80040f2:	e00c      	b.n	800410e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
}
 80040fa:	e008      	b.n	800410e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	372c      	adds	r7, #44	@ 0x2c
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	44020c00 	.word	0x44020c00
 8004120:	03d09000 	.word	0x03d09000
 8004124:	46000000 	.word	0x46000000
 8004128:	4a742400 	.word	0x4a742400
 800412c:	4bbebc20 	.word	0x4bbebc20

08004130 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004130:	b480      	push	{r7}
 8004132:	b08b      	sub	sp, #44	@ 0x2c
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004138:	4bae      	ldr	r3, [pc, #696]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800413a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004140:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004142:	4bac      	ldr	r3, [pc, #688]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800414c:	4ba9      	ldr	r3, [pc, #676]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004156:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004158:	4ba6      	ldr	r3, [pc, #664]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004164:	4ba3      	ldr	r3, [pc, #652]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004168:	08db      	lsrs	r3, r3, #3
 800416a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8126 	beq.w	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d053      	beq.n	8004236 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d86f      	bhi.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d003      	beq.n	80041a2 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d02b      	beq.n	80041f8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80041a0:	e068      	b.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041a2:	4b94      	ldr	r3, [pc, #592]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	08db      	lsrs	r3, r3, #3
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	4a92      	ldr	r2, [pc, #584]	@ (80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80041ae:	fa22 f303 	lsr.w	r3, r2, r3
 80041b2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80041da:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80041de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80041f6:	e068      	b.n	80042ca <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004214:	ed97 6a04 	vldr	s12, [r7, #16]
 8004218:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800421c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004230:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004234:	e049      	b.n	80042ca <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004240:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8004244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	ed97 6a04 	vldr	s12, [r7, #16]
 8004256:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004272:	e02a      	b.n	80042ca <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004274:	4b5f      	ldr	r3, [pc, #380]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	4a5e      	ldr	r2, [pc, #376]	@ (80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80042ac:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80042b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80042c8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042ca:	4b4a      	ldr	r3, [pc, #296]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042d6:	d121      	bne.n	800431c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80042d8:	4b46      	ldr	r3, [pc, #280]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d017      	beq.n	8004314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042e4:	4b43      	ldr	r3, [pc, #268]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e8:	0a5b      	lsrs	r3, r3, #9
 80042ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80042f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80042fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e006      	b.n	8004322 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e002      	b.n	8004322 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004322:	4b34      	ldr	r3, [pc, #208]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800432a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800432e:	d121      	bne.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004330:	4b30      	ldr	r3, [pc, #192]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d017      	beq.n	800436c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800433c:	4b2d      	ldr	r3, [pc, #180]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800434e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004352:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004356:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800435a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800435e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004362:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e006      	b.n	800437a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	e002      	b.n	800437a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800437a:	4b1e      	ldr	r3, [pc, #120]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004386:	d121      	bne.n	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004388:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004394:	4b17      	ldr	r3, [pc, #92]	@ (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004398:	0e1b      	lsrs	r3, r3, #24
 800439a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80043a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043aa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80043ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80043b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ba:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80043c2:	e010      	b.n	80043e6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	e00c      	b.n	80043e6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
}
 80043d2:	e008      	b.n	80043e6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
}
 80043e6:	bf00      	nop
 80043e8:	372c      	adds	r7, #44	@ 0x2c
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	44020c00 	.word	0x44020c00
 80043f8:	03d09000 	.word	0x03d09000
 80043fc:	46000000 	.word	0x46000000
 8004400:	4a742400 	.word	0x4a742400
 8004404:	4bbebc20 	.word	0x4bbebc20

08004408 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b08f      	sub	sp, #60	@ 0x3c
 800440c:	af00      	add	r7, sp, #0
 800440e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004416:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800441a:	4321      	orrs	r1, r4
 800441c:	d150      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800441e:	4b26      	ldr	r3, [pc, #152]	@ (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800442a:	4b23      	ldr	r3, [pc, #140]	@ (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800442c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d108      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443e:	d104      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
 8004446:	f001 bb20 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800444a:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800444c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004458:	d108      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004460:	d104      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004462:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
 8004468:	f001 bb0f 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800446c:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004478:	d119      	bne.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004480:	d115      	bne.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800448a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448e:	d30a      	bcc.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004490:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800449a:	4a08      	ldr	r2, [pc, #32]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80044a2:	f001 baf2 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80044aa:	f001 baee 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b2:	f001 baea 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80044b6:	bf00      	nop
 80044b8:	44020c00 	.word	0x44020c00
 80044bc:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80044c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044c4:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 80044c8:	ea50 0104 	orrs.w	r1, r0, r4
 80044cc:	f000 8615 	beq.w	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 80044d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044d4:	2801      	cmp	r0, #1
 80044d6:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 80044da:	f081 82d3 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044e2:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80044e6:	ea50 0104 	orrs.w	r1, r0, r4
 80044ea:	f000 84d8 	beq.w	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80044ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044f2:	2801      	cmp	r0, #1
 80044f4:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80044f8:	f081 82c4 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80044fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004500:	f1a1 0410 	sub.w	r4, r1, #16
 8004504:	ea50 0104 	orrs.w	r1, r0, r4
 8004508:	f001 8288 	beq.w	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 800450c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004510:	2801      	cmp	r0, #1
 8004512:	f171 0110 	sbcs.w	r1, r1, #16
 8004516:	f081 82b5 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800451a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800451e:	f1a1 0408 	sub.w	r4, r1, #8
 8004522:	ea50 0104 	orrs.w	r1, r0, r4
 8004526:	f001 81fe 	beq.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800452a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800452e:	2801      	cmp	r0, #1
 8004530:	f171 0108 	sbcs.w	r1, r1, #8
 8004534:	f081 82a6 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800453c:	1f0c      	subs	r4, r1, #4
 800453e:	ea50 0104 	orrs.w	r1, r0, r4
 8004542:	f000 8753 	beq.w	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8004546:	e9d7 0100 	ldrd	r0, r1, [r7]
 800454a:	2801      	cmp	r0, #1
 800454c:	f171 0104 	sbcs.w	r1, r1, #4
 8004550:	f081 8298 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004558:	1e8c      	subs	r4, r1, #2
 800455a:	ea50 0104 	orrs.w	r1, r0, r4
 800455e:	f001 8173 	beq.w	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8004562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004566:	2801      	cmp	r0, #1
 8004568:	f171 0102 	sbcs.w	r1, r1, #2
 800456c:	f081 828a 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004570:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004574:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8004578:	4321      	orrs	r1, r4
 800457a:	f001 80fe 	beq.w	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800457e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004582:	4ccb      	ldr	r4, [pc, #812]	@ (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004584:	42a0      	cmp	r0, r4
 8004586:	f171 0100 	sbcs.w	r1, r1, #0
 800458a:	f081 827b 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800458e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004592:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8004596:	4321      	orrs	r1, r4
 8004598:	f001 8076 	beq.w	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 800459c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045a0:	4cc4      	ldr	r4, [pc, #784]	@ (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80045a2:	42a0      	cmp	r0, r4
 80045a4:	f171 0100 	sbcs.w	r1, r1, #0
 80045a8:	f081 826c 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045b0:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80045b4:	4321      	orrs	r1, r4
 80045b6:	f000 87b5 	beq.w	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80045ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045be:	4cbe      	ldr	r4, [pc, #760]	@ (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 80045c0:	42a0      	cmp	r0, r4
 80045c2:	f171 0100 	sbcs.w	r1, r1, #0
 80045c6:	f081 825d 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045ce:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80045d2:	4321      	orrs	r1, r4
 80045d4:	f000 8738 	beq.w	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80045d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045dc:	4cb7      	ldr	r4, [pc, #732]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 80045de:	42a0      	cmp	r0, r4
 80045e0:	f171 0100 	sbcs.w	r1, r1, #0
 80045e4:	f081 824e 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80045e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045ec:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80045f0:	4321      	orrs	r1, r4
 80045f2:	f001 81cd 	beq.w	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 80045f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045fa:	4cb1      	ldr	r4, [pc, #708]	@ (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80045fc:	42a0      	cmp	r0, r4
 80045fe:	f171 0100 	sbcs.w	r1, r1, #0
 8004602:	f081 823f 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800460a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800460e:	4321      	orrs	r1, r4
 8004610:	f000 80d9 	beq.w	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004618:	4caa      	ldr	r4, [pc, #680]	@ (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800461a:	42a0      	cmp	r0, r4
 800461c:	f171 0100 	sbcs.w	r1, r1, #0
 8004620:	f081 8230 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004628:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800462c:	4321      	orrs	r1, r4
 800462e:	f000 83da 	beq.w	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004636:	4ca4      	ldr	r4, [pc, #656]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8004638:	42a0      	cmp	r0, r4
 800463a:	f171 0100 	sbcs.w	r1, r1, #0
 800463e:	f081 8221 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004646:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800464a:	4321      	orrs	r1, r4
 800464c:	f000 8627 	beq.w	800529e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8004650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004654:	4c9d      	ldr	r4, [pc, #628]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8004656:	42a0      	cmp	r0, r4
 8004658:	f171 0100 	sbcs.w	r1, r1, #0
 800465c:	f081 8212 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004664:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8004668:	4321      	orrs	r1, r4
 800466a:	f000 857a 	beq.w	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800466e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004672:	4c97      	ldr	r4, [pc, #604]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8004674:	42a0      	cmp	r0, r4
 8004676:	f171 0100 	sbcs.w	r1, r1, #0
 800467a:	f081 8203 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800467e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004682:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8004686:	4321      	orrs	r1, r4
 8004688:	f000 84fb 	beq.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800468c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004690:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8004694:	f171 0100 	sbcs.w	r1, r1, #0
 8004698:	f081 81f4 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800469c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046a0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80046a4:	4321      	orrs	r1, r4
 80046a6:	f000 84a9 	beq.w	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80046aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ae:	f248 0401 	movw	r4, #32769	@ 0x8001
 80046b2:	42a0      	cmp	r0, r4
 80046b4:	f171 0100 	sbcs.w	r1, r1, #0
 80046b8:	f081 81e4 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046c0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80046c4:	4321      	orrs	r1, r4
 80046c6:	f000 8456 	beq.w	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 80046ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ce:	f244 0401 	movw	r4, #16385	@ 0x4001
 80046d2:	42a0      	cmp	r0, r4
 80046d4:	f171 0100 	sbcs.w	r1, r1, #0
 80046d8:	f081 81d4 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046e0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80046e4:	4321      	orrs	r1, r4
 80046e6:	f000 8403 	beq.w	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80046ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ee:	f242 0401 	movw	r4, #8193	@ 0x2001
 80046f2:	42a0      	cmp	r0, r4
 80046f4:	f171 0100 	sbcs.w	r1, r1, #0
 80046f8:	f081 81c4 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004700:	2821      	cmp	r0, #33	@ 0x21
 8004702:	f171 0100 	sbcs.w	r1, r1, #0
 8004706:	d255      	bcs.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800470c:	4301      	orrs	r1, r0
 800470e:	f001 81b9 	beq.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004716:	1e42      	subs	r2, r0, #1
 8004718:	f141 33ff 	adc.w	r3, r1, #4294967295
 800471c:	2a20      	cmp	r2, #32
 800471e:	f173 0100 	sbcs.w	r1, r3, #0
 8004722:	f081 81af 	bcs.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004726:	2a1f      	cmp	r2, #31
 8004728:	f201 81ac 	bhi.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800472c:	a101      	add	r1, pc, #4	@ (adr r1, 8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800472e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004732:	bf00      	nop
 8004734:	0800480b 	.word	0x0800480b
 8004738:	08004909 	.word	0x08004909
 800473c:	08005a85 	.word	0x08005a85
 8004740:	080049c9 	.word	0x080049c9
 8004744:	08005a85 	.word	0x08005a85
 8004748:	08005a85 	.word	0x08005a85
 800474c:	08005a85 	.word	0x08005a85
 8004750:	08004a99 	.word	0x08004a99
 8004754:	08005a85 	.word	0x08005a85
 8004758:	08005a85 	.word	0x08005a85
 800475c:	08005a85 	.word	0x08005a85
 8004760:	08005a85 	.word	0x08005a85
 8004764:	08005a85 	.word	0x08005a85
 8004768:	08005a85 	.word	0x08005a85
 800476c:	08005a85 	.word	0x08005a85
 8004770:	08004b7d 	.word	0x08004b7d
 8004774:	08005a85 	.word	0x08005a85
 8004778:	08005a85 	.word	0x08005a85
 800477c:	08005a85 	.word	0x08005a85
 8004780:	08005a85 	.word	0x08005a85
 8004784:	08005a85 	.word	0x08005a85
 8004788:	08005a85 	.word	0x08005a85
 800478c:	08005a85 	.word	0x08005a85
 8004790:	08005a85 	.word	0x08005a85
 8004794:	08005a85 	.word	0x08005a85
 8004798:	08005a85 	.word	0x08005a85
 800479c:	08005a85 	.word	0x08005a85
 80047a0:	08005a85 	.word	0x08005a85
 80047a4:	08005a85 	.word	0x08005a85
 80047a8:	08005a85 	.word	0x08005a85
 80047ac:	08005a85 	.word	0x08005a85
 80047b0:	08004c53 	.word	0x08004c53
 80047b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80047bc:	430b      	orrs	r3, r1
 80047be:	f000 82b3 	beq.w	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80047c2:	f001 b95f 	b.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80047c6:	4b43      	ldr	r3, [pc, #268]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80047c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047d8:	f107 0320 	add.w	r3, r7, #32
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff f9cf 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80047e6:	f001 b950 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d108      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fb2f 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047fe:	f001 b944 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004806:	f001 b940 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800480a:	4b32      	ldr	r3, [pc, #200]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800480c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800481c:	f7fd ffc4 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8004820:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004822:	f001 b932 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004826:	4b2b      	ldr	r3, [pc, #172]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800482e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004832:	d10a      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	2b01      	cmp	r3, #1
 8004838:	d107      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800483a:	f107 0314 	add.w	r3, r7, #20
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fb0a 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	637b      	str	r3, [r7, #52]	@ 0x34
 8004848:	e05c      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800484a:	4b22      	ldr	r3, [pc, #136]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004856:	d10a      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800485e:	f107 0308 	add.w	r3, r7, #8
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fc64 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	637b      	str	r3, [r7, #52]	@ 0x34
 800486c:	e04a      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800486e:	4b19      	ldr	r3, [pc, #100]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d10c      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	2b03      	cmp	r3, #3
 800487e:	d109      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004880:	4b14      	ldr	r3, [pc, #80]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	637b      	str	r3, [r7, #52]	@ 0x34
 8004892:	e037      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004894:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a0:	d11e      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d11b      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80048aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ac:	e02a      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80048ae:	bf00      	nop
 80048b0:	40000001 	.word	0x40000001
 80048b4:	20000001 	.word	0x20000001
 80048b8:	10000001 	.word	0x10000001
 80048bc:	08000001 	.word	0x08000001
 80048c0:	04000001 	.word	0x04000001
 80048c4:	00400001 	.word	0x00400001
 80048c8:	00200001 	.word	0x00200001
 80048cc:	00040001 	.word	0x00040001
 80048d0:	00020001 	.word	0x00020001
 80048d4:	44020c00 	.word	0x44020c00
 80048d8:	03d09000 	.word	0x03d09000
 80048dc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80048e0:	4ba3      	ldr	r3, [pc, #652]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80048e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d106      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d103      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80048f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048fa:	e003      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004900:	f001 b8c3 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004904:	f001 b8c1 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004908:	4b99      	ldr	r3, [pc, #612]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800490a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800490e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004912:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800491a:	f7fd ff2f 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 800491e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004920:	f001 b8b3 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004924:	4b92      	ldr	r3, [pc, #584]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800492c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004930:	d10a      	bne.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	2b08      	cmp	r3, #8
 8004936:	d107      	bne.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fa8b 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
 8004946:	e03d      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494a:	2b10      	cmp	r3, #16
 800494c:	d108      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800494e:	f107 0308 	add.w	r3, r7, #8
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fbec 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800495c:	f001 b895 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004960:	4b83      	ldr	r3, [pc, #524]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b02      	cmp	r3, #2
 800496a:	d10c      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	2b18      	cmp	r3, #24
 8004970:	d109      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004972:	4b7f      	ldr	r3, [pc, #508]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
 8004984:	e01e      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004986:	4b7a      	ldr	r3, [pc, #488]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800498e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004992:	d105      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004996:	2b20      	cmp	r3, #32
 8004998:	d102      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800499a:	4b77      	ldr	r3, [pc, #476]	@ (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
 800499e:	e011      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80049a0:	4b73      	ldr	r3, [pc, #460]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d106      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	2b28      	cmp	r3, #40	@ 0x28
 80049b2:	d103      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80049b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ba:	e003      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049c0:	f001 b863 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80049c4:	f001 b861 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80049c8:	4b69      	ldr	r3, [pc, #420]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049ce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80049d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80049da:	f7fd fecf 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 80049de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80049e0:	f001 b853 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80049e4:	4b62      	ldr	r3, [pc, #392]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049f0:	d10a      	bne.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d107      	bne.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fa2b 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a06:	e045      	b.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8004a08:	4b59      	ldr	r3, [pc, #356]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a14:	d10a      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	2b80      	cmp	r3, #128	@ 0x80
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fb85 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a2a:	e033      	b.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004a2c:	4b50      	ldr	r3, [pc, #320]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	08db      	lsrs	r3, r3, #3
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	4a4a      	ldr	r2, [pc, #296]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a50:	e020      	b.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004a52:	4b47      	ldr	r3, [pc, #284]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a66:	d102      	bne.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8004a68:	4b43      	ldr	r3, [pc, #268]	@ (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a6c:	e012      	b.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004a6e:	4b40      	ldr	r3, [pc, #256]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a82:	d103      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8004a84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8a:	e003      	b.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a90:	f000 bffb 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a94:	f000 bff9 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004a98:	4b35      	ldr	r3, [pc, #212]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a9e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8004aa2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004aaa:	f7fd fe67 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8004aae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ab0:	f000 bfeb 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8004ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac8:	d107      	bne.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aca:	f107 0314 	add.w	r3, r7, #20
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff f9c2 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad8:	e047      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8004ada:	4b25      	ldr	r3, [pc, #148]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ae6:	d10b      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aee:	d107      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004af0:	f107 0308 	add.w	r3, r7, #8
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fb1b 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afe:	e034      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004b00:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d10d      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b12:	d109      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b14:	4b16      	ldr	r3, [pc, #88]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	08db      	lsrs	r3, r3, #3
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	4a15      	ldr	r2, [pc, #84]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b26:	e020      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8004b28:	4b11      	ldr	r3, [pc, #68]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b34:	d106      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3c:	d102      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b42:	e012      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d107      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b58:	d103      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8004b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b66:	f000 bf90 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004b6a:	f000 bf8e 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004b6e:	bf00      	nop
 8004b70:	44020c00 	.word	0x44020c00
 8004b74:	03d09000 	.word	0x03d09000
 8004b78:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004b7c:	4ba5      	ldr	r3, [pc, #660]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b82:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b8e:	f7fd fdf5 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8004b92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b94:	f000 bf79 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8004b98:	4b9e      	ldr	r3, [pc, #632]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ba4:	d10b      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bac:	d107      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bae:	f107 0314 	add.w	r3, r7, #20
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff f950 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bbc:	e047      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8004bbe:	4b95      	ldr	r3, [pc, #596]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bca:	d10b      	bne.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bd4:	f107 0308 	add.w	r3, r7, #8
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff faa9 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be2:	e034      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004be4:	4b8b      	ldr	r3, [pc, #556]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d10d      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bf6:	d109      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bf8:	4b86      	ldr	r3, [pc, #536]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	08db      	lsrs	r3, r3, #3
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	4a85      	ldr	r2, [pc, #532]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	e020      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8004c0c:	4b81      	ldr	r3, [pc, #516]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c18:	d106      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c20:	d102      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8004c22:	4b7e      	ldr	r3, [pc, #504]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c26:	e012      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004c28:	4b7a      	ldr	r3, [pc, #488]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d107      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c3c:	d103      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c44:	e003      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c4a:	f000 bf1e 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004c4e:	f000 bf1c 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004c52:	4b70      	ldr	r3, [pc, #448]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c58:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8004c5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c64:	f7fd fd8a 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8004c68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c6a:	f000 bf0e 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8004c6e:	4b69      	ldr	r3, [pc, #420]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c82:	d107      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c84:	f107 0314 	add.w	r3, r7, #20
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff f8e5 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c92:	e047      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8004c94:	4b5f      	ldr	r3, [pc, #380]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ca0:	d10b      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca8:	d107      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004caa:	f107 0308 	add.w	r3, r7, #8
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fa3e 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb8:	e034      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004cba:	4b56      	ldr	r3, [pc, #344]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d10d      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cce:	4b51      	ldr	r3, [pc, #324]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	08db      	lsrs	r3, r3, #3
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce0:	e020      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cee:	d106      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8004cf8:	4b48      	ldr	r3, [pc, #288]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfc:	e012      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004cfe:	4b45      	ldr	r3, [pc, #276]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d12:	d103      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8004d14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d1a:	e003      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d20:	f000 beb3 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004d24:	f000 beb1 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d28:	4b3a      	ldr	r3, [pc, #232]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d2e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004d32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004d3a:	f7fd fd4b 	bl	80027d4 <HAL_RCC_GetPCLK3Freq>
 8004d3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004d40:	f000 bea3 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d4a:	d108      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff f881 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d5a:	f000 be96 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d64:	d108      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff f9e0 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d74:	f000 be89 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004d78:	4b26      	ldr	r3, [pc, #152]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d10d      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d8a:	d109      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d8c:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	08db      	lsrs	r3, r3, #3
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	4a20      	ldr	r2, [pc, #128]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d9e:	e020      	b.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004da0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dac:	d106      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004db4:	d102      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8004db6:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dba:	e012      	b.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004dbc:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d107      	bne.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004dd0:	d103      	bne.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8004dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd8:	e003      	b.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dde:	f000 be54 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004de2:	f000 be52 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004df8:	f7fd fca4 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8004dfc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004dfe:	f000 be44 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e08:	f7fd fb70 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8004e0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e0e:	f000 be3c 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e12:	bf00      	nop
 8004e14:	44020c00 	.word	0x44020c00
 8004e18:	03d09000 	.word	0x03d09000
 8004e1c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d108      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff f814 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e34:	f000 be29 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004e38:	4b9f      	ldr	r3, [pc, #636]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e44:	d105      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d102      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8004e4c:	4b9b      	ldr	r3, [pc, #620]	@ (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8004e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e50:	e023      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004e52:	4b99      	ldr	r3, [pc, #612]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d109      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e64:	4b94      	ldr	r3, [pc, #592]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	08db      	lsrs	r3, r3, #3
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	4a94      	ldr	r2, [pc, #592]	@ (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e76:	e010      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004e78:	4b8f      	ldr	r3, [pc, #572]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e84:	d105      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8004e8c:	4b8d      	ldr	r3, [pc, #564]	@ (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e90:	e003      	b.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e96:	f000 bdf8 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e9a:	f000 bdf6 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8004e9e:	4b86      	ldr	r3, [pc, #536]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004eaa:	4b83      	ldr	r3, [pc, #524]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8004ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	e012      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d103      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8004edc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004ee8:	f000 bdcf 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004eec:	f000 bdcd 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004ef0:	4b71      	ldr	r3, [pc, #452]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ef2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004efa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f02:	f7fd fc3b 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8004f06:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f08:	f000 bdbf 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f12:	d108      	bne.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f14:	f107 0308 	add.w	r3, r7, #8
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff f909 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f22:	f000 bdb2 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004f26:	4b64      	ldr	r3, [pc, #400]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d10d      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f38:	d109      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	08db      	lsrs	r3, r3, #3
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	4a5e      	ldr	r2, [pc, #376]	@ (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f4c:	e011      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f5a:	d106      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f62:	d102      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8004f64:	4b57      	ldr	r3, [pc, #348]	@ (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f68:	e003      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f6e:	f000 bd8c 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f72:	f000 bd8a 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f76:	4b50      	ldr	r3, [pc, #320]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004f78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f7c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004f80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f88:	f7fd fbf8 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8004f8c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f8e:	f000 bd7c 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f98:	d108      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff f8c6 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fa8:	f000 bd6f 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004fac:	4b42      	ldr	r3, [pc, #264]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fbe:	d109      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	08db      	lsrs	r3, r3, #3
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	4a3d      	ldr	r2, [pc, #244]	@ (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd2:	e011      	b.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004fd4:	4b38      	ldr	r3, [pc, #224]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fe8:	d102      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8004fea:	4b36      	ldr	r3, [pc, #216]	@ (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ff4:	f000 bd49 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ff8:	f000 bd47 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004ffe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005002:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005006:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800500e:	f7fd fbe1 	bl	80027d4 <HAL_RCC_GetPCLK3Freq>
 8005012:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005014:	f000 bd39 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800501e:	d108      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff f883 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800502e:	f000 bd2c 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005032:	4b21      	ldr	r3, [pc, #132]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d10d      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005044:	d109      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005046:	4b1c      	ldr	r3, [pc, #112]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	08db      	lsrs	r3, r3, #3
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	4a1b      	ldr	r2, [pc, #108]	@ (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
 8005058:	e011      	b.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800505a:	4b17      	ldr	r3, [pc, #92]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005066:	d106      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800506e:	d102      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8005070:	4b14      	ldr	r3, [pc, #80]	@ (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
 8005074:	e003      	b.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800507a:	f000 bd06 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800507e:	f000 bd04 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005084:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005088:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800508c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d104      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fd fb72 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8005098:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800509a:	f000 bcf6 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a4:	d110      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f840 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050b4:	f000 bce9 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80050b8:	44020c00 	.word	0x44020c00
 80050bc:	017d7840 	.word	0x017d7840
 80050c0:	03d09000 	.word	0x03d09000
 80050c4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80050c8:	4ba4      	ldr	r3, [pc, #656]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d10e      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050da:	d10a      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050dc:	4b9f      	ldr	r3, [pc, #636]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	08db      	lsrs	r3, r3, #3
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	4a9e      	ldr	r2, [pc, #632]	@ (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ee:	f000 bccc 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050f6:	f000 bcc8 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80050fa:	4b98      	ldr	r3, [pc, #608]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80050fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005100:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800510c:	f7fd fb62 	bl	80027d4 <HAL_RCC_GetPCLK3Freq>
 8005110:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005112:	f000 bcba 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800511c:	d108      	bne.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff f804 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800512c:	f000 bcad 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8005130:	4b8a      	ldr	r3, [pc, #552]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d10e      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005142:	d10a      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005144:	4b85      	ldr	r3, [pc, #532]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	08db      	lsrs	r3, r3, #3
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	4a84      	ldr	r2, [pc, #528]	@ (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005156:	f000 bc98 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800515e:	f000 bc94 	b.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005162:	4b7e      	ldr	r3, [pc, #504]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005164:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800516c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005174:	d056      	beq.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800517c:	f200 808b 	bhi.w	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005186:	d03e      	beq.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	f200 8082 	bhi.w	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8005192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005198:	d027      	beq.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051a0:	d879      	bhi.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a8:	d017      	beq.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b0:	d871      	bhi.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051be:	d004      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 80051c0:	e069      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80051c2:	f7fd fb07 	bl	80027d4 <HAL_RCC_GetPCLK3Freq>
 80051c6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80051c8:	e068      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ca:	f107 0314 	add.w	r3, r7, #20
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fe42 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051d8:	e060      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe ffa6 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80051e8:	e058      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051ea:	4b5c      	ldr	r3, [pc, #368]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80051ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d103      	bne.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 80051f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80051fe:	e04d      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005204:	e04a      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005206:	4b55      	ldr	r3, [pc, #340]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800520c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005214:	d103      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8005216:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800521c:	e03e      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005222:	e03b      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005224:	4b4d      	ldr	r3, [pc, #308]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800522a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005230:	4b4a      	ldr	r3, [pc, #296]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d10c      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 800523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005242:	4b46      	ldr	r3, [pc, #280]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	08db      	lsrs	r3, r3, #3
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	4a44      	ldr	r2, [pc, #272]	@ (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
 8005254:	e01e      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005256:	4b41      	ldr	r3, [pc, #260]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005262:	d106      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526a:	d102      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800526c:	4b3d      	ldr	r3, [pc, #244]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 800526e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005270:	e010      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005272:	4b3a      	ldr	r3, [pc, #232]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800527a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800527e:	d106      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005286:	d102      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005288:	4b37      	ldr	r3, [pc, #220]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
 800528c:	e002      	b.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005292:	e003      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8005294:	e002      	b.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800529a:	bf00      	nop
          }
        }
        break;
 800529c:	e3f5      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800529e:	4b2f      	ldr	r3, [pc, #188]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80052a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80052a8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052b0:	d05f      	beq.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052b8:	f200 8094 	bhi.w	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c2:	d03f      	beq.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ca:	f200 808b 	bhi.w	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052d4:	d028      	beq.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052dc:	f200 8082 	bhi.w	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e6:	d017      	beq.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ee:	d879      	bhi.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fc:	d004      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80052fe:	e071      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005300:	f7fd fa3c 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8005304:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005306:	e070      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	4618      	mov	r0, r3
 800530e:	f7fe fda3 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005316:	e068      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe ff07 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005326:	e060      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005328:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800532a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d103      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8005336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800533c:	e055      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005342:	e052      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800534a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800534e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005352:	d10b      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8005354:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800535a:	e046      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800535c:	44020c00 	.word	0x44020c00
 8005360:	03d09000 	.word	0x03d09000
 8005364:	003d0900 	.word	0x003d0900
 8005368:	017d7840 	.word	0x017d7840
              frequency = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005370:	e03b      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005372:	4bae      	ldr	r3, [pc, #696]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005378:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800537c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800537e:	4bab      	ldr	r3, [pc, #684]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	d10c      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005390:	4ba6      	ldr	r3, [pc, #664]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	08db      	lsrs	r3, r3, #3
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	4aa5      	ldr	r2, [pc, #660]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a2:	e01e      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053a4:	4ba1      	ldr	r3, [pc, #644]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b0:	d106      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b8:	d102      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80053ba:	4b9e      	ldr	r3, [pc, #632]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053be:	e010      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053c0:	4b9a      	ldr	r3, [pc, #616]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053cc:	d106      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80053ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053d4:	d102      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80053d6:	4b98      	ldr	r3, [pc, #608]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053da:	e002      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80053e0:	e003      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80053e2:	e002      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80053e8:	bf00      	nop
          }
        }
        break;
 80053ea:	e34e      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80053ec:	4b8f      	ldr	r3, [pc, #572]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80053f8:	4b8c      	ldr	r3, [pc, #560]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005400:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005404:	d105      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 800540c:	4b8a      	ldr	r3, [pc, #552]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800540e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005410:	e33b      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005418:	d107      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800541a:	f107 0320 	add.w	r3, r7, #32
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fbae 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005428:	e32f      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005430:	d107      	bne.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005432:	f107 0314 	add.w	r3, r7, #20
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fd0e 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005440:	e323      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005446:	e320      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005448:	4b78      	ldr	r3, [pc, #480]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800544a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	2b04      	cmp	r3, #4
 8005458:	d860      	bhi.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 800545a:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005475 	.word	0x08005475
 8005464:	08005485 	.word	0x08005485
 8005468:	08005495 	.word	0x08005495
 800546c:	080054a5 	.word	0x080054a5
 8005470:	080054ab 	.word	0x080054ab
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005474:	f107 0320 	add.w	r3, r7, #32
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe fb81 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005482:	e04e      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fce5 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005492:	e046      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe fe49 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054a2:	e03e      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80054a4:	4b65      	ldr	r3, [pc, #404]	@ (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054a8:	e03b      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054aa:	4b60      	ldr	r3, [pc, #384]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054b0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054b6:	4b5d      	ldr	r3, [pc, #372]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d10c      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80054c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054c8:	4b58      	ldr	r3, [pc, #352]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	4a57      	ldr	r2, [pc, #348]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054da:	e01e      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054dc:	4b53      	ldr	r3, [pc, #332]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e8:	d106      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 80054ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f0:	d102      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80054f2:	4b50      	ldr	r3, [pc, #320]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f6:	e010      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054f8:	4b4c      	ldr	r3, [pc, #304]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005504:	d106      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800550c:	d102      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800550e:	4b4a      	ldr	r3, [pc, #296]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
 8005512:	e002      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800551a:	e002      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005520:	bf00      	nop
          }
        }
        break;
 8005522:	e2b2      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005524:	4b41      	ldr	r3, [pc, #260]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800552a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800552e:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	2b20      	cmp	r3, #32
 8005534:	f200 80a4 	bhi.w	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	080055c5 	.word	0x080055c5
 8005544:	08005681 	.word	0x08005681
 8005548:	08005681 	.word	0x08005681
 800554c:	08005681 	.word	0x08005681
 8005550:	08005681 	.word	0x08005681
 8005554:	08005681 	.word	0x08005681
 8005558:	08005681 	.word	0x08005681
 800555c:	08005681 	.word	0x08005681
 8005560:	080055d5 	.word	0x080055d5
 8005564:	08005681 	.word	0x08005681
 8005568:	08005681 	.word	0x08005681
 800556c:	08005681 	.word	0x08005681
 8005570:	08005681 	.word	0x08005681
 8005574:	08005681 	.word	0x08005681
 8005578:	08005681 	.word	0x08005681
 800557c:	08005681 	.word	0x08005681
 8005580:	080055e5 	.word	0x080055e5
 8005584:	08005681 	.word	0x08005681
 8005588:	08005681 	.word	0x08005681
 800558c:	08005681 	.word	0x08005681
 8005590:	08005681 	.word	0x08005681
 8005594:	08005681 	.word	0x08005681
 8005598:	08005681 	.word	0x08005681
 800559c:	08005681 	.word	0x08005681
 80055a0:	080055f5 	.word	0x080055f5
 80055a4:	08005681 	.word	0x08005681
 80055a8:	08005681 	.word	0x08005681
 80055ac:	08005681 	.word	0x08005681
 80055b0:	08005681 	.word	0x08005681
 80055b4:	08005681 	.word	0x08005681
 80055b8:	08005681 	.word	0x08005681
 80055bc:	08005681 	.word	0x08005681
 80055c0:	080055fb 	.word	0x080055fb
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055c4:	f107 0320 	add.w	r3, r7, #32
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fad9 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055d2:	e058      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe fc3d 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055e2:	e050      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055e4:	f107 0308 	add.w	r3, r7, #8
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe fda1 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055f2:	e048      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80055f4:	4b11      	ldr	r3, [pc, #68]	@ (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80055f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055f8:	e045      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055fa:	4b0c      	ldr	r3, [pc, #48]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80055fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005600:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005606:	4b09      	ldr	r3, [pc, #36]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b02      	cmp	r3, #2
 8005610:	d116      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8005612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d113      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005618:	4b04      	ldr	r3, [pc, #16]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	08db      	lsrs	r3, r3, #3
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	4a03      	ldr	r2, [pc, #12]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
 800562a:	e028      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800562c:	44020c00 	.word	0x44020c00
 8005630:	03d09000 	.word	0x03d09000
 8005634:	003d0900 	.word	0x003d0900
 8005638:	017d7840 	.word	0x017d7840
 800563c:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005640:	4b95      	ldr	r3, [pc, #596]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564c:	d106      	bne.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 800564e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005654:	d102      	bne.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005656:	4b91      	ldr	r3, [pc, #580]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
 800565a:	e010      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800565c:	4b8e      	ldr	r3, [pc, #568]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005668:	d106      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005670:	d102      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005672:	4b8b      	ldr	r3, [pc, #556]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
 8005676:	e002      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800567c:	e003      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800567e:	e002      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005684:	bf00      	nop
          }
        }
        break;
 8005686:	e200      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005688:	4b83      	ldr	r3, [pc, #524]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800568a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800568e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005692:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569a:	d031      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a2:	d866      	bhi.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056a8:	d027      	beq.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80056ae:	d860      	bhi.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	2b80      	cmp	r3, #128	@ 0x80
 80056b4:	d019      	beq.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	2b80      	cmp	r3, #128	@ 0x80
 80056ba:	d85a      	bhi.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	2b40      	cmp	r3, #64	@ 0x40
 80056c6:	d008      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 80056c8:	e053      	b.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056ca:	f107 0320 	add.w	r3, r7, #32
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fa56 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056d8:	e04e      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056da:	f107 0314 	add.w	r3, r7, #20
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fbba 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056e8:	e046      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fd1e 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056f8:	e03e      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80056fa:	4b6a      	ldr	r3, [pc, #424]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80056fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80056fe:	e03b      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005700:	4b65      	ldr	r3, [pc, #404]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005706:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800570c:	4b62      	ldr	r3, [pc, #392]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d10c      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800571e:	4b5e      	ldr	r3, [pc, #376]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	08db      	lsrs	r3, r3, #3
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	4a5f      	ldr	r2, [pc, #380]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800572a:	fa22 f303 	lsr.w	r3, r2, r3
 800572e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005730:	e01e      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005732:	4b59      	ldr	r3, [pc, #356]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800573a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800573e:	d106      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005746:	d102      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005748:	4b54      	ldr	r3, [pc, #336]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800574a:	637b      	str	r3, [r7, #52]	@ 0x34
 800574c:	e010      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800574e:	4b52      	ldr	r3, [pc, #328]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800575a:	d106      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 800575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005762:	d102      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005764:	4b4e      	ldr	r3, [pc, #312]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800576e:	e003      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8005770:	e002      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005776:	bf00      	nop
          }
        }
        break;
 8005778:	e187      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800577c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005780:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005784:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800578c:	f7fd f80c 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8005790:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005792:	e17a      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8005794:	4b40      	ldr	r3, [pc, #256]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800579c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a0:	d10b      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a8:	d107      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057aa:	f107 0314 	add.w	r3, r7, #20
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe fb52 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b8:	e045      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80057ba:	4b37      	ldr	r3, [pc, #220]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c6:	d10b      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ce:	d107      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d0:	f107 0308 	add.w	r3, r7, #8
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe fcab 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057de:	e032      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80057e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d10d      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057f2:	d109      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057f4:	4b28      	ldr	r3, [pc, #160]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	4a2a      	ldr	r2, [pc, #168]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	637b      	str	r3, [r7, #52]	@ 0x34
 8005806:	e01e      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005808:	4b23      	ldr	r3, [pc, #140]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005814:	d106      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800581c:	d102      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800581e:	4b1f      	ldr	r3, [pc, #124]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
 8005822:	e010      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8005824:	4b1c      	ldr	r3, [pc, #112]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005830:	d106      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005838:	d102      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800583a:	4b19      	ldr	r3, [pc, #100]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800583c:	637b      	str	r3, [r7, #52]	@ 0x34
 800583e:	e002      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005844:	e121      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005846:	e120      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005848:	4b13      	ldr	r3, [pc, #76]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800584a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	2b03      	cmp	r3, #3
 8005858:	d861      	bhi.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005871 	.word	0x08005871
 8005864:	08005879 	.word	0x08005879
 8005868:	08005889 	.word	0x08005889
 800586c:	080058ad 	.word	0x080058ad
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005870:	f7fc ff68 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8005874:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005876:	e055      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005878:	f107 0320 	add.w	r3, r7, #32
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe f97f 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005886:	e04d      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005888:	f107 0314 	add.w	r3, r7, #20
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe fae3 	bl	8003e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005896:	e045      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005898:	44020c00 	.word	0x44020c00
 800589c:	003d0900 	.word	0x003d0900
 80058a0:	017d7840 	.word	0x017d7840
 80058a4:	00bb8000 	.word	0x00bb8000
 80058a8:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058ac:	4b79      	ldr	r3, [pc, #484]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80058b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058b8:	4b76      	ldr	r3, [pc, #472]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d10c      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058ca:	4b72      	ldr	r3, [pc, #456]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	08db      	lsrs	r3, r3, #3
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	4a70      	ldr	r2, [pc, #448]	@ (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34
 80058dc:	e01e      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058de:	4b6d      	ldr	r3, [pc, #436]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ea:	d106      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f2:	d102      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80058f4:	4b69      	ldr	r3, [pc, #420]	@ (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f8:	e010      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058fa:	4b66      	ldr	r3, [pc, #408]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005906:	d106      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800590e:	d102      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005910:	4b63      	ldr	r3, [pc, #396]	@ (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8005912:	637b      	str	r3, [r7, #52]	@ 0x34
 8005914:	e002      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800591a:	e003      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800591c:	e002      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005922:	bf00      	nop
          }
        }
        break;
 8005924:	e0b1      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005926:	4b5b      	ldr	r3, [pc, #364]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800592c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005930:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005932:	4b58      	ldr	r3, [pc, #352]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b02      	cmp	r3, #2
 800593e:	d106      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8005946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
 800594c:	e01f      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800594e:	4b51      	ldr	r3, [pc, #324]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005958:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800595c:	d106      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	d103      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8005964:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005968:	637b      	str	r3, [r7, #52]	@ 0x34
 800596a:	e010      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800596c:	4b49      	ldr	r3, [pc, #292]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005978:	d106      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2b80      	cmp	r3, #128	@ 0x80
 800597e:	d103      	bne.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8005980:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
 8005986:	e002      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800598c:	e07d      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800598e:	e07c      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005990:	4b40      	ldr	r3, [pc, #256]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005996:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800599a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800599c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a8:	d105      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80059b0:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80059b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b4:	e031      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80059b6:	4b37      	ldr	r3, [pc, #220]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059c2:	d10a      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d107      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059ca:	f107 0320 	add.w	r3, r7, #32
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe f8d6 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d8:	e01f      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80059da:	4b2e      	ldr	r3, [pc, #184]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80059dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d106      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d103      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80059ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	e011      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80059f6:	4b27      	ldr	r3, [pc, #156]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80059f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a04:	d106      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	2b30      	cmp	r3, #48	@ 0x30
 8005a0a:	d103      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8005a0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a12:	e002      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005a18:	e037      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005a1a:	e036      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a2e:	f107 0320 	add.w	r3, r7, #32
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe f8a4 	bl	8003b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005a3c:	e025      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8005a3e:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a4a:	d10a      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d107      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a52:	f107 0308 	add.w	r3, r7, #8
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fb6a 	bl	8004130 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a60:	e00f      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005a62:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	2b30      	cmp	r3, #48	@ 0x30
 8005a74:	d102      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8005a76:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a7a:	e002      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005a80:	e003      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005a82:	e002      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a88:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	373c      	adds	r7, #60	@ 0x3c
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}
 8005a94:	44020c00 	.word	0x44020c00
 8005a98:	03d09000 	.word	0x03d09000
 8005a9c:	003d0900 	.word	0x003d0900
 8005aa0:	017d7840 	.word	0x017d7840
 8005aa4:	02dc6c00 	.word	0x02dc6c00

08005aa8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005ab0:	4b48      	ldr	r3, [pc, #288]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a47      	ldr	r2, [pc, #284]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005abc:	f7fb fc02 	bl	80012c4 <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ac2:	e008      	b.n	8005ad6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ac4:	f7fb fbfe 	bl	80012c4 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e07a      	b.n	8005bcc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6811      	ldr	r1, [r2, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6852      	ldr	r2, [r2, #4]
 8005af6:	0212      	lsls	r2, r2, #8
 8005af8:	430a      	orrs	r2, r1
 8005afa:	4936      	ldr	r1, [pc, #216]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	025b      	lsls	r3, r3, #9
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	061b      	lsls	r3, r3, #24
 8005b2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b30:	4928      	ldr	r1, [pc, #160]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005b36:	4b27      	ldr	r3, [pc, #156]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	f023 020c 	bic.w	r2, r3, #12
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	4924      	ldr	r1, [pc, #144]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005b48:	4b22      	ldr	r3, [pc, #136]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	f023 0220 	bic.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	491f      	ldr	r1, [pc, #124]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	491c      	ldr	r1, [pc, #112]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	4a19      	ldr	r2, [pc, #100]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b6e:	f023 0310 	bic.w	r3, r3, #16
 8005b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005b74:	4b17      	ldr	r3, [pc, #92]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b7c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6a12      	ldr	r2, [r2, #32]
 8005b84:	00d2      	lsls	r2, r2, #3
 8005b86:	4913      	ldr	r1, [pc, #76]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005b8c:	4b11      	ldr	r3, [pc, #68]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	4a10      	ldr	r2, [pc, #64]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b92:	f043 0310 	orr.w	r3, r3, #16
 8005b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005b98:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005b9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ba2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ba4:	f7fb fb8e 	bl	80012c4 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bac:	f7fb fb8a 	bl	80012c4 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e006      	b.n	8005bcc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bbe:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <RCCEx_PLL2_Config+0x12c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0

}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	44020c00 	.word	0x44020c00

08005bd8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005be0:	4b48      	ldr	r3, [pc, #288]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a47      	ldr	r2, [pc, #284]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bec:	f7fb fb6a 	bl	80012c4 <HAL_GetTick>
 8005bf0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bf2:	e008      	b.n	8005c06 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bf4:	f7fb fb66 	bl	80012c4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e07a      	b.n	8005cfc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c06:	4b3f      	ldr	r3, [pc, #252]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005c12:	4b3c      	ldr	r3, [pc, #240]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6852      	ldr	r2, [r2, #4]
 8005c26:	0212      	lsls	r2, r2, #8
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	4936      	ldr	r1, [pc, #216]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	630b      	str	r3, [r1, #48]	@ 0x30
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	025b      	lsls	r3, r3, #9
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	041b      	lsls	r3, r3, #16
 8005c4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	061b      	lsls	r3, r3, #24
 8005c5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c60:	4928      	ldr	r1, [pc, #160]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c66:	4b27      	ldr	r3, [pc, #156]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6a:	f023 020c 	bic.w	r2, r3, #12
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	4924      	ldr	r1, [pc, #144]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005c78:	4b22      	ldr	r3, [pc, #136]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7c:	f023 0220 	bic.w	r2, r3, #32
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	491f      	ldr	r1, [pc, #124]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	491c      	ldr	r1, [pc, #112]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005c98:	4b1a      	ldr	r3, [pc, #104]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9c:	4a19      	ldr	r2, [pc, #100]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005c9e:	f023 0310 	bic.w	r3, r3, #16
 8005ca2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005ca4:	4b17      	ldr	r3, [pc, #92]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6a12      	ldr	r2, [r2, #32]
 8005cb4:	00d2      	lsls	r2, r2, #3
 8005cb6:	4913      	ldr	r1, [pc, #76]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005cbc:	4b11      	ldr	r3, [pc, #68]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	4a10      	ldr	r2, [pc, #64]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005cc2:	f043 0310 	orr.w	r3, r3, #16
 8005cc6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cd4:	f7fb faf6 	bl	80012c4 <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cda:	e008      	b.n	8005cee <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005cdc:	f7fb faf2 	bl	80012c4 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e006      	b.n	8005cfc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cee:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <RCCEx_PLL3_Config+0x12c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	44020c00 	.word	0x44020c00

08005d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e042      	b.n	8005da0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fb f8d9 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2224      	movs	r2, #36	@ 0x24
 8005d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa74 	bl	8006240 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f8c3 	bl	8005ee4 <UART_SetConfig>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e01b      	b.n	8005da0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 faf3 	bl	8006384 <UART_CheckIdleState>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	@ 0x28
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	f040 808b 	bne.w	8005eda <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_UART_Transmit+0x28>
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e083      	b.n	8005edc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dde:	2b80      	cmp	r3, #128	@ 0x80
 8005de0:	d107      	bne.n	8005df2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005df0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2221      	movs	r2, #33	@ 0x21
 8005dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e02:	f7fb fa5f 	bl	80012c4 <HAL_GetTick>
 8005e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e20:	d108      	bne.n	8005e34 <HAL_UART_Transmit+0x8c>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e003      	b.n	8005e3c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e3c:	e030      	b.n	8005ea0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	2180      	movs	r1, #128	@ 0x80
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fb45 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e03d      	b.n	8005edc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	3302      	adds	r3, #2
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	e007      	b.n	8005e8e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1c8      	bne.n	8005e3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2140      	movs	r1, #64	@ 0x40
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fb0e 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e006      	b.n	8005edc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
  }
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee8:	b094      	sub	sp, #80	@ 0x50
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b83      	ldr	r3, [pc, #524]	@ (8006108 <UART_SetConfig+0x224>)
 8005efa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	497c      	ldr	r1, [pc, #496]	@ (800610c <UART_SetConfig+0x228>)
 8005f1c:	4019      	ands	r1, r3
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f34:	68d9      	ldr	r1, [r3, #12]
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	ea40 0301 	orr.w	r3, r0, r1
 8005f3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006108 <UART_SetConfig+0x224>)
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d009      	beq.n	8005f64 <UART_SetConfig+0x80>
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b6e      	ldr	r3, [pc, #440]	@ (8006110 <UART_SetConfig+0x22c>)
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d004      	beq.n	8005f64 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f60:	4313      	orrs	r3, r2
 8005f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005f6e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f82:	f023 000f 	bic.w	r0, r3, #15
 8005f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	ea40 0301 	orr.w	r3, r0, r1
 8005f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b5e      	ldr	r3, [pc, #376]	@ (8006114 <UART_SetConfig+0x230>)
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d102      	bne.n	8005fa4 <UART_SetConfig+0xc0>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa2:	e032      	b.n	800600a <UART_SetConfig+0x126>
 8005fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8006118 <UART_SetConfig+0x234>)
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d102      	bne.n	8005fb4 <UART_SetConfig+0xd0>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fb2:	e02a      	b.n	800600a <UART_SetConfig+0x126>
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b58      	ldr	r3, [pc, #352]	@ (800611c <UART_SetConfig+0x238>)
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d102      	bne.n	8005fc4 <UART_SetConfig+0xe0>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fc2:	e022      	b.n	800600a <UART_SetConfig+0x126>
 8005fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b55      	ldr	r3, [pc, #340]	@ (8006120 <UART_SetConfig+0x23c>)
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d102      	bne.n	8005fd4 <UART_SetConfig+0xf0>
 8005fce:	2308      	movs	r3, #8
 8005fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd2:	e01a      	b.n	800600a <UART_SetConfig+0x126>
 8005fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b52      	ldr	r3, [pc, #328]	@ (8006124 <UART_SetConfig+0x240>)
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d102      	bne.n	8005fe4 <UART_SetConfig+0x100>
 8005fde:	2310      	movs	r3, #16
 8005fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fe2:	e012      	b.n	800600a <UART_SetConfig+0x126>
 8005fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8006128 <UART_SetConfig+0x244>)
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d102      	bne.n	8005ff4 <UART_SetConfig+0x110>
 8005fee:	2320      	movs	r3, #32
 8005ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff2:	e00a      	b.n	800600a <UART_SetConfig+0x126>
 8005ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4b43      	ldr	r3, [pc, #268]	@ (8006108 <UART_SetConfig+0x224>)
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d103      	bne.n	8006006 <UART_SetConfig+0x122>
 8005ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006004:	e001      	b.n	800600a <UART_SetConfig+0x126>
 8006006:	2300      	movs	r3, #0
 8006008:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b3e      	ldr	r3, [pc, #248]	@ (8006108 <UART_SetConfig+0x224>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d005      	beq.n	8006020 <UART_SetConfig+0x13c>
 8006014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b3d      	ldr	r3, [pc, #244]	@ (8006110 <UART_SetConfig+0x22c>)
 800601a:	429a      	cmp	r2, r3
 800601c:	f040 8088 	bne.w	8006130 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006022:	2200      	movs	r2, #0
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	627a      	str	r2, [r7, #36]	@ 0x24
 8006028:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800602c:	f7fe f9ec 	bl	8004408 <HAL_RCCEx_GetPeriphCLKFreq>
 8006030:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80eb 	beq.w	8006210 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	4a3b      	ldr	r2, [pc, #236]	@ (800612c <UART_SetConfig+0x248>)
 8006040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006044:	461a      	mov	r2, r3
 8006046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006048:	fbb3 f3f2 	udiv	r3, r3, r2
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	4413      	add	r3, r2
 8006058:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800605a:	429a      	cmp	r2, r3
 800605c:	d305      	bcc.n	800606a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006066:	429a      	cmp	r2, r3
 8006068:	d903      	bls.n	8006072 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006070:	e048      	b.n	8006104 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006074:	2200      	movs	r2, #0
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	4a2b      	ldr	r2, [pc, #172]	@ (800612c <UART_SetConfig+0x248>)
 8006080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006084:	b29b      	uxth	r3, r3
 8006086:	2200      	movs	r2, #0
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	617a      	str	r2, [r7, #20]
 800608c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006090:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006094:	f7fa f906 	bl	80002a4 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	020b      	lsls	r3, r1, #8
 80060aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060ae:	0202      	lsls	r2, r0, #8
 80060b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060b2:	6849      	ldr	r1, [r1, #4]
 80060b4:	0849      	lsrs	r1, r1, #1
 80060b6:	2000      	movs	r0, #0
 80060b8:	460c      	mov	r4, r1
 80060ba:	4605      	mov	r5, r0
 80060bc:	eb12 0804 	adds.w	r8, r2, r4
 80060c0:	eb43 0905 	adc.w	r9, r3, r5
 80060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	60fa      	str	r2, [r7, #12]
 80060ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060d2:	4640      	mov	r0, r8
 80060d4:	4649      	mov	r1, r9
 80060d6:	f7fa f8e5 	bl	80002a4 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4613      	mov	r3, r2
 80060e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e8:	d308      	bcc.n	80060fc <UART_SetConfig+0x218>
 80060ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f0:	d204      	bcs.n	80060fc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	e003      	b.n	8006104 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006102:	e085      	b.n	8006210 <UART_SetConfig+0x32c>
 8006104:	e084      	b.n	8006210 <UART_SetConfig+0x32c>
 8006106:	bf00      	nop
 8006108:	44002400 	.word	0x44002400
 800610c:	cfff69f3 	.word	0xcfff69f3
 8006110:	54002400 	.word	0x54002400
 8006114:	40013800 	.word	0x40013800
 8006118:	40004400 	.word	0x40004400
 800611c:	40004800 	.word	0x40004800
 8006120:	40004c00 	.word	0x40004c00
 8006124:	40005000 	.word	0x40005000
 8006128:	40006400 	.word	0x40006400
 800612c:	080072d4 	.word	0x080072d4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006138:	d13c      	bne.n	80061b4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800613a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613c:	2200      	movs	r2, #0
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006146:	f7fe f95f 	bl	8004408 <HAL_RCCEx_GetPeriphCLKFreq>
 800614a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800614c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d05e      	beq.n	8006210 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	4a39      	ldr	r2, [pc, #228]	@ (800623c <UART_SetConfig+0x358>)
 8006158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800615c:	461a      	mov	r2, r3
 800615e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006160:	fbb3 f3f2 	udiv	r3, r3, r2
 8006164:	005a      	lsls	r2, r3, #1
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	441a      	add	r2, r3
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617a:	2b0f      	cmp	r3, #15
 800617c:	d916      	bls.n	80061ac <UART_SetConfig+0x2c8>
 800617e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006184:	d212      	bcs.n	80061ac <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006188:	b29b      	uxth	r3, r3
 800618a:	f023 030f 	bic.w	r3, r3, #15
 800618e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	b29b      	uxth	r3, r3
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	b29a      	uxth	r2, r3
 800619c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800619e:	4313      	orrs	r3, r2
 80061a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80061a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	e031      	b.n	8006210 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80061b2:	e02d      	b.n	8006210 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80061b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061b6:	2200      	movs	r2, #0
 80061b8:	469a      	mov	sl, r3
 80061ba:	4693      	mov	fp, r2
 80061bc:	4650      	mov	r0, sl
 80061be:	4659      	mov	r1, fp
 80061c0:	f7fe f922 	bl	8004408 <HAL_RCCEx_GetPeriphCLKFreq>
 80061c4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80061c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d021      	beq.n	8006210 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	4a1a      	ldr	r2, [pc, #104]	@ (800623c <UART_SetConfig+0x358>)
 80061d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d6:	461a      	mov	r2, r3
 80061d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061da:	fbb3 f2f2 	udiv	r2, r3, r2
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	441a      	add	r2, r3
 80061e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f2:	2b0f      	cmp	r3, #15
 80061f4:	d909      	bls.n	800620a <UART_SetConfig+0x326>
 80061f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061fc:	d205      	bcs.n	800620a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006200:	b29a      	uxth	r2, r3
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60da      	str	r2, [r3, #12]
 8006208:	e002      	b.n	8006210 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	2201      	movs	r2, #1
 8006214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	2201      	movs	r2, #1
 800621c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	2200      	movs	r2, #0
 8006224:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006228:	2200      	movs	r2, #0
 800622a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800622c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006230:	4618      	mov	r0, r3
 8006232:	3750      	adds	r7, #80	@ 0x50
 8006234:	46bd      	mov	sp, r7
 8006236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800623a:	bf00      	nop
 800623c:	080072d4 	.word	0x080072d4

08006240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01a      	beq.n	8006356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800633e:	d10a      	bne.n	8006356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b098      	sub	sp, #96	@ 0x60
 8006388:	af02      	add	r7, sp, #8
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006394:	f7fa ff96 	bl	80012c4 <HAL_GetTick>
 8006398:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d12f      	bne.n	8006408 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f88e 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d022      	beq.n	8006408 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e063      	b.n	80064d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d149      	bne.n	80064aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006416:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641e:	2200      	movs	r2, #0
 8006420:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f857 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d03c      	beq.n	80064aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	623b      	str	r3, [r7, #32]
   return(result);
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006444:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800644e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006450:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e6      	bne.n	8006430 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3308      	adds	r3, #8
 8006468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	60fb      	str	r3, [r7, #12]
   return(result);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3308      	adds	r3, #8
 8006480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006482:	61fa      	str	r2, [r7, #28]
 8006484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	69b9      	ldr	r1, [r7, #24]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	617b      	str	r3, [r7, #20]
   return(result);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e012      	b.n	80064d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3758      	adds	r7, #88	@ 0x58
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	4613      	mov	r3, r2
 80064e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e8:	e04f      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d04b      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7fa fee7 	bl	80012c4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <UART_WaitOnFlagUntilTimeout+0x30>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e04e      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	d037      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b80      	cmp	r3, #128	@ 0x80
 800651e:	d034      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b40      	cmp	r3, #64	@ 0x40
 8006524:	d031      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d110      	bne.n	8006556 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2208      	movs	r2, #8
 800653a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f838 	bl	80065b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2208      	movs	r2, #8
 8006546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e029      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006564:	d111      	bne.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800656e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f81e 	bl	80065b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e00f      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4013      	ands	r3, r2
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d0a0      	beq.n	80064ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b095      	sub	sp, #84	@ 0x54
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e6      	bne.n	80065ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e3      	bne.n	80065ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d118      	bne.n	800665e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	60bb      	str	r3, [r7, #8]
   return(result);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f023 0310 	bic.w	r3, r3, #16
 8006640:	647b      	str	r3, [r7, #68]	@ 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664a:	61bb      	str	r3, [r7, #24]
 800664c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6979      	ldr	r1, [r7, #20]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	613b      	str	r3, [r7, #16]
   return(result);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006672:	bf00      	nop
 8006674:	3754      	adds	r7, #84	@ 0x54
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_UARTEx_DisableFifoMode+0x16>
 8006690:	2302      	movs	r3, #2
 8006692:	e027      	b.n	80066e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	@ 0x24
 80066a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006704:	2302      	movs	r3, #2
 8006706:	e02d      	b.n	8006764 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	@ 0x24
 8006714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0201 	bic.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f84f 	bl	80067e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006780:	2302      	movs	r3, #2
 8006782:	e02d      	b.n	80067e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2224      	movs	r2, #36	@ 0x24
 8006790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f811 	bl	80067e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006808:	e031      	b.n	800686e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800680a:	2308      	movs	r3, #8
 800680c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800680e:	2308      	movs	r3, #8
 8006810:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	0e5b      	lsrs	r3, r3, #25
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	0f5b      	lsrs	r3, r3, #29
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	7b3a      	ldrb	r2, [r7, #12]
 8006836:	4911      	ldr	r1, [pc, #68]	@ (800687c <UARTEx_SetNbDataToProcess+0x94>)
 8006838:	5c8a      	ldrb	r2, [r1, r2]
 800683a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800683e:	7b3a      	ldrb	r2, [r7, #12]
 8006840:	490f      	ldr	r1, [pc, #60]	@ (8006880 <UARTEx_SetNbDataToProcess+0x98>)
 8006842:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006844:	fb93 f3f2 	sdiv	r3, r3, r2
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	7b7a      	ldrb	r2, [r7, #13]
 8006854:	4909      	ldr	r1, [pc, #36]	@ (800687c <UARTEx_SetNbDataToProcess+0x94>)
 8006856:	5c8a      	ldrb	r2, [r1, r2]
 8006858:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800685c:	7b7a      	ldrb	r2, [r7, #13]
 800685e:	4908      	ldr	r1, [pc, #32]	@ (8006880 <UARTEx_SetNbDataToProcess+0x98>)
 8006860:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006862:	fb93 f3f2 	sdiv	r3, r3, r2
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	080072ec 	.word	0x080072ec
 8006880:	080072f4 	.word	0x080072f4

08006884 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af02      	add	r7, sp, #8
 800688a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006890:	f7fa fd18 	bl	80012c4 <HAL_GetTick>
 8006894:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	e0bc      	b.n	8006a1c <HAL_XSPI_Init+0x198>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a60      	ldr	r2, [pc, #384]	@ (8006a28 <HAL_XSPI_Init+0x1a4>)
 80068a8:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 80b1 	bne.w	8006a1c <HAL_XSPI_Init+0x198>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fa fa5a 	bl	8000d74 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80068c0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fa5b 	bl	8006d80 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	4b56      	ldr	r3, [pc, #344]	@ (8006a2c <HAL_XSPI_Init+0x1a8>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	68d1      	ldr	r1, [r2, #12]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6912      	ldr	r2, [r2, #16]
 80068dc:	0412      	lsls	r2, r2, #16
 80068de:	4311      	orrs	r1, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6952      	ldr	r2, [r2, #20]
 80068e4:	3a01      	subs	r2, #1
 80068e6:	0212      	lsls	r2, r2, #8
 80068e8:	4311      	orrs	r1, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	69d2      	ldr	r2, [r2, #28]
 80068ee:	4311      	orrs	r1, r2
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a4a      	ldr	r2, [pc, #296]	@ (8006a28 <HAL_XSPI_Init+0x1a4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_XSPI_Init+0x88>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4a      	ldr	r2, [pc, #296]	@ (8006a30 <HAL_XSPI_Init+0x1ac>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d10a      	bne.n	8006922 <HAL_XSPI_Init+0x9e>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f023 0108 	bic.w	r1, r3, #8
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006946:	041a      	lsls	r2, r3, #16
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006958:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	3b01      	subs	r3, #1
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2200      	movs	r2, #0
 800697e:	2120      	movs	r1, #32
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa0c 	bl	8006d9e <XSPI_WaitFlagStateUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d145      	bne.n	8006a1c <HAL_XSPI_Init+0x198>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069c4:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d107      	bne.n	8006a04 <HAL_XSPI_Init+0x180>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0202 	orr.w	r2, r2, #2
 8006a02:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a0c:	d103      	bne.n	8006a16 <HAL_XSPI_Init+0x192>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a14:	e002      	b.n	8006a1c <HAL_XSPI_Init+0x198>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
    }
  }
  return status;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	47001400 	.word	0x47001400
 8006a2c:	f8e0c0fc 	.word	0xf8e0c0fc
 8006a30:	57001400 	.word	0x57001400

08006a34 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	@ 0x28
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006a40:	f7fa fc40 	bl	80012c4 <HAL_GetTick>
 8006a44:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a50:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d104      	bne.n	8006a62 <HAL_XSPI_Command+0x2e>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a60:	d115      	bne.n	8006a8e <HAL_XSPI_Command+0x5a>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b14      	cmp	r3, #20
 8006a66:	d107      	bne.n	8006a78 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d00e      	beq.n	8006a8e <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d00a      	beq.n	8006a8e <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b24      	cmp	r3, #36	@ 0x24
 8006a7c:	d15e      	bne.n	8006b3c <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d003      	beq.n	8006a8e <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d156      	bne.n	8006b3c <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2200      	movs	r2, #0
 8006a96:	2120      	movs	r1, #32
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f980 	bl	8006d9e <XSPI_WaitFlagStateUntilTimeout>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006aa2:	7ffb      	ldrb	r3, [r7, #31]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d146      	bne.n	8006b36 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f9ab 	bl	8006e0c <XSPI_ConfigCmd>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8006aba:	7ffb      	ldrb	r3, [r7, #31]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d143      	bne.n	8006b48 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10e      	bne.n	8006ae6 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2120      	movs	r1, #32
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f963 	bl	8006d9e <XSPI_WaitFlagStateUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006ae4:	e030      	b.n	8006b48 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2204      	movs	r2, #4
 8006af2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006af4:	e028      	b.n	8006b48 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10b      	bne.n	8006b16 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b02:	2b24      	cmp	r3, #36	@ 0x24
 8006b04:	d103      	bne.n	8006b0e <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b0c:	e01c      	b.n	8006b48 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2214      	movs	r2, #20
 8006b12:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b14:	e018      	b.n	8006b48 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d114      	bne.n	8006b48 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b22:	2b14      	cmp	r3, #20
 8006b24:	d103      	bne.n	8006b2e <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b2c:	e00c      	b.n	8006b48 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2224      	movs	r2, #36	@ 0x24
 8006b32:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b34:	e008      	b.n	8006b48 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
 8006b38:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8006b3a:	e005      	b.n	8006b48 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2210      	movs	r2, #16
 8006b44:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b46:	e000      	b.n	8006b4a <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8006b48:	bf00      	nop
  }

  return status;
 8006b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	@ 0x28
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b60:	f7fa fbb0 	bl	80012c4 <HAL_GetTick>
 8006b64:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3350      	adds	r3, #80	@ 0x50
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b7e:	e057      	b.n	8006c30 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d14e      	bne.n	8006c26 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006bb0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	2104      	movs	r1, #4
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f8ee 	bl	8006d9e <XSPI_WaitFlagStateUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006bc6:	7ffb      	ldrb	r3, [r7, #31]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d113      	bne.n	8006bf4 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1df      	bne.n	8006bb2 <HAL_XSPI_Transmit+0x5e>
 8006bf2:	e000      	b.n	8006bf6 <HAL_XSPI_Transmit+0xa2>
          break;
 8006bf4:	bf00      	nop

      if (status == HAL_OK)
 8006bf6:	7ffb      	ldrb	r3, [r7, #31]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d119      	bne.n	8006c30 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2201      	movs	r2, #1
 8006c04:	2102      	movs	r1, #2
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f8c9 	bl	8006d9e <XSPI_WaitFlagStateUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006c10:	7ffb      	ldrb	r3, [r7, #31]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10c      	bne.n	8006c30 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2202      	movs	r2, #2
 8006c22:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c24:	e004      	b.n	8006c30 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8006c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b08c      	sub	sp, #48	@ 0x30
 8006c3e:	af02      	add	r7, sp, #8
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c46:	f7fa fb3d 	bl	80012c4 <HAL_GetTick>
 8006c4a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3350      	adds	r3, #80	@ 0x50
 8006c52:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c5a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006c64:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2208      	movs	r2, #8
 8006c76:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c78:	e07c      	b.n	8006d74 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d172      	bne.n	8006d68 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferSize  = hxspi->XferCount;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cb8:	d104      	bne.n	8006cc4 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	649a      	str	r2, [r3, #72]	@ 0x48
 8006cc2:	e011      	b.n	8006ce8 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	649a      	str	r2, [r3, #72]	@ 0x48
 8006cdc:	e004      	b.n	8006ce8 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	2106      	movs	r1, #6
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 f853 	bl	8006d9e <XSPI_WaitFlagStateUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8006cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d114      	bne.n	8006d30 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	7812      	ldrb	r2, [r2, #0]
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
        hxspi->XferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d20:	1e5a      	subs	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	645a      	str	r2, [r3, #68]	@ 0x44
      } while (hxspi->XferCount > 0U);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1dc      	bne.n	8006ce8 <HAL_XSPI_Receive+0xae>
 8006d2e:	e000      	b.n	8006d32 <HAL_XSPI_Receive+0xf8>
          break;
 8006d30:	bf00      	nop

      if (status == HAL_OK)
 8006d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d11c      	bne.n	8006d74 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	2201      	movs	r2, #1
 8006d42:	2102      	movs	r1, #2
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f82a 	bl	8006d9e <XSPI_WaitFlagStateUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10d      	bne.n	8006d74 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2202      	movs	r2, #2
 8006d64:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d66:	e005      	b.n	8006d74 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2210      	movs	r2, #16
 8006d72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8006d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	@ 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	603b      	str	r3, [r7, #0]
 8006daa:	4613      	mov	r3, r2
 8006dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006dae:	e019      	b.n	8006de4 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d015      	beq.n	8006de4 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db8:	f7fa fa84 	bl	80012c4 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d302      	bcc.n	8006dce <XSPI_WaitFlagStateUntilTimeout+0x30>
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	651a      	str	r2, [r3, #80]	@ 0x50
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd8:	f043 0201 	orr.w	r2, r3, #1
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e00e      	b.n	8006e02 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bf14      	ite	ne
 8006df2:	2301      	movne	r3, #1
 8006df4:	2300      	moveq	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d1d7      	bne.n	8006db0 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	@ 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006e28:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d114      	bne.n	8006e7a <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006e58:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006e62:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006e6c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e02c      	b.n	8006ed4 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d114      	bne.n	8006eac <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006e8a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006e94:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e9e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	e013      	b.n	8006ed4 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006eb4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006ebe:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006ec8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006edc:	431a      	orrs	r2, r3
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	601a      	str	r2, [r3, #0]

  /* Workaround for Erratasheet: Memory-mapped write error response when DQS output is disabled */
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d105      	bne.n	8006ef6 <XSPI_ConfigCmd+0xea>
  {
    /* When doing memory-mapped writes, set the DQSE bit of the OCTOSPI_WCCR register,
       even for memories that have no DQS pin. */
    SET_BIT((*ccr_reg), XSPI_CCR_DQSE);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d012      	beq.n	8006f24 <XSPI_ConfigCmd+0x118>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f16:	4319      	orrs	r1, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f023 021f 	bic.w	r2, r3, #31
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f30:	431a      	orrs	r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <XSPI_ConfigCmd+0x146>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d105      	bne.n	8006f52 <XSPI_ConfigCmd+0x146>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3a01      	subs	r2, #1
 8006f50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01e      	beq.n	8006f98 <XSPI_ConfigCmd+0x18c>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f62:	d10a      	bne.n	8006f7a <XSPI_ConfigCmd+0x16e>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8006f74:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006f78:	e00e      	b.n	8006f98 <XSPI_ConfigCmd+0x18c>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f82:	d109      	bne.n	8006f98 <XSPI_ConfigCmd+0x18c>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006f94:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 8099 	beq.w	80070d4 <XSPI_ConfigCmd+0x2c8>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d055      	beq.n	8007056 <XSPI_ConfigCmd+0x24a>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01e      	beq.n	8006ff0 <XSPI_ConfigCmd+0x1e4>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b68      	ldr	r3, [pc, #416]	@ (8007158 <XSPI_ConfigCmd+0x34c>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	68d1      	ldr	r1, [r2, #12]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	6952      	ldr	r2, [r2, #20]
 8006fc2:	4311      	orrs	r1, r2
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	6912      	ldr	r2, [r2, #16]
 8006fc8:	4311      	orrs	r1, r2
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	69d2      	ldr	r2, [r2, #28]
 8006fce:	4311      	orrs	r1, r2
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fd4:	4311      	orrs	r1, r2
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	6a12      	ldr	r2, [r2, #32]
 8006fda:	4311      	orrs	r1, r2
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006fe0:	4311      	orrs	r1, r2
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e028      	b.n	8007042 <XSPI_ConfigCmd+0x236>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	68d1      	ldr	r1, [r2, #12]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	6952      	ldr	r2, [r2, #20]
 8007004:	4311      	orrs	r1, r2
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	6912      	ldr	r2, [r2, #16]
 800700a:	4311      	orrs	r1, r2
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	69d2      	ldr	r2, [r2, #28]
 8007010:	4311      	orrs	r1, r2
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007016:	4311      	orrs	r1, r2
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	6a12      	ldr	r2, [r2, #32]
 800701c:	430a      	orrs	r2, r1
 800701e:	431a      	orrs	r2, r3
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800702c:	d109      	bne.n	8007042 <XSPI_ConfigCmd+0x236>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8007032:	2b08      	cmp	r3, #8
 8007034:	d105      	bne.n	8007042 <XSPI_ConfigCmd+0x236>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	6992      	ldr	r2, [r2, #24]
 8007052:	649a      	str	r2, [r3, #72]	@ 0x48
 8007054:	e078      	b.n	8007148 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	d017      	beq.n	800708e <XSPI_ConfigCmd+0x282>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8007066:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	68d1      	ldr	r1, [r2, #12]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	6952      	ldr	r2, [r2, #20]
 8007072:	4311      	orrs	r1, r2
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	6912      	ldr	r2, [r2, #16]
 8007078:	4311      	orrs	r1, r2
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800707e:	4311      	orrs	r1, r2
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007084:	430a      	orrs	r2, r1
 8007086:	431a      	orrs	r2, r3
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e01d      	b.n	80070ca <XSPI_ConfigCmd+0x2be>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68d9      	ldr	r1, [r3, #12]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	4319      	orrs	r1, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	430b      	orrs	r3, r1
 80070a6:	431a      	orrs	r2, r3
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070b4:	d109      	bne.n	80070ca <XSPI_ConfigCmd+0x2be>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d105      	bne.n	80070ca <XSPI_ConfigCmd+0x2be>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e039      	b.n	8007148 <XSPI_ConfigCmd+0x33c>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d030      	beq.n	800713e <XSPI_ConfigCmd+0x332>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d017      	beq.n	8007114 <XSPI_ConfigCmd+0x308>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80070ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	69d1      	ldr	r1, [r2, #28]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070f8:	4311      	orrs	r1, r2
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	6a12      	ldr	r2, [r2, #32]
 80070fe:	4311      	orrs	r1, r2
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007104:	4311      	orrs	r1, r2
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800710a:	430a      	orrs	r2, r1
 800710c:	431a      	orrs	r2, r3
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	e00e      	b.n	8007132 <XSPI_ConfigCmd+0x326>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	69d9      	ldr	r1, [r3, #28]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007124:	4319      	orrs	r1, r3
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	430b      	orrs	r3, r1
 800712c:	431a      	orrs	r2, r3
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	6992      	ldr	r2, [r2, #24]
 800713a:	649a      	str	r2, [r3, #72]	@ 0x48
 800713c:	e004      	b.n	8007148 <XSPI_ConfigCmd+0x33c>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2208      	movs	r2, #8
 8007146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  return status;
 8007148:	7ffb      	ldrb	r3, [r7, #31]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3724      	adds	r7, #36	@ 0x24
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	f0ffc0c0 	.word	0xf0ffc0c0

0800715c <memset>:
 800715c:	4402      	add	r2, r0
 800715e:	4603      	mov	r3, r0
 8007160:	4293      	cmp	r3, r2
 8007162:	d100      	bne.n	8007166 <memset+0xa>
 8007164:	4770      	bx	lr
 8007166:	f803 1b01 	strb.w	r1, [r3], #1
 800716a:	e7f9      	b.n	8007160 <memset+0x4>

0800716c <__libc_init_array>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4d0d      	ldr	r5, [pc, #52]	@ (80071a4 <__libc_init_array+0x38>)
 8007170:	2600      	movs	r6, #0
 8007172:	4c0d      	ldr	r4, [pc, #52]	@ (80071a8 <__libc_init_array+0x3c>)
 8007174:	1b64      	subs	r4, r4, r5
 8007176:	10a4      	asrs	r4, r4, #2
 8007178:	42a6      	cmp	r6, r4
 800717a:	d109      	bne.n	8007190 <__libc_init_array+0x24>
 800717c:	4d0b      	ldr	r5, [pc, #44]	@ (80071ac <__libc_init_array+0x40>)
 800717e:	2600      	movs	r6, #0
 8007180:	4c0b      	ldr	r4, [pc, #44]	@ (80071b0 <__libc_init_array+0x44>)
 8007182:	f000 f82d 	bl	80071e0 <_init>
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	42a6      	cmp	r6, r4
 800718c:	d105      	bne.n	800719a <__libc_init_array+0x2e>
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	f855 3b04 	ldr.w	r3, [r5], #4
 8007194:	3601      	adds	r6, #1
 8007196:	4798      	blx	r3
 8007198:	e7ee      	b.n	8007178 <__libc_init_array+0xc>
 800719a:	f855 3b04 	ldr.w	r3, [r5], #4
 800719e:	3601      	adds	r6, #1
 80071a0:	4798      	blx	r3
 80071a2:	e7f2      	b.n	800718a <__libc_init_array+0x1e>
 80071a4:	08007304 	.word	0x08007304
 80071a8:	08007304 	.word	0x08007304
 80071ac:	08007304 	.word	0x08007304
 80071b0:	08007308 	.word	0x08007308

080071b4 <strcpy>:
 80071b4:	4603      	mov	r3, r0
 80071b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ba:	f803 2b01 	strb.w	r2, [r3], #1
 80071be:	2a00      	cmp	r2, #0
 80071c0:	d1f9      	bne.n	80071b6 <strcpy+0x2>
 80071c2:	4770      	bx	lr

080071c4 <memcpy>:
 80071c4:	440a      	add	r2, r1
 80071c6:	1e43      	subs	r3, r0, #1
 80071c8:	4291      	cmp	r1, r2
 80071ca:	d100      	bne.n	80071ce <memcpy+0xa>
 80071cc:	4770      	bx	lr
 80071ce:	b510      	push	{r4, lr}
 80071d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d4:	4291      	cmp	r1, r2
 80071d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071da:	d1f9      	bne.n	80071d0 <memcpy+0xc>
 80071dc:	bd10      	pop	{r4, pc}
	...

080071e0 <_init>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr

080071ec <_fini>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr
